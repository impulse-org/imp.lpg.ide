//
// This is the grammar specification from the Final Draft of the generic spec.
//
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007 IBM Corporation.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
//Contributors:
//    Philippe Charles (pcharles@us.ibm.com) - initial API and implementation

////////////////////////////////////////////////////////////////////////////////

package org.eclipse.imp.lpg.parser;

import lpg.runtime.*;

import java.lang.*;
public class JavaParser implements RuleAction
{
    private PrsStream prsStream = null;
    
    private boolean unimplementedSymbolsWarning = false;

    private static ParseTable prsTable = new JavaParserprs();
    public ParseTable getParseTable() { return prsTable; }

    private BacktrackingParser btParser = null;
    public BacktrackingParser getParser() { return btParser; }

    private void setResult(Object object) { btParser.setSym1(object); }
    public Object getRhsSym(int i) { return btParser.getSym(i); }

    public int getRhsTokenIndex(int i) { return btParser.getToken(i); }
    public IToken getRhsIToken(int i) { return prsStream.getIToken(getRhsTokenIndex(i)); }
    
    public int getRhsFirstTokenIndex(int i) { return btParser.getFirstToken(i); }
    public IToken getRhsFirstIToken(int i) { return prsStream.getIToken(getRhsFirstTokenIndex(i)); }

    public int getRhsLastTokenIndex(int i) { return btParser.getLastToken(i); }
    public IToken getRhsLastIToken(int i) { return prsStream.getIToken(getRhsLastTokenIndex(i)); }

    public int getLeftSpan() { return btParser.getFirstToken(); }
    public IToken getLeftIToken()  { return prsStream.getIToken(getLeftSpan()); }

    public int getRightSpan() { return btParser.getLastToken(); }
    public IToken getRightIToken() { return prsStream.getIToken(getRightSpan()); }

    public int getRhsErrorTokenIndex(int i)
    {
        int index = btParser.getToken(i);
        IToken err = prsStream.getIToken(index);
        return (err instanceof ErrorToken ? index : 0);
    }
    public ErrorToken getRhsErrorIToken(int i)
    {
        int index = btParser.getToken(i);
        IToken err = prsStream.getIToken(index);
        return (ErrorToken) (err instanceof ErrorToken ? err : null);
    }

    public void reset(ILexStream lexStream)
    {
        prsStream = new PrsStream(lexStream);
        btParser.reset(prsStream);

        try
        {
            prsStream.remapTerminalSymbols(orderedTerminalSymbols(), prsTable.getEoftSymbol());
        }
        catch(NullExportedSymbolsException e) {
        }
        catch(NullTerminalSymbolsException e) {
        }
        catch(UnimplementedTerminalsException e)
        {
            if (unimplementedSymbolsWarning) {
                java.util.ArrayList unimplemented_symbols = e.getSymbols();
                System.out.println("The Lexer will not scan the following token(s):");
                for (int i = 0; i < unimplemented_symbols.size(); i++)
                {
                    Integer id = (Integer) unimplemented_symbols.get(i);
                    System.out.println("    " + JavaParsersym.orderedTerminalSymbols[id.intValue()]);               
                }
                System.out.println();
            }
        }
        catch(UndefinedEofSymbolException e)
        {
            throw new Error(new UndefinedEofSymbolException
                                ("The Lexer does not implement the Eof symbol " +
                                 JavaParsersym.orderedTerminalSymbols[prsTable.getEoftSymbol()]));
        } 
    }
    
    public JavaParser()
    {
        try
        {
            btParser = new BacktrackingParser(prsStream, prsTable, (RuleAction) this);
        }
        catch (NotBacktrackParseTableException e)
        {
            throw new Error(new NotBacktrackParseTableException
                                ("Regenerate JavaParserprs.java with -BACKTRACK option"));
        }
        catch (BadParseSymFileException e)
        {
            throw new Error(new BadParseSymFileException("Bad Parser Symbol File -- JavaParsersym.java"));
        }
    }
    
    public JavaParser(ILexStream lexStream)
    {
        this();
        reset(lexStream);
    }
    
    public int numTokenKinds() { return JavaParsersym.numTokenKinds; }
    public String[] orderedTerminalSymbols() { return JavaParsersym.orderedTerminalSymbols; }
    public String getTokenKindName(int kind) { return JavaParsersym.orderedTerminalSymbols[kind]; }
    public int getEOFTokenKind() { return prsTable.getEoftSymbol(); }
    public IPrsStream getIPrsStream() { return prsStream; }

    /**
     * @deprecated replaced by {@link #getIPrsStream()}
     *
     */
    public PrsStream getPrsStream() { return prsStream; }

    /**
     * @deprecated replaced by {@link #getIPrsStream()}
     *
     */
    public PrsStream getParseStream() { return prsStream; }

    public Ast parser()
    {
        return parser(null, 0);
    }
    
    public Ast parser(Monitor monitor)
    {
        return parser(monitor, 0);
    }
    
    public Ast parser(int error_repair_count)
    {
        return parser(null, error_repair_count);
    }

    public Ast parser(Monitor monitor, int error_repair_count)
    {
        btParser.setMonitor(monitor);
        
        try
        {
            return (Ast) btParser.fuzzyParse(error_repair_count);
        }
        catch (BadParseException e)
        {
            prsStream.reset(e.error_token); // point to error token

            DiagnoseParser diagnoseParser = new DiagnoseParser(prsStream, prsTable);
            diagnoseParser.diagnose(e.error_token);
        }

        return null;
    }

    //
    // Additional entry points, if any
    //
    
    public Ast parseClassBodyDeclarationsopt()
    {
        return parseClassBodyDeclarationsopt(null, 0);
    }
        
    public Ast parseClassBodyDeclarationsopt(Monitor monitor)
    {
        return parseClassBodyDeclarationsopt(monitor, 0);
    }
        
    public Ast parseClassBodyDeclarationsopt(int error_repair_count)
    {
        return parseClassBodyDeclarationsopt(null, error_repair_count);
    }
        
    public Ast parseClassBodyDeclarationsopt(Monitor monitor, int error_repair_count)
    {
        btParser.setMonitor(monitor);
        
        try
        {
            return (Ast) btParser.fuzzyParseEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker, error_repair_count);
        }
        catch (BadParseException e)
        {
            prsStream.reset(e.error_token); // point to error token

            DiagnoseParser diagnoseParser = new DiagnoseParser(prsStream, prsTable);
            diagnoseParser.diagnoseEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker, e.error_token);
        }

        return null;
    }

    public Ast parseLPGUserAction()
    {
        return parseLPGUserAction(null, 0);
    }
        
    public Ast parseLPGUserAction(Monitor monitor)
    {
        return parseLPGUserAction(monitor, 0);
    }
        
    public Ast parseLPGUserAction(int error_repair_count)
    {
        return parseLPGUserAction(null, error_repair_count);
    }
        
    public Ast parseLPGUserAction(Monitor monitor, int error_repair_count)
    {
        btParser.setMonitor(monitor);
        
        try
        {
            return (Ast) btParser.fuzzyParseEntry(JavaParsersym.TK_LPGUserActionMarker, error_repair_count);
        }
        catch (BadParseException e)
        {
            prsStream.reset(e.error_token); // point to error token

            DiagnoseParser diagnoseParser = new DiagnoseParser(prsStream, prsTable);
            diagnoseParser.diagnoseEntry(JavaParsersym.TK_LPGUserActionMarker, e.error_token);
        }

        return null;
    }

    static public abstract class Ast implements IAst
    {
        public IAst getNextAst() { return null; }
        protected IToken leftIToken,
                         rightIToken;
        protected IAst parent = null;
        protected void setParent(IAst parent) { this.parent = parent; }
        public IAst getParent() { return parent; }

        public IToken getLeftIToken() { return leftIToken; }
        public IToken getRightIToken() { return rightIToken; }
        public IToken[] getPrecedingAdjuncts() { return leftIToken.getPrecedingAdjuncts(); }
        public IToken[] getFollowingAdjuncts() { return rightIToken.getFollowingAdjuncts(); }

        public String toString()
        {
            return leftIToken.getILexStream().toString(leftIToken.getStartOffset(), rightIToken.getEndOffset());
        }

        public Ast(IToken token) { this.leftIToken = this.rightIToken = token; }
        public Ast(IToken leftIToken, IToken rightIToken)
        {
            this.leftIToken = leftIToken;
            this.rightIToken = rightIToken;
        }

        void initialize() {}

        /**
         * A list of all children of this node, excluding the null ones.
         */
        public java.util.ArrayList getChildren()
        {
            java.util.ArrayList list = getAllChildren();
            int k = -1;
            for (int i = 0; i < list.size(); i++)
            {
                Object element = list.get(i);
                if (element != null)
                {
                    if (++k != i)
                        list.set(k, element);
                }
            }
            for (int i = list.size() - 1; i > k; i--) // remove extraneous elements
                list.remove(i);
            return list;
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public abstract java.util.ArrayList getAllChildren();

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Ast)) return false;
            Ast other = (Ast) o;
            return getLeftIToken().getILexStream() == other.getLeftIToken().getILexStream() &&
                   getLeftIToken().getTokenIndex() == other.getLeftIToken().getTokenIndex() &&
                   getRightIToken().getILexStream() == other.getRightIToken().getILexStream() &&
                   getRightIToken().getTokenIndex() == other.getRightIToken().getTokenIndex();
        }

        public int hashCode()
        {
            int hash = 7;
            if (getLeftIToken().getILexStream() != null) hash = hash * 31 + getLeftIToken().getILexStream().hashCode();
            hash = hash * 31 + getLeftIToken().getTokenIndex();
            if (getRightIToken().getILexStream() != null) hash = hash * 31 + getRightIToken().getILexStream().hashCode();
            hash = hash * 31 + getRightIToken().getTokenIndex();
            return hash;
        }
        public abstract void accept(IAstVisitor v);
    }

    static public abstract class AbstractAstList extends Ast implements IAbstractArrayList<Ast>
    {
        private boolean leftRecursive;
        private java.util.ArrayList list;
        public int size() { return list.size(); }
        public java.util.List getList() { return list; }
        public Ast getElementAt(int i) { return (Ast) list.get(leftRecursive ? i : list.size() - 1 - i); }
        public java.util.ArrayList getArrayList()
        {
            if (! leftRecursive) // reverse the list 
            {
                for (int i = 0, n = list.size() - 1; i < n; i++, n--)
                {
                    Object ith = list.get(i),
                           nth = list.get(n);
                    list.set(i, nth);
                    list.set(n, ith);
                }
                leftRecursive = true;
            }
            return list;
        }
        public void add(Ast element)
        {
            list.add(element);
            if (leftRecursive)
                 rightIToken = element.getRightIToken();
            else leftIToken = element.getLeftIToken();
        }

        public AbstractAstList(IToken leftIToken, IToken rightIToken, boolean leftRecursive)
        {
            super(leftIToken, rightIToken);
            this.leftRecursive = leftRecursive;
            list = new java.util.ArrayList();
        }

        public AbstractAstList(Ast element, boolean leftRecursive)
        {
            this(element.getLeftIToken(), element.getRightIToken(), leftRecursive);
            list.add(element);
        }

        /**
         * Make a copy of the list and return it. Note that we obtain the local list by
         * invoking getArrayList so as to make sure that the list we return is in proper order.
         */
        public java.util.ArrayList getAllChildren()
        {
            return (java.util.ArrayList) getArrayList().clone();
        }

    }

    static public class AstToken extends Ast implements IAstToken
    {
        public AstToken(IToken token) { super(token); }
        public IToken getIToken() { return leftIToken; }
        public String toString() { return leftIToken.toString(); }

        /**
         * A token class has no children. So, we return the empty list.
         */
        public java.util.ArrayList getAllChildren() { return new java.util.ArrayList(); }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AstToken)) return false;
            AstToken other = (AstToken) o;
            return getIToken().getILexStream() == other.getIToken().getILexStream() &&
                   getIToken().getTokenIndex() == other.getIToken().getTokenIndex();
        }

        public int hashCode()
        {
            int hash = 7;
            if (getIToken().getILexStream() != null) hash = hash * 31 + getIToken().getILexStream().hashCode();
            hash = hash * 31 + getIToken().getTokenIndex();
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>ResultType
     *<li>VariableModifier
     *<li>MethodBody
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>Commaopt
     *<li>Ellipsisopt
     *<li>LPGUserAction__BeginAction_BlockStatementsopt_EndAction
     *<li>LPGUserAction__BeginJava_BlockStatementsopt_EndJava
     *<li>LPGUserAction__NoAction
     *<li>LPGUserAction__NullAction
     *<li>LPGUserAction__BadAction
     *<li>IntegralType__byte
     *<li>IntegralType__short
     *<li>IntegralType__int
     *<li>IntegralType__long
     *<li>IntegralType__char
     *<li>FloatingPointType__float
     *<li>FloatingPointType__double
     *<li>ClassModifier__public
     *<li>ClassModifier__protected
     *<li>ClassModifier__private
     *<li>ClassModifier__abstract
     *<li>ClassModifier__static
     *<li>ClassModifier__final
     *<li>ClassModifier__strictfp
     *<li>FieldModifier__public
     *<li>FieldModifier__protected
     *<li>FieldModifier__private
     *<li>FieldModifier__static
     *<li>FieldModifier__final
     *<li>FieldModifier__transient
     *<li>FieldModifier__volatile
     *<li>MethodModifier__public
     *<li>MethodModifier__protected
     *<li>MethodModifier__private
     *<li>MethodModifier__abstract
     *<li>MethodModifier__static
     *<li>MethodModifier__final
     *<li>MethodModifier__synchronized
     *<li>MethodModifier__native
     *<li>MethodModifier__strictfp
     *<li>ConstructorModifier__public
     *<li>ConstructorModifier__protected
     *<li>ConstructorModifier__private
     *<li>InterfaceModifier__public
     *<li>InterfaceModifier__protected
     *<li>InterfaceModifier__private
     *<li>InterfaceModifier__abstract
     *<li>InterfaceModifier__static
     *<li>InterfaceModifier__strictfp
     *<li>ConstantModifier__public
     *<li>ConstantModifier__static
     *<li>ConstantModifier__final
     *<li>AbstractMethodModifier__public
     *<li>AbstractMethodModifier__abstract
     *<li>AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON
     *<li>AnnotationTypeElementDeclaration__SEMICOLON
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>AssignmentOperator__EQUAL
     *<li>AssignmentOperator__MULTIPLY_EQUAL
     *<li>AssignmentOperator__DIVIDE_EQUAL
     *<li>AssignmentOperator__REMAINDER_EQUAL
     *<li>AssignmentOperator__PLUS_EQUAL
     *<li>AssignmentOperator__MINUS_EQUAL
     *<li>AssignmentOperator__LEFT_SHIFT_EQUAL
     *<li>AssignmentOperator__GREATER_GREATER_EQUAL
     *<li>AssignmentOperator__GREATER_GREATER_GREATER_EQUAL
     *<li>AssignmentOperator__AND_EQUAL
     *<li>AssignmentOperator__XOR_EQUAL
     *<li>AssignmentOperator__OR_EQUAL
     *</ul>
     *</b>
     */
    public interface IAstToken
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>Commaopt</b>
     */
    public interface ICommaopt extends IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>Ellipsisopt</b>
     */
    public interface IEllipsisopt extends IAstToken {}

    /**
     * is implemented by <b>CompilationUnit</b>
     */
    public interface ICompilationUnit
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassBodyDeclarations
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IClassBodyDeclarationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>LPGUserAction__BeginAction_BlockStatementsopt_EndAction
     *<li>LPGUserAction__BeginJava_BlockStatementsopt_EndJava
     *<li>LPGUserAction__NoAction
     *<li>LPGUserAction__NullAction
     *<li>LPGUserAction__BadAction
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface ILPGUserAction extends IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface Iidentifier extends IAstToken, ITypeName, ITypeVariable, IPackageName, IExpressionName, IMethodName, IPackageOrTypeName, IAmbiguousName, IVariableDeclaratorId, ISimpleTypeName, ISimpleName, IEnumConstant, Iidentifieropt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface IBlockStatementsopt extends ILPGUserAction {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>IntegralType__byte
     *<li>IntegralType__short
     *<li>IntegralType__int
     *<li>IntegralType__long
     *<li>IntegralType__char
     *<li>FloatingPointType__float
     *<li>FloatingPointType__double
     *</ul>
     *</b>
     */
    public interface IType extends IResultType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>PrimitiveType
     *<li>IntegralType__byte
     *<li>IntegralType__short
     *<li>IntegralType__int
     *<li>IntegralType__long
     *<li>IntegralType__char
     *<li>FloatingPointType__float
     *<li>FloatingPointType__double
     *</ul>
     *</b>
     */
    public interface IPrimitiveType extends IType, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *</ul>
     *</b>
     */
    public interface IReferenceType extends IType, IActualTypeArgument {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>IntegralType__byte
     *<li>IntegralType__short
     *<li>IntegralType__int
     *<li>IntegralType__long
     *<li>IntegralType__char
     *<li>FloatingPointType__float
     *<li>FloatingPointType__double
     *</ul>
     *</b>
     */
    public interface INumericType extends IPrimitiveType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>IntegralType__byte
     *<li>IntegralType__short
     *<li>IntegralType__int
     *<li>IntegralType__long
     *<li>IntegralType__char
     *</ul>
     *</b>
     */
    public interface IIntegralType extends INumericType, IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>FloatingPointType__float
     *<li>FloatingPointType__double
     *</ul>
     *</b>
     */
    public interface IFloatingPointType extends INumericType, IAstToken {}

    /**
     * is implemented by <b>ClassType</b>
     */
    public interface IClassOrInterfaceType extends IReferenceType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface ITypeVariable extends IReferenceType, IExceptionType {}

    /**
     * is implemented by <b>ArrayType</b>
     */
    public interface IArrayType extends IReferenceType {}

    /**
     * is implemented by <b>ClassType</b>
     */
    public interface IClassType extends IClassOrInterfaceType, IExceptionType {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>TypeName
     *</ul>
     *</b>
     */
    public interface ITypeName extends IClassName {}

    /**
     * is implemented by <b>TypeArguments</b>
     */
    public interface ITypeArgumentsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>InterfaceType</b>
     */
    public interface IInterfaceType extends IInterfaceTypeList {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>TypeName
     *</ul>
     *</b>
     */
    public interface IClassName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>TypeParameter</b>
     */
    public interface ITypeParameter extends ITypeParameterList {}

    /**
     * is implemented by <b>TypeBound</b>
     */
    public interface ITypeBoundopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>TypeBound</b>
     */
    public interface ITypeBound extends ITypeBoundopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AdditionalBoundList
     *<li>AdditionalBound
     *</ul>
     *</b>
     */
    public interface IAdditionalBoundListopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AdditionalBoundList
     *<li>AdditionalBound
     *</ul>
     *</b>
     */
    public interface IAdditionalBoundList extends IAdditionalBoundListopt {}

    /**
     * is implemented by <b>AdditionalBound</b>
     */
    public interface IAdditionalBound extends IAdditionalBoundList {}

    /**
     * is implemented by <b>TypeArguments</b>
     */
    public interface ITypeArguments extends ITypeArgumentsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *<li>ActualTypeArgumentList
     *<li>Wildcard
     *</ul>
     *</b>
     */
    public interface IActualTypeArgumentList
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *<li>Wildcard
     *</ul>
     *</b>
     */
    public interface IActualTypeArgument extends IActualTypeArgumentList {}

    /**
     * is implemented by <b>Wildcard</b>
     */
    public interface IWildcard extends IActualTypeArgument {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>WildcardBounds__extends_ReferenceType
     *<li>WildcardBounds__super_ReferenceType
     *</ul>
     *</b>
     */
    public interface IWildcardBoundsOpt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>WildcardBounds__extends_ReferenceType
     *<li>WildcardBounds__super_ReferenceType
     *</ul>
     *</b>
     */
    public interface IWildcardBounds extends IWildcardBoundsOpt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PackageName
     *</ul>
     *</b>
     */
    public interface IPackageName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *</ul>
     *</b>
     */
    public interface IExpressionName extends IPostfixExpression, ILeftHandSide {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>AmbiguousName
     *</ul>
     *</b>
     */
    public interface IAmbiguousName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>MethodName
     *</ul>
     *</b>
     */
    public interface IMethodName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PackageOrTypeName
     *</ul>
     *</b>
     */
    public interface IPackageOrTypeName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>PackageDeclaration</b>
     */
    public interface IPackageDeclarationopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ImportDeclarations
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    public interface IImportDeclarationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclarations
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface ITypeDeclarationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ImportDeclarations
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    public interface IImportDeclarations extends IImportDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    public interface IImportDeclaration extends IImportDeclarations {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclarations
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface ITypeDeclarations extends ITypeDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface ITypeDeclaration extends ITypeDeclarations, IAstToken {}

    /**
     * is implemented by <b>PackageDeclaration</b>
     */
    public interface IPackageDeclaration extends IPackageDeclarationopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IAnnotationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>SingleTypeImportDeclaration</b>
     */
    public interface ISingleTypeImportDeclaration extends IImportDeclaration {}

    /**
     * is implemented by <b>TypeImportOnDemandDeclaration</b>
     */
    public interface ITypeImportOnDemandDeclaration extends IImportDeclaration {}

    /**
     * is implemented by <b>SingleStaticImportDeclaration</b>
     */
    public interface ISingleStaticImportDeclaration extends IImportDeclaration {}

    /**
     * is implemented by <b>StaticImportOnDemandDeclaration</b>
     */
    public interface IStaticImportOnDemandDeclaration extends IImportDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *</ul>
     *</b>
     */
    public interface IClassDeclaration extends ITypeDeclaration, IClassMemberDeclaration, IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration, IBlockStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceDeclaration extends ITypeDeclaration, IClassMemberDeclaration, IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by <b>NormalClassDeclaration</b>
     */
    public interface INormalClassDeclaration extends IClassDeclaration {}

    /**
     * is implemented by <b>EnumDeclaration</b>
     */
    public interface IEnumDeclaration extends IClassDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier__public
     *<li>ClassModifier__protected
     *<li>ClassModifier__private
     *<li>ClassModifier__abstract
     *<li>ClassModifier__static
     *<li>ClassModifier__final
     *<li>ClassModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IClassModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>TypeParameters</b>
     */
    public interface ITypeParametersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>Super</b>
     */
    public interface ISuperopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>Interfaces</b>
     */
    public interface IInterfacesopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>ClassBody</b>
     */
    public interface IClassBody extends IClassBodyopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier__public
     *<li>ClassModifier__protected
     *<li>ClassModifier__private
     *<li>ClassModifier__abstract
     *<li>ClassModifier__static
     *<li>ClassModifier__final
     *<li>ClassModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IClassModifiers extends IClassModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier__public
     *<li>ClassModifier__protected
     *<li>ClassModifier__private
     *<li>ClassModifier__abstract
     *<li>ClassModifier__static
     *<li>ClassModifier__final
     *<li>ClassModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IClassModifier extends IClassModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IAnnotation extends IClassModifier, IFieldModifier, IInterfaceModifier, IConstantModifier, IAnnotations, IElementValue {}

    /**
     * is implemented by <b>TypeParameters</b>
     */
    public interface ITypeParameters extends ITypeParametersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeParameter
     *<li>TypeParameterList
     *</ul>
     *</b>
     */
    public interface ITypeParameterList
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>Super</b>
     */
    public interface ISuper extends ISuperopt {}

    /**
     * is implemented by <b>Interfaces</b>
     */
    public interface IInterfaces extends IInterfacesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceType
     *<li>InterfaceTypeList
     *</ul>
     *</b>
     */
    public interface IInterfaceTypeList
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassBodyDeclarations
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IClassBodyDeclarations extends IClassBodyDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IClassBodyDeclaration extends IClassBodyDeclarations {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IClassMemberDeclaration extends IClassBodyDeclaration, IAstToken {}

    /**
     * is implemented by <b>Block</b>
     */
    public interface IInstanceInitializer extends IClassBodyDeclaration {}

    /**
     * is implemented by <b>StaticInitializer</b>
     */
    public interface IStaticInitializer extends IClassBodyDeclaration {}

    /**
     * is implemented by <b>ConstructorDeclaration</b>
     */
    public interface IConstructorDeclaration extends IClassBodyDeclaration {}

    /**
     * is implemented by <b>FieldDeclaration</b>
     */
    public interface IFieldDeclaration extends IClassMemberDeclaration {}

    /**
     * is implemented by <b>MethodDeclaration</b>
     */
    public interface IMethodDeclaration extends IClassMemberDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier__public
     *<li>FieldModifier__protected
     *<li>FieldModifier__private
     *<li>FieldModifier__static
     *<li>FieldModifier__final
     *<li>FieldModifier__transient
     *<li>FieldModifier__volatile
     *</ul>
     *</b>
     */
    public interface IFieldModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclarators
     *<li>VariableDeclarator
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    public interface IVariableDeclarators
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclarator
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    public interface IVariableDeclarator extends IVariableDeclarators {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    public interface IVariableDeclaratorId extends IVariableDeclarator {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IVariableInitializer extends IVariableInitializers {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IExpression extends IVariableInitializer, IArgumentList, IConstantExpression, IExpressionopt {}

    /**
     * is implemented by <b>ArrayInitializer</b>
     */
    public interface IArrayInitializer extends IVariableInitializer {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier__public
     *<li>FieldModifier__protected
     *<li>FieldModifier__private
     *<li>FieldModifier__static
     *<li>FieldModifier__final
     *<li>FieldModifier__transient
     *<li>FieldModifier__volatile
     *</ul>
     *</b>
     */
    public interface IFieldModifiers extends IFieldModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier__public
     *<li>FieldModifier__protected
     *<li>FieldModifier__private
     *<li>FieldModifier__static
     *<li>FieldModifier__final
     *<li>FieldModifier__transient
     *<li>FieldModifier__volatile
     *</ul>
     *</b>
     */
    public interface IFieldModifier extends IFieldModifiers, IAstToken {}

    /**
     * is implemented by <b>MethodHeader</b>
     */
    public interface IMethodHeader
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodBody
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IMethodBody extends IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier__public
     *<li>MethodModifier__protected
     *<li>MethodModifier__private
     *<li>MethodModifier__abstract
     *<li>MethodModifier__static
     *<li>MethodModifier__final
     *<li>MethodModifier__synchronized
     *<li>MethodModifier__native
     *<li>MethodModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IMethodModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>ResultType
     *<li>IntegralType__byte
     *<li>IntegralType__short
     *<li>IntegralType__int
     *<li>IntegralType__long
     *<li>IntegralType__char
     *<li>FloatingPointType__float
     *<li>FloatingPointType__double
     *</ul>
     *</b>
     */
    public interface IResultType extends IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN
     *<li>MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET
     *</ul>
     *</b>
     */
    public interface IMethodDeclarator
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>Throws</b>
     */
    public interface IThrowsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameterList
     *<li>LastFormalParameter
     *</ul>
     *</b>
     */
    public interface IFormalParameterListopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameterList
     *<li>LastFormalParameter
     *</ul>
     *</b>
     */
    public interface IFormalParameterList extends IFormalParameterListopt {}

    /**
     * is implemented by <b>LastFormalParameter</b>
     */
    public interface ILastFormalParameter extends IFormalParameterList {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameters
     *<li>FormalParameter
     *</ul>
     *</b>
     */
    public interface IFormalParameters
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>FormalParameter</b>
     */
    public interface IFormalParameter extends IFormalParameters {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifiers
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IVariableModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifiers
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IVariableModifiers extends IVariableModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IVariableModifier extends IVariableModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IAnnotations extends IVariableModifier, IMethodModifier, IConstructorModifier, IAbstractMethodModifier, IAnnotationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier__public
     *<li>MethodModifier__protected
     *<li>MethodModifier__private
     *<li>MethodModifier__abstract
     *<li>MethodModifier__static
     *<li>MethodModifier__final
     *<li>MethodModifier__synchronized
     *<li>MethodModifier__native
     *<li>MethodModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IMethodModifiers extends IMethodModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier__public
     *<li>MethodModifier__protected
     *<li>MethodModifier__private
     *<li>MethodModifier__abstract
     *<li>MethodModifier__static
     *<li>MethodModifier__final
     *<li>MethodModifier__synchronized
     *<li>MethodModifier__native
     *<li>MethodModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IMethodModifier extends IMethodModifiers, IAstToken {}

    /**
     * is implemented by <b>Throws</b>
     */
    public interface IThrows extends IThrowsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ExceptionTypeList
     *</ul>
     *</b>
     */
    public interface IExceptionTypeList
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *</ul>
     *</b>
     */
    public interface IExceptionType extends IExceptionTypeList {}

    /**
     * is implemented by <b>Block</b>
     */
    public interface IBlock extends IMethodBody, IInstanceInitializer, IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstructorModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier__public
     *<li>ConstructorModifier__protected
     *<li>ConstructorModifier__private
     *</ul>
     *</b>
     */
    public interface IConstructorModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>ConstructorDeclarator</b>
     */
    public interface IConstructorDeclarator
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>ConstructorBody</b>
     */
    public interface IConstructorBody
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface ISimpleTypeName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstructorModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier__public
     *<li>ConstructorModifier__protected
     *<li>ConstructorModifier__private
     *</ul>
     *</b>
     */
    public interface IConstructorModifiers extends IConstructorModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier__public
     *<li>ConstructorModifier__protected
     *<li>ConstructorModifier__private
     *</ul>
     *</b>
     */
    public interface IConstructorModifier extends IConstructorModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON
     *<li>ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON
     *<li>ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON
     *</ul>
     *</b>
     */
    public interface IExplicitConstructorInvocationopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON
     *<li>ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON
     *<li>ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON
     *</ul>
     *</b>
     */
    public interface IExplicitConstructorInvocation extends IExplicitConstructorInvocationopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArgumentList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IArgumentListopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *</ul>
     *</b>
     */
    public interface IPrimary extends IPostfixExpression {}

    /**
     * is implemented by <b>EnumBody</b>
     */
    public interface IEnumBody
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstants
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    public interface IEnumConstantsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>EnumBodyDeclarations</b>
     */
    public interface IEnumBodyDeclarationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstants
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    public interface IEnumConstants extends IEnumConstantsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    public interface IEnumConstant extends IEnumConstants {}

    /**
     * is implemented by <b>Arguments</b>
     */
    public interface IArgumentsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>ClassBody</b>
     */
    public interface IClassBodyopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>Arguments</b>
     */
    public interface IArguments extends IArgumentsopt {}

    /**
     * is implemented by <b>EnumBodyDeclarations</b>
     */
    public interface IEnumBodyDeclarations extends IEnumBodyDeclarationsopt {}

    /**
     * is implemented by <b>NormalInterfaceDeclaration</b>
     */
    public interface INormalInterfaceDeclaration extends IInterfaceDeclaration {}

    /**
     * is implemented by <b>AnnotationTypeDeclaration</b>
     */
    public interface IAnnotationTypeDeclaration extends IInterfaceDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier__public
     *<li>InterfaceModifier__protected
     *<li>InterfaceModifier__private
     *<li>InterfaceModifier__abstract
     *<li>InterfaceModifier__static
     *<li>InterfaceModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IInterfaceModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExtendsInterfaces__extends_InterfaceType
     *<li>ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType
     *</ul>
     *</b>
     */
    public interface IExtendsInterfacesopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>InterfaceBody</b>
     */
    public interface IInterfaceBody
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier__public
     *<li>InterfaceModifier__protected
     *<li>InterfaceModifier__private
     *<li>InterfaceModifier__abstract
     *<li>InterfaceModifier__static
     *<li>InterfaceModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IInterfaceModifiers extends IInterfaceModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier__public
     *<li>InterfaceModifier__protected
     *<li>InterfaceModifier__private
     *<li>InterfaceModifier__abstract
     *<li>InterfaceModifier__static
     *<li>InterfaceModifier__strictfp
     *</ul>
     *</b>
     */
    public interface IInterfaceModifier extends IInterfaceModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExtendsInterfaces__extends_InterfaceType
     *<li>ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType
     *</ul>
     *</b>
     */
    public interface IExtendsInterfaces extends IExtendsInterfacesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclarations
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceMemberDeclarationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclarations
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceMemberDeclarations extends IInterfaceMemberDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceMemberDeclaration extends IInterfaceMemberDeclarations, IAstToken {}

    /**
     * is implemented by <b>ConstantDeclaration</b>
     */
    public interface IConstantDeclaration extends IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by <b>AbstractMethodDeclaration</b>
     */
    public interface IAbstractMethodDeclaration extends IInterfaceMemberDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstantModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier__public
     *<li>ConstantModifier__static
     *<li>ConstantModifier__final
     *</ul>
     *</b>
     */
    public interface IConstantModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstantModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier__public
     *<li>ConstantModifier__static
     *<li>ConstantModifier__final
     *</ul>
     *</b>
     */
    public interface IConstantModifiers extends IConstantModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier__public
     *<li>ConstantModifier__static
     *<li>ConstantModifier__final
     *</ul>
     *</b>
     */
    public interface IConstantModifier extends IConstantModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AbstractMethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier__public
     *<li>AbstractMethodModifier__abstract
     *</ul>
     *</b>
     */
    public interface IAbstractMethodModifiersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AbstractMethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier__public
     *<li>AbstractMethodModifier__abstract
     *</ul>
     *</b>
     */
    public interface IAbstractMethodModifiers extends IAbstractMethodModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier__public
     *<li>AbstractMethodModifier__abstract
     *</ul>
     *</b>
     */
    public interface IAbstractMethodModifier extends IAbstractMethodModifiers, IAstToken {}

    /**
     * is implemented by <b>AnnotationTypeBody</b>
     */
    public interface IAnnotationTypeBody
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclarations
     *<li>AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON
     *<li>AnnotationTypeElementDeclaration__SEMICOLON
     *</ul>
     *</b>
     */
    public interface IAnnotationTypeElementDeclarationsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclarations
     *<li>AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON
     *<li>AnnotationTypeElementDeclaration__SEMICOLON
     *</ul>
     *</b>
     */
    public interface IAnnotationTypeElementDeclarations extends IAnnotationTypeElementDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON
     *<li>AnnotationTypeElementDeclaration__SEMICOLON
     *</ul>
     *</b>
     */
    public interface IAnnotationTypeElementDeclaration extends IAnnotationTypeElementDeclarations, IAstToken {}

    /**
     * is implemented by <b>DefaultValue</b>
     */
    public interface IDefaultValueopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>DefaultValue</b>
     */
    public interface IDefaultValue extends IDefaultValueopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IElementValue extends IElementValues {}

    /**
     * is implemented by <b>NormalAnnotation</b>
     */
    public interface INormalAnnotation extends IAnnotation {}

    /**
     * is implemented by <b>MarkerAnnotation</b>
     */
    public interface IMarkerAnnotation extends IAnnotation {}

    /**
     * is implemented by <b>SingleElementAnnotation</b>
     */
    public interface ISingleElementAnnotation extends IAnnotation {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ElementValuePairs
     *<li>ElementValuePair
     *</ul>
     *</b>
     */
    public interface IElementValuePairsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ElementValuePairs
     *<li>ElementValuePair
     *</ul>
     *</b>
     */
    public interface IElementValuePairs extends IElementValuePairsopt {}

    /**
     * is implemented by <b>ElementValuePair</b>
     */
    public interface IElementValuePair extends IElementValuePairs {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface ISimpleName
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IConditionalExpression extends IElementValue, IAssignmentExpression {}

    /**
     * is implemented by <b>ElementValueArrayInitializer</b>
     */
    public interface IElementValueArrayInitializer extends IElementValue {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>ElementValues
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IElementValuesopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>ElementValues
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IElementValues extends IElementValuesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>VariableInitializers
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IVariableInitializersopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>VariableInitializers
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IVariableInitializers extends IVariableInitializersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface IBlockStatements extends IBlockStatementsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface IBlockStatement extends IBlockStatements {}

    /**
     * is implemented by <b>LocalVariableDeclarationStatement</b>
     */
    public interface ILocalVariableDeclarationStatement extends IBlockStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface IStatement extends IBlockStatement {}

    /**
     * is implemented by <b>LocalVariableDeclaration</b>
     */
    public interface ILocalVariableDeclaration extends IForInit {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>EmptyStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>DoStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface IStatementWithoutTrailingSubstatement extends IStatement, IStatementNoShortIf {}

    /**
     * is implemented by <b>LabeledStatement</b>
     */
    public interface ILabeledStatement extends IStatement {}

    /**
     * is implemented by <b>IfThenStatement</b>
     */
    public interface IIfThenStatement extends IStatement {}

    /**
     * is implemented by <b>IfThenElseStatement</b>
     */
    public interface IIfThenElseStatement extends IStatement {}

    /**
     * is implemented by <b>WhileStatement</b>
     */
    public interface IWhileStatement extends IStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *</ul>
     *</b>
     */
    public interface IForStatement extends IStatement {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>EmptyStatement</b>
     */
    public interface IEmptyStatement extends IStatementWithoutTrailingSubstatement, IAstToken {}

    /**
     * is implemented by <b>ExpressionStatement</b>
     */
    public interface IExpressionStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *</ul>
     *</b>
     */
    public interface IAssertStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>SwitchStatement</b>
     */
    public interface ISwitchStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>DoStatement</b>
     */
    public interface IDoStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>BreakStatement</b>
     */
    public interface IBreakStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ContinueStatement</b>
     */
    public interface IContinueStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ReturnStatement</b>
     */
    public interface IReturnStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>SynchronizedStatement</b>
     */
    public interface ISynchronizedStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ThrowStatement</b>
     */
    public interface IThrowStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface ITryStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>IfThenElseStatementNoShortIf
     *<li>EmptyStatement
     *<li>LabeledStatementNoShortIf
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatementNoShortIf
     *<li>DoStatement
     *<li>ForStatementNoShortIf
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement__assert_Expression_SEMICOLON
     *<li>AssertStatement__assert_Expression_COLON_Expression_SEMICOLON
     *<li>TryStatement__try_Block_Catches
     *<li>TryStatement__try_Block_Catchesopt_Finally
     *</ul>
     *</b>
     */
    public interface IStatementNoShortIf
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>LabeledStatementNoShortIf</b>
     */
    public interface ILabeledStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by <b>IfThenElseStatementNoShortIf</b>
     */
    public interface IIfThenElseStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by <b>WhileStatementNoShortIf</b>
     */
    public interface IWhileStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by <b>ForStatementNoShortIf</b>
     */
    public interface IForStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IStatementExpression extends IStatementExpressionList {}

    /**
     * is implemented by <b>Assignment</b>
     */
    public interface IAssignment extends IStatementExpression, IAssignmentExpression {}

    /**
     * is implemented by <b>PreIncrementExpression</b>
     */
    public interface IPreIncrementExpression extends IStatementExpression, IUnaryExpression {}

    /**
     * is implemented by <b>PreDecrementExpression</b>
     */
    public interface IPreDecrementExpression extends IStatementExpression, IUnaryExpression {}

    /**
     * is implemented by <b>PostIncrementExpression</b>
     */
    public interface IPostIncrementExpression extends IStatementExpression, IPostfixExpression {}

    /**
     * is implemented by <b>PostDecrementExpression</b>
     */
    public interface IPostDecrementExpression extends IStatementExpression, IPostfixExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IMethodInvocation extends IStatementExpression, IPrimaryNoNewArray {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *</ul>
     *</b>
     */
    public interface IClassInstanceCreationExpression extends IStatementExpression, IPrimaryNoNewArray {}

    /**
     * is implemented by <b>SwitchBlock</b>
     */
    public interface ISwitchBlock
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchBlockStatementGroups
     *<li>SwitchBlockStatementGroup
     *</ul>
     *</b>
     */
    public interface ISwitchBlockStatementGroupsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabels
     *<li>SwitchLabel__case_ConstantExpression_COLON
     *<li>SwitchLabel__case_EnumConstant_COLON
     *<li>SwitchLabel__default_COLON
     *</ul>
     *</b>
     */
    public interface ISwitchLabelsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchBlockStatementGroups
     *<li>SwitchBlockStatementGroup
     *</ul>
     *</b>
     */
    public interface ISwitchBlockStatementGroups extends ISwitchBlockStatementGroupsopt {}

    /**
     * is implemented by <b>SwitchBlockStatementGroup</b>
     */
    public interface ISwitchBlockStatementGroup extends ISwitchBlockStatementGroups {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabels
     *<li>SwitchLabel__case_ConstantExpression_COLON
     *<li>SwitchLabel__case_EnumConstant_COLON
     *<li>SwitchLabel__default_COLON
     *</ul>
     *</b>
     */
    public interface ISwitchLabels extends ISwitchLabelsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabel__case_ConstantExpression_COLON
     *<li>SwitchLabel__case_EnumConstant_COLON
     *<li>SwitchLabel__default_COLON
     *</ul>
     *</b>
     */
    public interface ISwitchLabel extends ISwitchLabels {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IConstantExpression
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>BasicForStatement</b>
     */
    public interface IBasicForStatement extends IForStatement {}

    /**
     * is implemented by <b>EnhancedForStatement</b>
     */
    public interface IEnhancedForStatement extends IForStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>LocalVariableDeclaration
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IForInitopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IExpressionopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IForUpdateopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>LocalVariableDeclaration
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IForInit extends IForInitopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IStatementExpressionList extends IForInit, IForUpdate {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *</ul>
     *</b>
     */
    public interface IForUpdate extends IForUpdateopt {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface Iidentifieropt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Catches
     *<li>CatchClause
     *</ul>
     *</b>
     */
    public interface ICatches extends ICatchesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Catches
     *<li>CatchClause
     *</ul>
     *</b>
     */
    public interface ICatchesopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>Finally</b>
     */
    public interface IFinally
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by <b>CatchClause</b>
     */
    public interface ICatchClause extends ICatches {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *</ul>
     *</b>
     */
    public interface IPrimaryNoNewArray extends IPrimary, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *</ul>
     *</b>
     */
    public interface IArrayCreationExpression extends IPrimary {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *</ul>
     *</b>
     */
    public interface ILiteral extends IPrimaryNoNewArray, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *</ul>
     *</b>
     */
    public interface IFieldAccess extends IPrimaryNoNewArray, ILeftHandSide {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *</ul>
     *</b>
     */
    public interface IArrayAccess extends IPrimaryNoNewArray, ILeftHandSide {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *</ul>
     *</b>
     */
    public interface IBooleanLiteral extends ILiteral, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArgumentList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IArgumentList extends IArgumentListopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>DimExprs
     *<li>DimExpr
     *</ul>
     *</b>
     */
    public interface IDimExprs
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Dims__LBRACKET_RBRACKET
     *<li>Dims__Dims_LBRACKET_RBRACKET
     *</ul>
     *</b>
     */
    public interface IDimsopt
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Dims__LBRACKET_RBRACKET
     *<li>Dims__Dims_LBRACKET_RBRACKET
     *</ul>
     *</b>
     */
    public interface IDims extends IDimsopt {}

    /**
     * is implemented by <b>DimExpr</b>
     */
    public interface IDimExpr extends IDimExprs {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *</ul>
     *</b>
     */
    public interface IPostfixExpression extends IUnaryExpressionNotPlusMinus {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *</ul>
     *</b>
     */
    public interface IUnaryExpression extends IMultiplicativeExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *</ul>
     *</b>
     */
    public interface IUnaryExpressionNotPlusMinus extends IUnaryExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *</ul>
     *</b>
     */
    public interface ICastExpression extends IUnaryExpressionNotPlusMinus {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *</ul>
     *</b>
     */
    public interface IMultiplicativeExpression extends IAdditiveExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *</ul>
     *</b>
     */
    public interface IAdditiveExpression extends IShiftExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *</ul>
     *</b>
     */
    public interface IShiftExpression extends IRelationalExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *</ul>
     *</b>
     */
    public interface IRelationalExpression extends IEqualityExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IEqualityExpression extends IAndExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IAndExpression extends IExclusiveOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IExclusiveOrExpression extends IInclusiveOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IInclusiveOrExpression extends IConditionalAndExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IConditionalAndExpression extends IConditionalOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IConditionalOrExpression extends IConditionalExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray__Type_DOT_class
     *<li>PrimaryNoNewArray__void_DOT_class
     *<li>PrimaryNoNewArray__this
     *<li>PrimaryNoNewArray__ClassName_DOT_this
     *<li>PrimaryNoNewArray__LPAREN_Expression_RPAREN
     *<li>Literal__IntegerLiteral
     *<li>Literal__LongLiteral
     *<li>Literal__FloatingPointLiteral
     *<li>Literal__DoubleLiteral
     *<li>Literal__CharacterLiteral
     *<li>Literal__StringLiteral
     *<li>Literal__null
     *<li>BooleanLiteral__true
     *<li>BooleanLiteral__false
     *<li>ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt
     *<li>ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt
     *<li>ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer
     *<li>ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *<li>UnaryExpression__PLUS_UnaryExpression
     *<li>UnaryExpression__MINUS_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression
     *<li>UnaryExpressionNotPlusMinus__NOT_UnaryExpression
     *<li>CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression
     *<li>CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus
     *<li>MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression
     *<li>MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression
     *<li>AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression
     *<li>AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression
     *<li>ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression
     *<li>ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression
     *<li>RelationalExpression__RelationalExpression_LESS_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression
     *<li>RelationalExpression__RelationalExpression_instanceof_ReferenceType
     *<li>EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression
     *<li>EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression
     *</ul>
     *</b>
     */
    public interface IAssignmentExpression extends IExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>FieldAccess__Primary_DOT_identifier
     *<li>FieldAccess__super_DOT_identifier
     *<li>FieldAccess__ClassName_DOT_super_DOT_identifier
     *<li>ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET
     *<li>ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET
     *</ul>
     *</b>
     */
    public interface ILeftHandSide
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(IAstVisitor v);
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AssignmentOperator__EQUAL
     *<li>AssignmentOperator__MULTIPLY_EQUAL
     *<li>AssignmentOperator__DIVIDE_EQUAL
     *<li>AssignmentOperator__REMAINDER_EQUAL
     *<li>AssignmentOperator__PLUS_EQUAL
     *<li>AssignmentOperator__MINUS_EQUAL
     *<li>AssignmentOperator__LEFT_SHIFT_EQUAL
     *<li>AssignmentOperator__GREATER_GREATER_EQUAL
     *<li>AssignmentOperator__GREATER_GREATER_GREATER_EQUAL
     *<li>AssignmentOperator__AND_EQUAL
     *<li>AssignmentOperator__XOR_EQUAL
     *<li>AssignmentOperator__OR_EQUAL
     *</ul>
     *</b>
     */
    public interface IAssignmentOperator extends IAstToken {}

    /**
     *<b>
     *<li>Rule 3:  identifier ::= IDENTIFIER
     *</b>
     */
    static public class identifier extends AstToken implements Iidentifier
    {
        private JavaParser environment;
        public JavaParser getEnvironment() { return environment; }

        public IToken getIDENTIFIER() { return leftIToken; }

        public identifier(JavaParser environment, IToken token)        {
            super(token);
            this.environment = environment;
            initialize();
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }

                void initialize()
                {
                    if (getIDENTIFIER().getKind() != JavaParserprs.TK_IDENTIFIER)
                        System.out.println("Turning keyword " + getIDENTIFIER().toString() + " into an identifier");
                }
        }

    /**
     *<em>
     *<li>Rule 12:  PrimitiveType ::= NumericType
     *</em>
     *<p>
     *<b>
     *<li>Rule 13:  PrimitiveType ::= boolean
     *</b>
     */
    static public class PrimitiveType extends AstToken implements IPrimitiveType
    {
        public IToken getboolean() { return leftIToken; }

        public PrimitiveType(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 27:  ClassType ::= TypeName TypeArgumentsopt
     *</b>
     */
    static public class ClassType extends Ast implements IClassType
    {
        private ITypeName _TypeName;
        private TypeArguments _TypeArgumentsopt;

        public ITypeName getTypeName() { return _TypeName; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }

        public ClassType(IToken leftIToken, IToken rightIToken,
                         ITypeName _TypeName,
                         TypeArguments _TypeArgumentsopt)
        {
            super(leftIToken, rightIToken);

            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeName);
            list.add(_TypeArgumentsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ClassType)) return false;
            if (! super.equals(o)) return false;
            ClassType other = (ClassType) o;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeName.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 28:  InterfaceType ::= TypeName TypeArgumentsopt
     *</b>
     */
    static public class InterfaceType extends Ast implements IInterfaceType
    {
        private ITypeName _TypeName;
        private TypeArguments _TypeArgumentsopt;

        public ITypeName getTypeName() { return _TypeName; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }

        public InterfaceType(IToken leftIToken, IToken rightIToken,
                             ITypeName _TypeName,
                             TypeArguments _TypeArgumentsopt)
        {
            super(leftIToken, rightIToken);

            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeName);
            list.add(_TypeArgumentsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof InterfaceType)) return false;
            if (! super.equals(o)) return false;
            InterfaceType other = (InterfaceType) o;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeName.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 29:  TypeName ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 30:  TypeName ::= TypeName . identifier
     *</b>
     */
    static public class TypeName extends Ast implements ITypeName
    {
        private ITypeName _TypeName;
        private AstToken _DOT;
        private identifier _identifier;

        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public TypeName(IToken leftIToken, IToken rightIToken,
                        ITypeName _TypeName,
                        AstToken _DOT,
                        identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeName);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeName)) return false;
            if (! super.equals(o)) return false;
            TypeName other = (TypeName) o;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 33:  ArrayType ::= Type [ ]
     *</b>
     */
    static public class ArrayType extends Ast implements IArrayType
    {
        private IType _Type;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IType getType() { return _Type; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public ArrayType(IToken leftIToken, IToken rightIToken,
                         IType _Type,
                         AstToken _LBRACKET,
                         AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Type);
            list.add(_LBRACKET);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayType)) return false;
            if (! super.equals(o)) return false;
            ArrayType other = (ArrayType) o;
            if (! _Type.equals(other._Type)) return false;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Type.accept(v);
                _LBRACKET.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 34:  TypeParameter ::= TypeVariable TypeBoundopt
     *</b>
     */
    static public class TypeParameter extends Ast implements ITypeParameter
    {
        private identifier _TypeVariable;
        private TypeBound _TypeBoundopt;

        public identifier getTypeVariable() { return _TypeVariable; }
        /**
         * The value returned by <b>getTypeBoundopt</b> may be <b>null</b>
         */
        public TypeBound getTypeBoundopt() { return _TypeBoundopt; }

        public TypeParameter(IToken leftIToken, IToken rightIToken,
                             identifier _TypeVariable,
                             TypeBound _TypeBoundopt)
        {
            super(leftIToken, rightIToken);

            this._TypeVariable = _TypeVariable;
            ((Ast) _TypeVariable).setParent(this);
            this._TypeBoundopt = _TypeBoundopt;
            if (_TypeBoundopt != null) ((Ast) _TypeBoundopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeVariable);
            list.add(_TypeBoundopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeParameter)) return false;
            if (! super.equals(o)) return false;
            TypeParameter other = (TypeParameter) o;
            if (! _TypeVariable.equals(other._TypeVariable)) return false;
            if (_TypeBoundopt == null)
                if (other._TypeBoundopt != null) return false;
                else; // continue
            else if (! _TypeBoundopt.equals(other._TypeBoundopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeVariable.hashCode());
            hash = hash * 31 + (_TypeBoundopt == null ? 0 : _TypeBoundopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeVariable.accept(v);
                if (_TypeBoundopt != null) _TypeBoundopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 35:  TypeBound ::= extends ClassOrInterfaceType AdditionalBoundListopt
     *</b>
     */
    static public class TypeBound extends Ast implements ITypeBound
    {
        private AstToken _extends;
        private ClassType _ClassOrInterfaceType;
        private IAdditionalBoundListopt _AdditionalBoundListopt;

        public AstToken getextends() { return _extends; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        /**
         * The value returned by <b>getAdditionalBoundListopt</b> may be <b>null</b>
         */
        public IAdditionalBoundListopt getAdditionalBoundListopt() { return _AdditionalBoundListopt; }

        public TypeBound(IToken leftIToken, IToken rightIToken,
                         AstToken _extends,
                         ClassType _ClassOrInterfaceType,
                         IAdditionalBoundListopt _AdditionalBoundListopt)
        {
            super(leftIToken, rightIToken);

            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._AdditionalBoundListopt = _AdditionalBoundListopt;
            if (_AdditionalBoundListopt != null) ((Ast) _AdditionalBoundListopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_extends);
            list.add(_ClassOrInterfaceType);
            list.add(_AdditionalBoundListopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeBound)) return false;
            if (! super.equals(o)) return false;
            TypeBound other = (TypeBound) o;
            if (! _extends.equals(other._extends)) return false;
            if (! _ClassOrInterfaceType.equals(other._ClassOrInterfaceType)) return false;
            if (_AdditionalBoundListopt == null)
                if (other._AdditionalBoundListopt != null) return false;
                else; // continue
            else if (! _AdditionalBoundListopt.equals(other._AdditionalBoundListopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_extends.hashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.hashCode());
            hash = hash * 31 + (_AdditionalBoundListopt == null ? 0 : _AdditionalBoundListopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _extends.accept(v);
                _ClassOrInterfaceType.accept(v);
                if (_AdditionalBoundListopt != null) _AdditionalBoundListopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 36:  AdditionalBoundList ::= AdditionalBound
     *</em>
     *<p>
     *<b>
     *<li>Rule 37:  AdditionalBoundList ::= AdditionalBoundList AdditionalBound
     *</b>
     */
    static public class AdditionalBoundList extends Ast implements IAdditionalBoundList
    {
        private IAdditionalBoundList _AdditionalBoundList;
        private AdditionalBound _AdditionalBound;

        public IAdditionalBoundList getAdditionalBoundList() { return _AdditionalBoundList; }
        public AdditionalBound getAdditionalBound() { return _AdditionalBound; }

        public AdditionalBoundList(IToken leftIToken, IToken rightIToken,
                                   IAdditionalBoundList _AdditionalBoundList,
                                   AdditionalBound _AdditionalBound)
        {
            super(leftIToken, rightIToken);

            this._AdditionalBoundList = _AdditionalBoundList;
            ((Ast) _AdditionalBoundList).setParent(this);
            this._AdditionalBound = _AdditionalBound;
            ((Ast) _AdditionalBound).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AdditionalBoundList);
            list.add(_AdditionalBound);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AdditionalBoundList)) return false;
            if (! super.equals(o)) return false;
            AdditionalBoundList other = (AdditionalBoundList) o;
            if (! _AdditionalBoundList.equals(other._AdditionalBoundList)) return false;
            if (! _AdditionalBound.equals(other._AdditionalBound)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AdditionalBoundList.hashCode());
            hash = hash * 31 + (_AdditionalBound.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AdditionalBoundList.accept(v);
                _AdditionalBound.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 38:  AdditionalBound ::= & InterfaceType
     *</b>
     */
    static public class AdditionalBound extends Ast implements IAdditionalBound
    {
        private AstToken _AND;
        private InterfaceType _InterfaceType;

        public AstToken getAND() { return _AND; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }

        public AdditionalBound(IToken leftIToken, IToken rightIToken,
                               AstToken _AND,
                               InterfaceType _InterfaceType)
        {
            super(leftIToken, rightIToken);

            this._AND = _AND;
            ((Ast) _AND).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AND);
            list.add(_InterfaceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AdditionalBound)) return false;
            if (! super.equals(o)) return false;
            AdditionalBound other = (AdditionalBound) o;
            if (! _AND.equals(other._AND)) return false;
            if (! _InterfaceType.equals(other._InterfaceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AND.hashCode());
            hash = hash * 31 + (_InterfaceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AND.accept(v);
                _InterfaceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 39:  TypeArguments ::= < ActualTypeArgumentList >
     *</b>
     */
    static public class TypeArguments extends Ast implements ITypeArguments
    {
        private AstToken _LESS;
        private IActualTypeArgumentList _ActualTypeArgumentList;
        private AstToken _GREATER;

        public AstToken getLESS() { return _LESS; }
        public IActualTypeArgumentList getActualTypeArgumentList() { return _ActualTypeArgumentList; }
        public AstToken getGREATER() { return _GREATER; }

        public TypeArguments(IToken leftIToken, IToken rightIToken,
                             AstToken _LESS,
                             IActualTypeArgumentList _ActualTypeArgumentList,
                             AstToken _GREATER)
        {
            super(leftIToken, rightIToken);

            this._LESS = _LESS;
            ((Ast) _LESS).setParent(this);
            this._ActualTypeArgumentList = _ActualTypeArgumentList;
            ((Ast) _ActualTypeArgumentList).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LESS);
            list.add(_ActualTypeArgumentList);
            list.add(_GREATER);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeArguments)) return false;
            if (! super.equals(o)) return false;
            TypeArguments other = (TypeArguments) o;
            if (! _LESS.equals(other._LESS)) return false;
            if (! _ActualTypeArgumentList.equals(other._ActualTypeArgumentList)) return false;
            if (! _GREATER.equals(other._GREATER)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LESS.hashCode());
            hash = hash * 31 + (_ActualTypeArgumentList.hashCode());
            hash = hash * 31 + (_GREATER.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LESS.accept(v);
                _ActualTypeArgumentList.accept(v);
                _GREATER.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 40:  ActualTypeArgumentList ::= ActualTypeArgument
     *</em>
     *<p>
     *<b>
     *<li>Rule 41:  ActualTypeArgumentList ::= ActualTypeArgumentList , ActualTypeArgument
     *</b>
     */
    static public class ActualTypeArgumentList extends Ast implements IActualTypeArgumentList
    {
        private IActualTypeArgumentList _ActualTypeArgumentList;
        private AstToken _COMMA;
        private IActualTypeArgument _ActualTypeArgument;

        public IActualTypeArgumentList getActualTypeArgumentList() { return _ActualTypeArgumentList; }
        public AstToken getCOMMA() { return _COMMA; }
        public IActualTypeArgument getActualTypeArgument() { return _ActualTypeArgument; }

        public ActualTypeArgumentList(IToken leftIToken, IToken rightIToken,
                                      IActualTypeArgumentList _ActualTypeArgumentList,
                                      AstToken _COMMA,
                                      IActualTypeArgument _ActualTypeArgument)
        {
            super(leftIToken, rightIToken);

            this._ActualTypeArgumentList = _ActualTypeArgumentList;
            ((Ast) _ActualTypeArgumentList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ActualTypeArgument = _ActualTypeArgument;
            ((Ast) _ActualTypeArgument).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ActualTypeArgumentList);
            list.add(_COMMA);
            list.add(_ActualTypeArgument);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ActualTypeArgumentList)) return false;
            if (! super.equals(o)) return false;
            ActualTypeArgumentList other = (ActualTypeArgumentList) o;
            if (! _ActualTypeArgumentList.equals(other._ActualTypeArgumentList)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _ActualTypeArgument.equals(other._ActualTypeArgument)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ActualTypeArgumentList.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_ActualTypeArgument.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ActualTypeArgumentList.accept(v);
                _COMMA.accept(v);
                _ActualTypeArgument.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 44:  Wildcard ::= ? WildcardBoundsOpt
     *</b>
     */
    static public class Wildcard extends Ast implements IWildcard
    {
        private AstToken _QUESTION;
        private IWildcardBoundsOpt _WildcardBoundsOpt;

        public AstToken getQUESTION() { return _QUESTION; }
        /**
         * The value returned by <b>getWildcardBoundsOpt</b> may be <b>null</b>
         */
        public IWildcardBoundsOpt getWildcardBoundsOpt() { return _WildcardBoundsOpt; }

        public Wildcard(IToken leftIToken, IToken rightIToken,
                        AstToken _QUESTION,
                        IWildcardBoundsOpt _WildcardBoundsOpt)
        {
            super(leftIToken, rightIToken);

            this._QUESTION = _QUESTION;
            ((Ast) _QUESTION).setParent(this);
            this._WildcardBoundsOpt = _WildcardBoundsOpt;
            if (_WildcardBoundsOpt != null) ((Ast) _WildcardBoundsOpt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_QUESTION);
            list.add(_WildcardBoundsOpt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Wildcard)) return false;
            if (! super.equals(o)) return false;
            Wildcard other = (Wildcard) o;
            if (! _QUESTION.equals(other._QUESTION)) return false;
            if (_WildcardBoundsOpt == null)
                if (other._WildcardBoundsOpt != null) return false;
                else; // continue
            else if (! _WildcardBoundsOpt.equals(other._WildcardBoundsOpt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_QUESTION.hashCode());
            hash = hash * 31 + (_WildcardBoundsOpt == null ? 0 : _WildcardBoundsOpt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _QUESTION.accept(v);
                if (_WildcardBoundsOpt != null) _WildcardBoundsOpt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 47:  PackageName ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 48:  PackageName ::= PackageName . identifier
     *</b>
     */
    static public class PackageName extends Ast implements IPackageName
    {
        private IPackageName _PackageName;
        private AstToken _DOT;
        private identifier _identifier;

        public IPackageName getPackageName() { return _PackageName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public PackageName(IToken leftIToken, IToken rightIToken,
                           IPackageName _PackageName,
                           AstToken _DOT,
                           identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._PackageName = _PackageName;
            ((Ast) _PackageName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PackageName);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PackageName)) return false;
            if (! super.equals(o)) return false;
            PackageName other = (PackageName) o;
            if (! _PackageName.equals(other._PackageName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PackageName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PackageName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 49:  ExpressionName ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 50:  ExpressionName ::= AmbiguousName . identifier
     *</b>
     */
    static public class ExpressionName extends Ast implements IExpressionName
    {
        private IAmbiguousName _AmbiguousName;
        private AstToken _DOT;
        private identifier _identifier;

        public IAmbiguousName getAmbiguousName() { return _AmbiguousName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public ExpressionName(IToken leftIToken, IToken rightIToken,
                              IAmbiguousName _AmbiguousName,
                              AstToken _DOT,
                              identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._AmbiguousName = _AmbiguousName;
            ((Ast) _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AmbiguousName);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExpressionName)) return false;
            if (! super.equals(o)) return false;
            ExpressionName other = (ExpressionName) o;
            if (! _AmbiguousName.equals(other._AmbiguousName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AmbiguousName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AmbiguousName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 51:  MethodName ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 52:  MethodName ::= AmbiguousName . identifier
     *</b>
     */
    static public class MethodName extends Ast implements IMethodName
    {
        private IAmbiguousName _AmbiguousName;
        private AstToken _DOT;
        private identifier _identifier;

        public IAmbiguousName getAmbiguousName() { return _AmbiguousName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public MethodName(IToken leftIToken, IToken rightIToken,
                          IAmbiguousName _AmbiguousName,
                          AstToken _DOT,
                          identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._AmbiguousName = _AmbiguousName;
            ((Ast) _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AmbiguousName);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodName)) return false;
            if (! super.equals(o)) return false;
            MethodName other = (MethodName) o;
            if (! _AmbiguousName.equals(other._AmbiguousName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AmbiguousName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AmbiguousName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 53:  PackageOrTypeName ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 54:  PackageOrTypeName ::= PackageOrTypeName . identifier
     *</b>
     */
    static public class PackageOrTypeName extends Ast implements IPackageOrTypeName
    {
        private IPackageOrTypeName _PackageOrTypeName;
        private AstToken _DOT;
        private identifier _identifier;

        public IPackageOrTypeName getPackageOrTypeName() { return _PackageOrTypeName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public PackageOrTypeName(IToken leftIToken, IToken rightIToken,
                                 IPackageOrTypeName _PackageOrTypeName,
                                 AstToken _DOT,
                                 identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._PackageOrTypeName = _PackageOrTypeName;
            ((Ast) _PackageOrTypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PackageOrTypeName);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PackageOrTypeName)) return false;
            if (! super.equals(o)) return false;
            PackageOrTypeName other = (PackageOrTypeName) o;
            if (! _PackageOrTypeName.equals(other._PackageOrTypeName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PackageOrTypeName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PackageOrTypeName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 55:  AmbiguousName ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 56:  AmbiguousName ::= AmbiguousName . identifier
     *</b>
     */
    static public class AmbiguousName extends Ast implements IAmbiguousName
    {
        private IAmbiguousName _AmbiguousName;
        private AstToken _DOT;
        private identifier _identifier;

        public IAmbiguousName getAmbiguousName() { return _AmbiguousName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public AmbiguousName(IToken leftIToken, IToken rightIToken,
                             IAmbiguousName _AmbiguousName,
                             AstToken _DOT,
                             identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._AmbiguousName = _AmbiguousName;
            ((Ast) _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AmbiguousName);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AmbiguousName)) return false;
            if (! super.equals(o)) return false;
            AmbiguousName other = (AmbiguousName) o;
            if (! _AmbiguousName.equals(other._AmbiguousName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AmbiguousName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AmbiguousName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 57:  CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt
     *</b>
     */
    static public class CompilationUnit extends Ast implements ICompilationUnit
    {
        private PackageDeclaration _PackageDeclarationopt;
        private IImportDeclarationsopt _ImportDeclarationsopt;
        private ITypeDeclarationsopt _TypeDeclarationsopt;

        /**
         * The value returned by <b>getPackageDeclarationopt</b> may be <b>null</b>
         */
        public PackageDeclaration getPackageDeclarationopt() { return _PackageDeclarationopt; }
        /**
         * The value returned by <b>getImportDeclarationsopt</b> may be <b>null</b>
         */
        public IImportDeclarationsopt getImportDeclarationsopt() { return _ImportDeclarationsopt; }
        /**
         * The value returned by <b>getTypeDeclarationsopt</b> may be <b>null</b>
         */
        public ITypeDeclarationsopt getTypeDeclarationsopt() { return _TypeDeclarationsopt; }

        public CompilationUnit(IToken leftIToken, IToken rightIToken,
                               PackageDeclaration _PackageDeclarationopt,
                               IImportDeclarationsopt _ImportDeclarationsopt,
                               ITypeDeclarationsopt _TypeDeclarationsopt)
        {
            super(leftIToken, rightIToken);

            this._PackageDeclarationopt = _PackageDeclarationopt;
            if (_PackageDeclarationopt != null) ((Ast) _PackageDeclarationopt).setParent(this);
            this._ImportDeclarationsopt = _ImportDeclarationsopt;
            if (_ImportDeclarationsopt != null) ((Ast) _ImportDeclarationsopt).setParent(this);
            this._TypeDeclarationsopt = _TypeDeclarationsopt;
            if (_TypeDeclarationsopt != null) ((Ast) _TypeDeclarationsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PackageDeclarationopt);
            list.add(_ImportDeclarationsopt);
            list.add(_TypeDeclarationsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof CompilationUnit)) return false;
            if (! super.equals(o)) return false;
            CompilationUnit other = (CompilationUnit) o;
            if (_PackageDeclarationopt == null)
                if (other._PackageDeclarationopt != null) return false;
                else; // continue
            else if (! _PackageDeclarationopt.equals(other._PackageDeclarationopt)) return false;
            if (_ImportDeclarationsopt == null)
                if (other._ImportDeclarationsopt != null) return false;
                else; // continue
            else if (! _ImportDeclarationsopt.equals(other._ImportDeclarationsopt)) return false;
            if (_TypeDeclarationsopt == null)
                if (other._TypeDeclarationsopt != null) return false;
                else; // continue
            else if (! _TypeDeclarationsopt.equals(other._TypeDeclarationsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PackageDeclarationopt == null ? 0 : _PackageDeclarationopt.hashCode());
            hash = hash * 31 + (_ImportDeclarationsopt == null ? 0 : _ImportDeclarationsopt.hashCode());
            hash = hash * 31 + (_TypeDeclarationsopt == null ? 0 : _TypeDeclarationsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_PackageDeclarationopt != null) _PackageDeclarationopt.accept(v);
                if (_ImportDeclarationsopt != null) _ImportDeclarationsopt.accept(v);
                if (_TypeDeclarationsopt != null) _TypeDeclarationsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 58:  ImportDeclarations ::= ImportDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 59:  ImportDeclarations ::= ImportDeclarations ImportDeclaration
     *</b>
     */
    static public class ImportDeclarations extends Ast implements IImportDeclarations
    {
        private IImportDeclarations _ImportDeclarations;
        private IImportDeclaration _ImportDeclaration;

        public IImportDeclarations getImportDeclarations() { return _ImportDeclarations; }
        public IImportDeclaration getImportDeclaration() { return _ImportDeclaration; }

        public ImportDeclarations(IToken leftIToken, IToken rightIToken,
                                  IImportDeclarations _ImportDeclarations,
                                  IImportDeclaration _ImportDeclaration)
        {
            super(leftIToken, rightIToken);

            this._ImportDeclarations = _ImportDeclarations;
            ((Ast) _ImportDeclarations).setParent(this);
            this._ImportDeclaration = _ImportDeclaration;
            ((Ast) _ImportDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ImportDeclarations);
            list.add(_ImportDeclaration);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ImportDeclarations)) return false;
            if (! super.equals(o)) return false;
            ImportDeclarations other = (ImportDeclarations) o;
            if (! _ImportDeclarations.equals(other._ImportDeclarations)) return false;
            if (! _ImportDeclaration.equals(other._ImportDeclaration)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ImportDeclarations.hashCode());
            hash = hash * 31 + (_ImportDeclaration.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ImportDeclarations.accept(v);
                _ImportDeclaration.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 60:  TypeDeclarations ::= TypeDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 61:  TypeDeclarations ::= TypeDeclarations TypeDeclaration
     *</b>
     */
    static public class TypeDeclarations extends Ast implements ITypeDeclarations
    {
        private ITypeDeclarations _TypeDeclarations;
        private ITypeDeclaration _TypeDeclaration;

        public ITypeDeclarations getTypeDeclarations() { return _TypeDeclarations; }
        public ITypeDeclaration getTypeDeclaration() { return _TypeDeclaration; }

        public TypeDeclarations(IToken leftIToken, IToken rightIToken,
                                ITypeDeclarations _TypeDeclarations,
                                ITypeDeclaration _TypeDeclaration)
        {
            super(leftIToken, rightIToken);

            this._TypeDeclarations = _TypeDeclarations;
            ((Ast) _TypeDeclarations).setParent(this);
            this._TypeDeclaration = _TypeDeclaration;
            ((Ast) _TypeDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeDeclarations);
            list.add(_TypeDeclaration);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeDeclarations)) return false;
            if (! super.equals(o)) return false;
            TypeDeclarations other = (TypeDeclarations) o;
            if (! _TypeDeclarations.equals(other._TypeDeclarations)) return false;
            if (! _TypeDeclaration.equals(other._TypeDeclaration)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeDeclarations.hashCode());
            hash = hash * 31 + (_TypeDeclaration.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeDeclarations.accept(v);
                _TypeDeclaration.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 62:  PackageDeclaration ::= Annotationsopt package PackageName ;
     *</b>
     */
    static public class PackageDeclaration extends Ast implements IPackageDeclaration
    {
        private IAnnotationsopt _Annotationsopt;
        private AstToken _package;
        private IPackageName _PackageName;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getAnnotationsopt</b> may be <b>null</b>
         */
        public IAnnotationsopt getAnnotationsopt() { return _Annotationsopt; }
        public AstToken getpackage() { return _package; }
        public IPackageName getPackageName() { return _PackageName; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public PackageDeclaration(IToken leftIToken, IToken rightIToken,
                                  IAnnotationsopt _Annotationsopt,
                                  AstToken _package,
                                  IPackageName _PackageName,
                                  AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._Annotationsopt = _Annotationsopt;
            if (_Annotationsopt != null) ((Ast) _Annotationsopt).setParent(this);
            this._package = _package;
            ((Ast) _package).setParent(this);
            this._PackageName = _PackageName;
            ((Ast) _PackageName).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Annotationsopt);
            list.add(_package);
            list.add(_PackageName);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PackageDeclaration)) return false;
            if (! super.equals(o)) return false;
            PackageDeclaration other = (PackageDeclaration) o;
            if (_Annotationsopt == null)
                if (other._Annotationsopt != null) return false;
                else; // continue
            else if (! _Annotationsopt.equals(other._Annotationsopt)) return false;
            if (! _package.equals(other._package)) return false;
            if (! _PackageName.equals(other._PackageName)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Annotationsopt == null ? 0 : _Annotationsopt.hashCode());
            hash = hash * 31 + (_package.hashCode());
            hash = hash * 31 + (_PackageName.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_Annotationsopt != null) _Annotationsopt.accept(v);
                _package.accept(v);
                _PackageName.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 67:  SingleTypeImportDeclaration ::= import TypeName ;
     *</b>
     */
    static public class SingleTypeImportDeclaration extends Ast implements ISingleTypeImportDeclaration
    {
        private AstToken _import;
        private ITypeName _TypeName;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public SingleTypeImportDeclaration(IToken leftIToken, IToken rightIToken,
                                           AstToken _import,
                                           ITypeName _TypeName,
                                           AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._import = _import;
            ((Ast) _import).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_import);
            list.add(_TypeName);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SingleTypeImportDeclaration)) return false;
            if (! super.equals(o)) return false;
            SingleTypeImportDeclaration other = (SingleTypeImportDeclaration) o;
            if (! _import.equals(other._import)) return false;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_import.hashCode());
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _import.accept(v);
                _TypeName.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 68:  TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
     *</b>
     */
    static public class TypeImportOnDemandDeclaration extends Ast implements ITypeImportOnDemandDeclaration
    {
        private AstToken _import;
        private IPackageOrTypeName _PackageOrTypeName;
        private AstToken _DOT;
        private AstToken _MULTIPLY;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public IPackageOrTypeName getPackageOrTypeName() { return _PackageOrTypeName; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getMULTIPLY() { return _MULTIPLY; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public TypeImportOnDemandDeclaration(IToken leftIToken, IToken rightIToken,
                                             AstToken _import,
                                             IPackageOrTypeName _PackageOrTypeName,
                                             AstToken _DOT,
                                             AstToken _MULTIPLY,
                                             AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._import = _import;
            ((Ast) _import).setParent(this);
            this._PackageOrTypeName = _PackageOrTypeName;
            ((Ast) _PackageOrTypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            ((Ast) _MULTIPLY).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_import);
            list.add(_PackageOrTypeName);
            list.add(_DOT);
            list.add(_MULTIPLY);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeImportOnDemandDeclaration)) return false;
            if (! super.equals(o)) return false;
            TypeImportOnDemandDeclaration other = (TypeImportOnDemandDeclaration) o;
            if (! _import.equals(other._import)) return false;
            if (! _PackageOrTypeName.equals(other._PackageOrTypeName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _MULTIPLY.equals(other._MULTIPLY)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_import.hashCode());
            hash = hash * 31 + (_PackageOrTypeName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_MULTIPLY.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _import.accept(v);
                _PackageOrTypeName.accept(v);
                _DOT.accept(v);
                _MULTIPLY.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 69:  SingleStaticImportDeclaration ::= import static TypeName . identifier ;
     *</b>
     */
    static public class SingleStaticImportDeclaration extends Ast implements ISingleStaticImportDeclaration
    {
        private AstToken _import;
        private AstToken _static;
        private ITypeName _TypeName;
        private AstToken _DOT;
        private identifier _identifier;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public AstToken getstatic() { return _static; }
        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public SingleStaticImportDeclaration(IToken leftIToken, IToken rightIToken,
                                             AstToken _import,
                                             AstToken _static,
                                             ITypeName _TypeName,
                                             AstToken _DOT,
                                             identifier _identifier,
                                             AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._import = _import;
            ((Ast) _import).setParent(this);
            this._static = _static;
            ((Ast) _static).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_import);
            list.add(_static);
            list.add(_TypeName);
            list.add(_DOT);
            list.add(_identifier);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SingleStaticImportDeclaration)) return false;
            if (! super.equals(o)) return false;
            SingleStaticImportDeclaration other = (SingleStaticImportDeclaration) o;
            if (! _import.equals(other._import)) return false;
            if (! _static.equals(other._static)) return false;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_import.hashCode());
            hash = hash * 31 + (_static.hashCode());
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _import.accept(v);
                _static.accept(v);
                _TypeName.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 70:  StaticImportOnDemandDeclaration ::= import static TypeName . * ;
     *</b>
     */
    static public class StaticImportOnDemandDeclaration extends Ast implements IStaticImportOnDemandDeclaration
    {
        private AstToken _import;
        private AstToken _static;
        private ITypeName _TypeName;
        private AstToken _DOT;
        private AstToken _MULTIPLY;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public AstToken getstatic() { return _static; }
        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getMULTIPLY() { return _MULTIPLY; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public StaticImportOnDemandDeclaration(IToken leftIToken, IToken rightIToken,
                                               AstToken _import,
                                               AstToken _static,
                                               ITypeName _TypeName,
                                               AstToken _DOT,
                                               AstToken _MULTIPLY,
                                               AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._import = _import;
            ((Ast) _import).setParent(this);
            this._static = _static;
            ((Ast) _static).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            ((Ast) _MULTIPLY).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_import);
            list.add(_static);
            list.add(_TypeName);
            list.add(_DOT);
            list.add(_MULTIPLY);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof StaticImportOnDemandDeclaration)) return false;
            if (! super.equals(o)) return false;
            StaticImportOnDemandDeclaration other = (StaticImportOnDemandDeclaration) o;
            if (! _import.equals(other._import)) return false;
            if (! _static.equals(other._static)) return false;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _MULTIPLY.equals(other._MULTIPLY)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_import.hashCode());
            hash = hash * 31 + (_static.hashCode());
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_MULTIPLY.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _import.accept(v);
                _static.accept(v);
                _TypeName.accept(v);
                _DOT.accept(v);
                _MULTIPLY.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 71:  TypeDeclaration ::= ClassDeclaration
     *<li>Rule 72:  TypeDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 73:  TypeDeclaration ::= ;
     *</b>
     */
    static public class TypeDeclaration extends AstToken implements ITypeDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public TypeDeclaration(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 76:  NormalClassDeclaration ::= ClassModifiersopt class identifier TypeParametersopt Superopt Interfacesopt ClassBody
     *</b>
     */
    static public class NormalClassDeclaration extends Ast implements INormalClassDeclaration
    {
        private IClassModifiersopt _ClassModifiersopt;
        private AstToken _class;
        private identifier _identifier;
        private TypeParameters _TypeParametersopt;
        private Super _Superopt;
        private Interfaces _Interfacesopt;
        private ClassBody _ClassBody;

        /**
         * The value returned by <b>getClassModifiersopt</b> may be <b>null</b>
         */
        public IClassModifiersopt getClassModifiersopt() { return _ClassModifiersopt; }
        public AstToken getclass() { return _class; }
        public identifier getidentifier() { return _identifier; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        /**
         * The value returned by <b>getSuperopt</b> may be <b>null</b>
         */
        public Super getSuperopt() { return _Superopt; }
        /**
         * The value returned by <b>getInterfacesopt</b> may be <b>null</b>
         */
        public Interfaces getInterfacesopt() { return _Interfacesopt; }
        public ClassBody getClassBody() { return _ClassBody; }

        public NormalClassDeclaration(IToken leftIToken, IToken rightIToken,
                                      IClassModifiersopt _ClassModifiersopt,
                                      AstToken _class,
                                      identifier _identifier,
                                      TypeParameters _TypeParametersopt,
                                      Super _Superopt,
                                      Interfaces _Interfacesopt,
                                      ClassBody _ClassBody)
        {
            super(leftIToken, rightIToken);

            this._ClassModifiersopt = _ClassModifiersopt;
            if (_ClassModifiersopt != null) ((Ast) _ClassModifiersopt).setParent(this);
            this._class = _class;
            ((Ast) _class).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._Superopt = _Superopt;
            if (_Superopt != null) ((Ast) _Superopt).setParent(this);
            this._Interfacesopt = _Interfacesopt;
            if (_Interfacesopt != null) ((Ast) _Interfacesopt).setParent(this);
            this._ClassBody = _ClassBody;
            ((Ast) _ClassBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassModifiersopt);
            list.add(_class);
            list.add(_identifier);
            list.add(_TypeParametersopt);
            list.add(_Superopt);
            list.add(_Interfacesopt);
            list.add(_ClassBody);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof NormalClassDeclaration)) return false;
            if (! super.equals(o)) return false;
            NormalClassDeclaration other = (NormalClassDeclaration) o;
            if (_ClassModifiersopt == null)
                if (other._ClassModifiersopt != null) return false;
                else; // continue
            else if (! _ClassModifiersopt.equals(other._ClassModifiersopt)) return false;
            if (! _class.equals(other._class)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else; // continue
            else if (! _TypeParametersopt.equals(other._TypeParametersopt)) return false;
            if (_Superopt == null)
                if (other._Superopt != null) return false;
                else; // continue
            else if (! _Superopt.equals(other._Superopt)) return false;
            if (_Interfacesopt == null)
                if (other._Interfacesopt != null) return false;
                else; // continue
            else if (! _Interfacesopt.equals(other._Interfacesopt)) return false;
            if (! _ClassBody.equals(other._ClassBody)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassModifiersopt == null ? 0 : _ClassModifiersopt.hashCode());
            hash = hash * 31 + (_class.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.hashCode());
            hash = hash * 31 + (_Superopt == null ? 0 : _Superopt.hashCode());
            hash = hash * 31 + (_Interfacesopt == null ? 0 : _Interfacesopt.hashCode());
            hash = hash * 31 + (_ClassBody.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_ClassModifiersopt != null) _ClassModifiersopt.accept(v);
                _class.accept(v);
                _identifier.accept(v);
                if (_TypeParametersopt != null) _TypeParametersopt.accept(v);
                if (_Superopt != null) _Superopt.accept(v);
                if (_Interfacesopt != null) _Interfacesopt.accept(v);
                _ClassBody.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 77:  ClassModifiers ::= ClassModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 78:  ClassModifiers ::= ClassModifiers ClassModifier
     *</b>
     */
    static public class ClassModifiers extends Ast implements IClassModifiers
    {
        private IClassModifiers _ClassModifiers;
        private IClassModifier _ClassModifier;

        public IClassModifiers getClassModifiers() { return _ClassModifiers; }
        public IClassModifier getClassModifier() { return _ClassModifier; }

        public ClassModifiers(IToken leftIToken, IToken rightIToken,
                              IClassModifiers _ClassModifiers,
                              IClassModifier _ClassModifier)
        {
            super(leftIToken, rightIToken);

            this._ClassModifiers = _ClassModifiers;
            ((Ast) _ClassModifiers).setParent(this);
            this._ClassModifier = _ClassModifier;
            ((Ast) _ClassModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassModifiers);
            list.add(_ClassModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ClassModifiers)) return false;
            if (! super.equals(o)) return false;
            ClassModifiers other = (ClassModifiers) o;
            if (! _ClassModifiers.equals(other._ClassModifiers)) return false;
            if (! _ClassModifier.equals(other._ClassModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassModifiers.hashCode());
            hash = hash * 31 + (_ClassModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ClassModifiers.accept(v);
                _ClassModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 87:  TypeParameters ::= < TypeParameterList >
     *</b>
     */
    static public class TypeParameters extends Ast implements ITypeParameters
    {
        private AstToken _LESS;
        private ITypeParameterList _TypeParameterList;
        private AstToken _GREATER;

        public AstToken getLESS() { return _LESS; }
        public ITypeParameterList getTypeParameterList() { return _TypeParameterList; }
        public AstToken getGREATER() { return _GREATER; }

        public TypeParameters(IToken leftIToken, IToken rightIToken,
                              AstToken _LESS,
                              ITypeParameterList _TypeParameterList,
                              AstToken _GREATER)
        {
            super(leftIToken, rightIToken);

            this._LESS = _LESS;
            ((Ast) _LESS).setParent(this);
            this._TypeParameterList = _TypeParameterList;
            ((Ast) _TypeParameterList).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LESS);
            list.add(_TypeParameterList);
            list.add(_GREATER);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeParameters)) return false;
            if (! super.equals(o)) return false;
            TypeParameters other = (TypeParameters) o;
            if (! _LESS.equals(other._LESS)) return false;
            if (! _TypeParameterList.equals(other._TypeParameterList)) return false;
            if (! _GREATER.equals(other._GREATER)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LESS.hashCode());
            hash = hash * 31 + (_TypeParameterList.hashCode());
            hash = hash * 31 + (_GREATER.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LESS.accept(v);
                _TypeParameterList.accept(v);
                _GREATER.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 88:  TypeParameterList ::= TypeParameter
     *</em>
     *<p>
     *<b>
     *<li>Rule 89:  TypeParameterList ::= TypeParameterList , TypeParameter
     *</b>
     */
    static public class TypeParameterList extends Ast implements ITypeParameterList
    {
        private ITypeParameterList _TypeParameterList;
        private AstToken _COMMA;
        private TypeParameter _TypeParameter;

        public ITypeParameterList getTypeParameterList() { return _TypeParameterList; }
        public AstToken getCOMMA() { return _COMMA; }
        public TypeParameter getTypeParameter() { return _TypeParameter; }

        public TypeParameterList(IToken leftIToken, IToken rightIToken,
                                 ITypeParameterList _TypeParameterList,
                                 AstToken _COMMA,
                                 TypeParameter _TypeParameter)
        {
            super(leftIToken, rightIToken);

            this._TypeParameterList = _TypeParameterList;
            ((Ast) _TypeParameterList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._TypeParameter = _TypeParameter;
            ((Ast) _TypeParameter).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeParameterList);
            list.add(_COMMA);
            list.add(_TypeParameter);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TypeParameterList)) return false;
            if (! super.equals(o)) return false;
            TypeParameterList other = (TypeParameterList) o;
            if (! _TypeParameterList.equals(other._TypeParameterList)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _TypeParameter.equals(other._TypeParameter)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeParameterList.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_TypeParameter.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeParameterList.accept(v);
                _COMMA.accept(v);
                _TypeParameter.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 90:  Super ::= extends ClassType
     *</b>
     */
    static public class Super extends Ast implements ISuper
    {
        private AstToken _extends;
        private ClassType _ClassType;

        public AstToken getextends() { return _extends; }
        public ClassType getClassType() { return _ClassType; }

        public Super(IToken leftIToken, IToken rightIToken,
                     AstToken _extends,
                     ClassType _ClassType)
        {
            super(leftIToken, rightIToken);

            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._ClassType = _ClassType;
            ((Ast) _ClassType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_extends);
            list.add(_ClassType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Super)) return false;
            if (! super.equals(o)) return false;
            Super other = (Super) o;
            if (! _extends.equals(other._extends)) return false;
            if (! _ClassType.equals(other._ClassType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_extends.hashCode());
            hash = hash * 31 + (_ClassType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _extends.accept(v);
                _ClassType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 91:  Interfaces ::= implements InterfaceTypeList
     *</b>
     */
    static public class Interfaces extends Ast implements IInterfaces
    {
        private AstToken _implements;
        private IInterfaceTypeList _InterfaceTypeList;

        public AstToken getimplements() { return _implements; }
        public IInterfaceTypeList getInterfaceTypeList() { return _InterfaceTypeList; }

        public Interfaces(IToken leftIToken, IToken rightIToken,
                          AstToken _implements,
                          IInterfaceTypeList _InterfaceTypeList)
        {
            super(leftIToken, rightIToken);

            this._implements = _implements;
            ((Ast) _implements).setParent(this);
            this._InterfaceTypeList = _InterfaceTypeList;
            ((Ast) _InterfaceTypeList).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_implements);
            list.add(_InterfaceTypeList);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Interfaces)) return false;
            if (! super.equals(o)) return false;
            Interfaces other = (Interfaces) o;
            if (! _implements.equals(other._implements)) return false;
            if (! _InterfaceTypeList.equals(other._InterfaceTypeList)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_implements.hashCode());
            hash = hash * 31 + (_InterfaceTypeList.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _implements.accept(v);
                _InterfaceTypeList.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 92:  InterfaceTypeList ::= InterfaceType
     *</em>
     *<p>
     *<b>
     *<li>Rule 93:  InterfaceTypeList ::= InterfaceTypeList , InterfaceType
     *</b>
     */
    static public class InterfaceTypeList extends Ast implements IInterfaceTypeList
    {
        private IInterfaceTypeList _InterfaceTypeList;
        private AstToken _COMMA;
        private InterfaceType _InterfaceType;

        public IInterfaceTypeList getInterfaceTypeList() { return _InterfaceTypeList; }
        public AstToken getCOMMA() { return _COMMA; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }

        public InterfaceTypeList(IToken leftIToken, IToken rightIToken,
                                 IInterfaceTypeList _InterfaceTypeList,
                                 AstToken _COMMA,
                                 InterfaceType _InterfaceType)
        {
            super(leftIToken, rightIToken);

            this._InterfaceTypeList = _InterfaceTypeList;
            ((Ast) _InterfaceTypeList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_InterfaceTypeList);
            list.add(_COMMA);
            list.add(_InterfaceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof InterfaceTypeList)) return false;
            if (! super.equals(o)) return false;
            InterfaceTypeList other = (InterfaceTypeList) o;
            if (! _InterfaceTypeList.equals(other._InterfaceTypeList)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _InterfaceType.equals(other._InterfaceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_InterfaceTypeList.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_InterfaceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _InterfaceTypeList.accept(v);
                _COMMA.accept(v);
                _InterfaceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 94:  ClassBody ::= { ClassBodyDeclarationsopt }
     *</b>
     */
    static public class ClassBody extends Ast implements IClassBody
    {
        private AstToken _LBRACE;
        private IClassBodyDeclarationsopt _ClassBodyDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getClassBodyDeclarationsopt</b> may be <b>null</b>
         */
        public IClassBodyDeclarationsopt getClassBodyDeclarationsopt() { return _ClassBodyDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public ClassBody(IToken leftIToken, IToken rightIToken,
                         AstToken _LBRACE,
                         IClassBodyDeclarationsopt _ClassBodyDeclarationsopt,
                         AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt;
            if (_ClassBodyDeclarationsopt != null) ((Ast) _ClassBodyDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_ClassBodyDeclarationsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ClassBody)) return false;
            if (! super.equals(o)) return false;
            ClassBody other = (ClassBody) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_ClassBodyDeclarationsopt == null)
                if (other._ClassBodyDeclarationsopt != null) return false;
                else; // continue
            else if (! _ClassBodyDeclarationsopt.equals(other._ClassBodyDeclarationsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_ClassBodyDeclarationsopt == null ? 0 : _ClassBodyDeclarationsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_ClassBodyDeclarationsopt != null) _ClassBodyDeclarationsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 95:  ClassBodyDeclarations ::= ClassBodyDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 96:  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration
     *</b>
     */
    static public class ClassBodyDeclarations extends Ast implements IClassBodyDeclarations
    {
        private IClassBodyDeclarations _ClassBodyDeclarations;
        private IClassBodyDeclaration _ClassBodyDeclaration;

        public IClassBodyDeclarations getClassBodyDeclarations() { return _ClassBodyDeclarations; }
        public IClassBodyDeclaration getClassBodyDeclaration() { return _ClassBodyDeclaration; }

        public ClassBodyDeclarations(IToken leftIToken, IToken rightIToken,
                                     IClassBodyDeclarations _ClassBodyDeclarations,
                                     IClassBodyDeclaration _ClassBodyDeclaration)
        {
            super(leftIToken, rightIToken);

            this._ClassBodyDeclarations = _ClassBodyDeclarations;
            ((Ast) _ClassBodyDeclarations).setParent(this);
            this._ClassBodyDeclaration = _ClassBodyDeclaration;
            ((Ast) _ClassBodyDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassBodyDeclarations);
            list.add(_ClassBodyDeclaration);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ClassBodyDeclarations)) return false;
            if (! super.equals(o)) return false;
            ClassBodyDeclarations other = (ClassBodyDeclarations) o;
            if (! _ClassBodyDeclarations.equals(other._ClassBodyDeclarations)) return false;
            if (! _ClassBodyDeclaration.equals(other._ClassBodyDeclaration)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassBodyDeclarations.hashCode());
            hash = hash * 31 + (_ClassBodyDeclaration.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ClassBodyDeclarations.accept(v);
                _ClassBodyDeclaration.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 101:  ClassMemberDeclaration ::= FieldDeclaration
     *<li>Rule 102:  ClassMemberDeclaration ::= MethodDeclaration
     *<li>Rule 103:  ClassMemberDeclaration ::= ClassDeclaration
     *<li>Rule 104:  ClassMemberDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 105:  ClassMemberDeclaration ::= ;
     *</b>
     */
    static public class ClassMemberDeclaration extends AstToken implements IClassMemberDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public ClassMemberDeclaration(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 106:  FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ;
     *</b>
     */
    static public class FieldDeclaration extends Ast implements IFieldDeclaration
    {
        private IFieldModifiersopt _FieldModifiersopt;
        private IType _Type;
        private IVariableDeclarators _VariableDeclarators;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getFieldModifiersopt</b> may be <b>null</b>
         */
        public IFieldModifiersopt getFieldModifiersopt() { return _FieldModifiersopt; }
        public IType getType() { return _Type; }
        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public FieldDeclaration(IToken leftIToken, IToken rightIToken,
                                IFieldModifiersopt _FieldModifiersopt,
                                IType _Type,
                                IVariableDeclarators _VariableDeclarators,
                                AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._FieldModifiersopt = _FieldModifiersopt;
            if (_FieldModifiersopt != null) ((Ast) _FieldModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_FieldModifiersopt);
            list.add(_Type);
            list.add(_VariableDeclarators);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FieldDeclaration)) return false;
            if (! super.equals(o)) return false;
            FieldDeclaration other = (FieldDeclaration) o;
            if (_FieldModifiersopt == null)
                if (other._FieldModifiersopt != null) return false;
                else; // continue
            else if (! _FieldModifiersopt.equals(other._FieldModifiersopt)) return false;
            if (! _Type.equals(other._Type)) return false;
            if (! _VariableDeclarators.equals(other._VariableDeclarators)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_FieldModifiersopt == null ? 0 : _FieldModifiersopt.hashCode());
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_VariableDeclarators.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_FieldModifiersopt != null) _FieldModifiersopt.accept(v);
                _Type.accept(v);
                _VariableDeclarators.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 107:  VariableDeclarators ::= VariableDeclarator
     *</em>
     *<p>
     *<b>
     *<li>Rule 108:  VariableDeclarators ::= VariableDeclarators , VariableDeclarator
     *</b>
     */
    static public class VariableDeclarators extends Ast implements IVariableDeclarators
    {
        private IVariableDeclarators _VariableDeclarators;
        private AstToken _COMMA;
        private IVariableDeclarator _VariableDeclarator;

        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }
        public AstToken getCOMMA() { return _COMMA; }
        public IVariableDeclarator getVariableDeclarator() { return _VariableDeclarator; }

        public VariableDeclarators(IToken leftIToken, IToken rightIToken,
                                   IVariableDeclarators _VariableDeclarators,
                                   AstToken _COMMA,
                                   IVariableDeclarator _VariableDeclarator)
        {
            super(leftIToken, rightIToken);

            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._VariableDeclarator = _VariableDeclarator;
            ((Ast) _VariableDeclarator).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableDeclarators);
            list.add(_COMMA);
            list.add(_VariableDeclarator);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof VariableDeclarators)) return false;
            if (! super.equals(o)) return false;
            VariableDeclarators other = (VariableDeclarators) o;
            if (! _VariableDeclarators.equals(other._VariableDeclarators)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _VariableDeclarator.equals(other._VariableDeclarator)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableDeclarators.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_VariableDeclarator.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _VariableDeclarators.accept(v);
                _COMMA.accept(v);
                _VariableDeclarator.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 109:  VariableDeclarator ::= VariableDeclaratorId
     *</em>
     *<p>
     *<b>
     *<li>Rule 110:  VariableDeclarator ::= VariableDeclaratorId = VariableInitializer
     *</b>
     */
    static public class VariableDeclarator extends Ast implements IVariableDeclarator
    {
        private IVariableDeclaratorId _VariableDeclaratorId;
        private AstToken _EQUAL;
        private IVariableInitializer _VariableInitializer;

        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }
        public AstToken getEQUAL() { return _EQUAL; }
        public IVariableInitializer getVariableInitializer() { return _VariableInitializer; }

        public VariableDeclarator(IToken leftIToken, IToken rightIToken,
                                  IVariableDeclaratorId _VariableDeclaratorId,
                                  AstToken _EQUAL,
                                  IVariableInitializer _VariableInitializer)
        {
            super(leftIToken, rightIToken);

            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            this._VariableInitializer = _VariableInitializer;
            ((Ast) _VariableInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableDeclaratorId);
            list.add(_EQUAL);
            list.add(_VariableInitializer);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof VariableDeclarator)) return false;
            if (! super.equals(o)) return false;
            VariableDeclarator other = (VariableDeclarator) o;
            if (! _VariableDeclaratorId.equals(other._VariableDeclaratorId)) return false;
            if (! _EQUAL.equals(other._EQUAL)) return false;
            if (! _VariableInitializer.equals(other._VariableInitializer)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableDeclaratorId.hashCode());
            hash = hash * 31 + (_EQUAL.hashCode());
            hash = hash * 31 + (_VariableInitializer.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _VariableDeclaratorId.accept(v);
                _EQUAL.accept(v);
                _VariableInitializer.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 111:  VariableDeclaratorId ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 112:  VariableDeclaratorId ::= VariableDeclaratorId [ ]
     *</b>
     */
    static public class VariableDeclaratorId extends Ast implements IVariableDeclaratorId
    {
        private IVariableDeclaratorId _VariableDeclaratorId;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public VariableDeclaratorId(IToken leftIToken, IToken rightIToken,
                                    IVariableDeclaratorId _VariableDeclaratorId,
                                    AstToken _LBRACKET,
                                    AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableDeclaratorId);
            list.add(_LBRACKET);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof VariableDeclaratorId)) return false;
            if (! super.equals(o)) return false;
            VariableDeclaratorId other = (VariableDeclaratorId) o;
            if (! _VariableDeclaratorId.equals(other._VariableDeclaratorId)) return false;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableDeclaratorId.hashCode());
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _VariableDeclaratorId.accept(v);
                _LBRACKET.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 115:  FieldModifiers ::= FieldModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 116:  FieldModifiers ::= FieldModifiers FieldModifier
     *</b>
     */
    static public class FieldModifiers extends Ast implements IFieldModifiers
    {
        private IFieldModifiers _FieldModifiers;
        private IFieldModifier _FieldModifier;

        public IFieldModifiers getFieldModifiers() { return _FieldModifiers; }
        public IFieldModifier getFieldModifier() { return _FieldModifier; }

        public FieldModifiers(IToken leftIToken, IToken rightIToken,
                              IFieldModifiers _FieldModifiers,
                              IFieldModifier _FieldModifier)
        {
            super(leftIToken, rightIToken);

            this._FieldModifiers = _FieldModifiers;
            ((Ast) _FieldModifiers).setParent(this);
            this._FieldModifier = _FieldModifier;
            ((Ast) _FieldModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_FieldModifiers);
            list.add(_FieldModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FieldModifiers)) return false;
            if (! super.equals(o)) return false;
            FieldModifiers other = (FieldModifiers) o;
            if (! _FieldModifiers.equals(other._FieldModifiers)) return false;
            if (! _FieldModifier.equals(other._FieldModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_FieldModifiers.hashCode());
            hash = hash * 31 + (_FieldModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _FieldModifiers.accept(v);
                _FieldModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 125:  MethodDeclaration ::= MethodHeader MethodBody
     *</b>
     */
    static public class MethodDeclaration extends Ast implements IMethodDeclaration
    {
        private MethodHeader _MethodHeader;
        private IMethodBody _MethodBody;

        public MethodHeader getMethodHeader() { return _MethodHeader; }
        public IMethodBody getMethodBody() { return _MethodBody; }

        public MethodDeclaration(IToken leftIToken, IToken rightIToken,
                                 MethodHeader _MethodHeader,
                                 IMethodBody _MethodBody)
        {
            super(leftIToken, rightIToken);

            this._MethodHeader = _MethodHeader;
            ((Ast) _MethodHeader).setParent(this);
            this._MethodBody = _MethodBody;
            ((Ast) _MethodBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MethodHeader);
            list.add(_MethodBody);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodDeclaration)) return false;
            if (! super.equals(o)) return false;
            MethodDeclaration other = (MethodDeclaration) o;
            if (! _MethodHeader.equals(other._MethodHeader)) return false;
            if (! _MethodBody.equals(other._MethodBody)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MethodHeader.hashCode());
            hash = hash * 31 + (_MethodBody.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MethodHeader.accept(v);
                _MethodBody.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 126:  MethodHeader ::= MethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt
     *</b>
     */
    static public class MethodHeader extends Ast implements IMethodHeader
    {
        private IMethodModifiersopt _MethodModifiersopt;
        private TypeParameters _TypeParametersopt;
        private IResultType _ResultType;
        private IMethodDeclarator _MethodDeclarator;
        private Throws _Throwsopt;

        /**
         * The value returned by <b>getMethodModifiersopt</b> may be <b>null</b>
         */
        public IMethodModifiersopt getMethodModifiersopt() { return _MethodModifiersopt; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public IResultType getResultType() { return _ResultType; }
        public IMethodDeclarator getMethodDeclarator() { return _MethodDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public Throws getThrowsopt() { return _Throwsopt; }

        public MethodHeader(IToken leftIToken, IToken rightIToken,
                            IMethodModifiersopt _MethodModifiersopt,
                            TypeParameters _TypeParametersopt,
                            IResultType _ResultType,
                            IMethodDeclarator _MethodDeclarator,
                            Throws _Throwsopt)
        {
            super(leftIToken, rightIToken);

            this._MethodModifiersopt = _MethodModifiersopt;
            if (_MethodModifiersopt != null) ((Ast) _MethodModifiersopt).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._ResultType = _ResultType;
            ((Ast) _ResultType).setParent(this);
            this._MethodDeclarator = _MethodDeclarator;
            ((Ast) _MethodDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt != null) ((Ast) _Throwsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MethodModifiersopt);
            list.add(_TypeParametersopt);
            list.add(_ResultType);
            list.add(_MethodDeclarator);
            list.add(_Throwsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodHeader)) return false;
            if (! super.equals(o)) return false;
            MethodHeader other = (MethodHeader) o;
            if (_MethodModifiersopt == null)
                if (other._MethodModifiersopt != null) return false;
                else; // continue
            else if (! _MethodModifiersopt.equals(other._MethodModifiersopt)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else; // continue
            else if (! _TypeParametersopt.equals(other._TypeParametersopt)) return false;
            if (! _ResultType.equals(other._ResultType)) return false;
            if (! _MethodDeclarator.equals(other._MethodDeclarator)) return false;
            if (_Throwsopt == null)
                if (other._Throwsopt != null) return false;
                else; // continue
            else if (! _Throwsopt.equals(other._Throwsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MethodModifiersopt == null ? 0 : _MethodModifiersopt.hashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.hashCode());
            hash = hash * 31 + (_ResultType.hashCode());
            hash = hash * 31 + (_MethodDeclarator.hashCode());
            hash = hash * 31 + (_Throwsopt == null ? 0 : _Throwsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_MethodModifiersopt != null) _MethodModifiersopt.accept(v);
                if (_TypeParametersopt != null) _TypeParametersopt.accept(v);
                _ResultType.accept(v);
                _MethodDeclarator.accept(v);
                if (_Throwsopt != null) _Throwsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 127:  ResultType ::= Type
     *</em>
     *<p>
     *<b>
     *<li>Rule 128:  ResultType ::= void
     *</b>
     */
    static public class ResultType extends AstToken implements IResultType
    {
        public IToken getvoid() { return leftIToken; }

        public ResultType(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 131:  FormalParameterList ::= LastFormalParameter
     *</em>
     *<p>
     *<b>
     *<li>Rule 132:  FormalParameterList ::= FormalParameters , LastFormalParameter
     *</b>
     */
    static public class FormalParameterList extends Ast implements IFormalParameterList
    {
        private IFormalParameters _FormalParameters;
        private AstToken _COMMA;
        private LastFormalParameter _LastFormalParameter;

        public IFormalParameters getFormalParameters() { return _FormalParameters; }
        public AstToken getCOMMA() { return _COMMA; }
        public LastFormalParameter getLastFormalParameter() { return _LastFormalParameter; }

        public FormalParameterList(IToken leftIToken, IToken rightIToken,
                                   IFormalParameters _FormalParameters,
                                   AstToken _COMMA,
                                   LastFormalParameter _LastFormalParameter)
        {
            super(leftIToken, rightIToken);

            this._FormalParameters = _FormalParameters;
            ((Ast) _FormalParameters).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._LastFormalParameter = _LastFormalParameter;
            ((Ast) _LastFormalParameter).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_FormalParameters);
            list.add(_COMMA);
            list.add(_LastFormalParameter);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FormalParameterList)) return false;
            if (! super.equals(o)) return false;
            FormalParameterList other = (FormalParameterList) o;
            if (! _FormalParameters.equals(other._FormalParameters)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _LastFormalParameter.equals(other._LastFormalParameter)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_FormalParameters.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_LastFormalParameter.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _FormalParameters.accept(v);
                _COMMA.accept(v);
                _LastFormalParameter.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 133:  FormalParameters ::= FormalParameter
     *</em>
     *<p>
     *<b>
     *<li>Rule 134:  FormalParameters ::= FormalParameters , FormalParameter
     *</b>
     */
    static public class FormalParameters extends Ast implements IFormalParameters
    {
        private IFormalParameters _FormalParameters;
        private AstToken _COMMA;
        private FormalParameter _FormalParameter;

        public IFormalParameters getFormalParameters() { return _FormalParameters; }
        public AstToken getCOMMA() { return _COMMA; }
        public FormalParameter getFormalParameter() { return _FormalParameter; }

        public FormalParameters(IToken leftIToken, IToken rightIToken,
                                IFormalParameters _FormalParameters,
                                AstToken _COMMA,
                                FormalParameter _FormalParameter)
        {
            super(leftIToken, rightIToken);

            this._FormalParameters = _FormalParameters;
            ((Ast) _FormalParameters).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._FormalParameter = _FormalParameter;
            ((Ast) _FormalParameter).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_FormalParameters);
            list.add(_COMMA);
            list.add(_FormalParameter);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FormalParameters)) return false;
            if (! super.equals(o)) return false;
            FormalParameters other = (FormalParameters) o;
            if (! _FormalParameters.equals(other._FormalParameters)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _FormalParameter.equals(other._FormalParameter)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_FormalParameters.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_FormalParameter.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _FormalParameters.accept(v);
                _COMMA.accept(v);
                _FormalParameter.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 135:  FormalParameter ::= VariableModifiersopt Type VariableDeclaratorId
     *</b>
     */
    static public class FormalParameter extends Ast implements IFormalParameter
    {
        private IVariableModifiersopt _VariableModifiersopt;
        private IType _Type;
        private IVariableDeclaratorId _VariableDeclaratorId;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public IVariableModifiersopt getVariableModifiersopt() { return _VariableModifiersopt; }
        public IType getType() { return _Type; }
        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }

        public FormalParameter(IToken leftIToken, IToken rightIToken,
                               IVariableModifiersopt _VariableModifiersopt,
                               IType _Type,
                               IVariableDeclaratorId _VariableDeclaratorId)
        {
            super(leftIToken, rightIToken);

            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt != null) ((Ast) _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableModifiersopt);
            list.add(_Type);
            list.add(_VariableDeclaratorId);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FormalParameter)) return false;
            if (! super.equals(o)) return false;
            FormalParameter other = (FormalParameter) o;
            if (_VariableModifiersopt == null)
                if (other._VariableModifiersopt != null) return false;
                else; // continue
            else if (! _VariableModifiersopt.equals(other._VariableModifiersopt)) return false;
            if (! _Type.equals(other._Type)) return false;
            if (! _VariableDeclaratorId.equals(other._VariableDeclaratorId)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableModifiersopt == null ? 0 : _VariableModifiersopt.hashCode());
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_VariableDeclaratorId.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_VariableModifiersopt != null) _VariableModifiersopt.accept(v);
                _Type.accept(v);
                _VariableDeclaratorId.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 136:  VariableModifiers ::= VariableModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 137:  VariableModifiers ::= VariableModifiers VariableModifier
     *</b>
     */
    static public class VariableModifiers extends Ast implements IVariableModifiers
    {
        private IVariableModifiers _VariableModifiers;
        private IVariableModifier _VariableModifier;

        public IVariableModifiers getVariableModifiers() { return _VariableModifiers; }
        public IVariableModifier getVariableModifier() { return _VariableModifier; }

        public VariableModifiers(IToken leftIToken, IToken rightIToken,
                                 IVariableModifiers _VariableModifiers,
                                 IVariableModifier _VariableModifier)
        {
            super(leftIToken, rightIToken);

            this._VariableModifiers = _VariableModifiers;
            ((Ast) _VariableModifiers).setParent(this);
            this._VariableModifier = _VariableModifier;
            ((Ast) _VariableModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableModifiers);
            list.add(_VariableModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof VariableModifiers)) return false;
            if (! super.equals(o)) return false;
            VariableModifiers other = (VariableModifiers) o;
            if (! _VariableModifiers.equals(other._VariableModifiers)) return false;
            if (! _VariableModifier.equals(other._VariableModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableModifiers.hashCode());
            hash = hash * 31 + (_VariableModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _VariableModifiers.accept(v);
                _VariableModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 139:  VariableModifier ::= Annotations
     *</em>
     *<p>
     *<b>
     *<li>Rule 138:  VariableModifier ::= final
     *</b>
     */
    static public class VariableModifier extends AstToken implements IVariableModifier
    {
        public IToken getfinal() { return leftIToken; }

        public VariableModifier(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 140:  LastFormalParameter ::= VariableModifiersopt Type ...opt VariableDeclaratorId
     *</b>
     */
    static public class LastFormalParameter extends Ast implements ILastFormalParameter
    {
        private IVariableModifiersopt _VariableModifiersopt;
        private IType _Type;
        private Ellipsisopt _Ellipsisopt;
        private IVariableDeclaratorId _VariableDeclaratorId;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public IVariableModifiersopt getVariableModifiersopt() { return _VariableModifiersopt; }
        public IType getType() { return _Type; }
        /**
         * The value returned by <b>getEllipsisopt</b> may be <b>null</b>
         */
        public Ellipsisopt getEllipsisopt() { return _Ellipsisopt; }
        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }

        public LastFormalParameter(IToken leftIToken, IToken rightIToken,
                                   IVariableModifiersopt _VariableModifiersopt,
                                   IType _Type,
                                   Ellipsisopt _Ellipsisopt,
                                   IVariableDeclaratorId _VariableDeclaratorId)
        {
            super(leftIToken, rightIToken);

            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt != null) ((Ast) _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._Ellipsisopt = _Ellipsisopt;
            if (_Ellipsisopt != null) ((Ast) _Ellipsisopt).setParent(this);
            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableModifiersopt);
            list.add(_Type);
            list.add(_Ellipsisopt);
            list.add(_VariableDeclaratorId);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LastFormalParameter)) return false;
            if (! super.equals(o)) return false;
            LastFormalParameter other = (LastFormalParameter) o;
            if (_VariableModifiersopt == null)
                if (other._VariableModifiersopt != null) return false;
                else; // continue
            else if (! _VariableModifiersopt.equals(other._VariableModifiersopt)) return false;
            if (! _Type.equals(other._Type)) return false;
            if (_Ellipsisopt == null)
                if (other._Ellipsisopt != null) return false;
                else; // continue
            else if (! _Ellipsisopt.equals(other._Ellipsisopt)) return false;
            if (! _VariableDeclaratorId.equals(other._VariableDeclaratorId)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableModifiersopt == null ? 0 : _VariableModifiersopt.hashCode());
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_Ellipsisopt == null ? 0 : _Ellipsisopt.hashCode());
            hash = hash * 31 + (_VariableDeclaratorId.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_VariableModifiersopt != null) _VariableModifiersopt.accept(v);
                _Type.accept(v);
                if (_Ellipsisopt != null) _Ellipsisopt.accept(v);
                _VariableDeclaratorId.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 141:  MethodModifiers ::= MethodModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 142:  MethodModifiers ::= MethodModifiers MethodModifier
     *</b>
     */
    static public class MethodModifiers extends Ast implements IMethodModifiers
    {
        private IMethodModifiers _MethodModifiers;
        private IMethodModifier _MethodModifier;

        public IMethodModifiers getMethodModifiers() { return _MethodModifiers; }
        public IMethodModifier getMethodModifier() { return _MethodModifier; }

        public MethodModifiers(IToken leftIToken, IToken rightIToken,
                               IMethodModifiers _MethodModifiers,
                               IMethodModifier _MethodModifier)
        {
            super(leftIToken, rightIToken);

            this._MethodModifiers = _MethodModifiers;
            ((Ast) _MethodModifiers).setParent(this);
            this._MethodModifier = _MethodModifier;
            ((Ast) _MethodModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MethodModifiers);
            list.add(_MethodModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodModifiers)) return false;
            if (! super.equals(o)) return false;
            MethodModifiers other = (MethodModifiers) o;
            if (! _MethodModifiers.equals(other._MethodModifiers)) return false;
            if (! _MethodModifier.equals(other._MethodModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MethodModifiers.hashCode());
            hash = hash * 31 + (_MethodModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MethodModifiers.accept(v);
                _MethodModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 153:  Throws ::= throws ExceptionTypeList
     *</b>
     */
    static public class Throws extends Ast implements IThrows
    {
        private AstToken _throws;
        private IExceptionTypeList _ExceptionTypeList;

        public AstToken getthrows() { return _throws; }
        public IExceptionTypeList getExceptionTypeList() { return _ExceptionTypeList; }

        public Throws(IToken leftIToken, IToken rightIToken,
                      AstToken _throws,
                      IExceptionTypeList _ExceptionTypeList)
        {
            super(leftIToken, rightIToken);

            this._throws = _throws;
            ((Ast) _throws).setParent(this);
            this._ExceptionTypeList = _ExceptionTypeList;
            ((Ast) _ExceptionTypeList).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_throws);
            list.add(_ExceptionTypeList);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Throws)) return false;
            if (! super.equals(o)) return false;
            Throws other = (Throws) o;
            if (! _throws.equals(other._throws)) return false;
            if (! _ExceptionTypeList.equals(other._ExceptionTypeList)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_throws.hashCode());
            hash = hash * 31 + (_ExceptionTypeList.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _throws.accept(v);
                _ExceptionTypeList.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 154:  ExceptionTypeList ::= ExceptionType
     *</em>
     *<p>
     *<b>
     *<li>Rule 155:  ExceptionTypeList ::= ExceptionTypeList , ExceptionType
     *</b>
     */
    static public class ExceptionTypeList extends Ast implements IExceptionTypeList
    {
        private IExceptionTypeList _ExceptionTypeList;
        private AstToken _COMMA;
        private IExceptionType _ExceptionType;

        public IExceptionTypeList getExceptionTypeList() { return _ExceptionTypeList; }
        public AstToken getCOMMA() { return _COMMA; }
        public IExceptionType getExceptionType() { return _ExceptionType; }

        public ExceptionTypeList(IToken leftIToken, IToken rightIToken,
                                 IExceptionTypeList _ExceptionTypeList,
                                 AstToken _COMMA,
                                 IExceptionType _ExceptionType)
        {
            super(leftIToken, rightIToken);

            this._ExceptionTypeList = _ExceptionTypeList;
            ((Ast) _ExceptionTypeList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ExceptionType = _ExceptionType;
            ((Ast) _ExceptionType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ExceptionTypeList);
            list.add(_COMMA);
            list.add(_ExceptionType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExceptionTypeList)) return false;
            if (! super.equals(o)) return false;
            ExceptionTypeList other = (ExceptionTypeList) o;
            if (! _ExceptionTypeList.equals(other._ExceptionTypeList)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _ExceptionType.equals(other._ExceptionType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ExceptionTypeList.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_ExceptionType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ExceptionTypeList.accept(v);
                _COMMA.accept(v);
                _ExceptionType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 158:  MethodBody ::= Block
     *</em>
     *<p>
     *<b>
     *<li>Rule 159:  MethodBody ::= ;
     *</b>
     */
    static public class MethodBody extends AstToken implements IMethodBody
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public MethodBody(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 161:  StaticInitializer ::= static Block
     *</b>
     */
    static public class StaticInitializer extends Ast implements IStaticInitializer
    {
        private AstToken _static;
        private Block _Block;

        public AstToken getstatic() { return _static; }
        public Block getBlock() { return _Block; }

        public StaticInitializer(IToken leftIToken, IToken rightIToken,
                                 AstToken _static,
                                 Block _Block)
        {
            super(leftIToken, rightIToken);

            this._static = _static;
            ((Ast) _static).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_static);
            list.add(_Block);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof StaticInitializer)) return false;
            if (! super.equals(o)) return false;
            StaticInitializer other = (StaticInitializer) o;
            if (! _static.equals(other._static)) return false;
            if (! _Block.equals(other._Block)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_static.hashCode());
            hash = hash * 31 + (_Block.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _static.accept(v);
                _Block.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 162:  ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator Throwsopt ConstructorBody
     *</b>
     */
    static public class ConstructorDeclaration extends Ast implements IConstructorDeclaration
    {
        private IConstructorModifiersopt _ConstructorModifiersopt;
        private ConstructorDeclarator _ConstructorDeclarator;
        private Throws _Throwsopt;
        private ConstructorBody _ConstructorBody;

        /**
         * The value returned by <b>getConstructorModifiersopt</b> may be <b>null</b>
         */
        public IConstructorModifiersopt getConstructorModifiersopt() { return _ConstructorModifiersopt; }
        public ConstructorDeclarator getConstructorDeclarator() { return _ConstructorDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public Throws getThrowsopt() { return _Throwsopt; }
        public ConstructorBody getConstructorBody() { return _ConstructorBody; }

        public ConstructorDeclaration(IToken leftIToken, IToken rightIToken,
                                      IConstructorModifiersopt _ConstructorModifiersopt,
                                      ConstructorDeclarator _ConstructorDeclarator,
                                      Throws _Throwsopt,
                                      ConstructorBody _ConstructorBody)
        {
            super(leftIToken, rightIToken);

            this._ConstructorModifiersopt = _ConstructorModifiersopt;
            if (_ConstructorModifiersopt != null) ((Ast) _ConstructorModifiersopt).setParent(this);
            this._ConstructorDeclarator = _ConstructorDeclarator;
            ((Ast) _ConstructorDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt != null) ((Ast) _Throwsopt).setParent(this);
            this._ConstructorBody = _ConstructorBody;
            ((Ast) _ConstructorBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConstructorModifiersopt);
            list.add(_ConstructorDeclarator);
            list.add(_Throwsopt);
            list.add(_ConstructorBody);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConstructorDeclaration)) return false;
            if (! super.equals(o)) return false;
            ConstructorDeclaration other = (ConstructorDeclaration) o;
            if (_ConstructorModifiersopt == null)
                if (other._ConstructorModifiersopt != null) return false;
                else; // continue
            else if (! _ConstructorModifiersopt.equals(other._ConstructorModifiersopt)) return false;
            if (! _ConstructorDeclarator.equals(other._ConstructorDeclarator)) return false;
            if (_Throwsopt == null)
                if (other._Throwsopt != null) return false;
                else; // continue
            else if (! _Throwsopt.equals(other._Throwsopt)) return false;
            if (! _ConstructorBody.equals(other._ConstructorBody)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConstructorModifiersopt == null ? 0 : _ConstructorModifiersopt.hashCode());
            hash = hash * 31 + (_ConstructorDeclarator.hashCode());
            hash = hash * 31 + (_Throwsopt == null ? 0 : _Throwsopt.hashCode());
            hash = hash * 31 + (_ConstructorBody.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_ConstructorModifiersopt != null) _ConstructorModifiersopt.accept(v);
                _ConstructorDeclarator.accept(v);
                if (_Throwsopt != null) _Throwsopt.accept(v);
                _ConstructorBody.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 163:  ConstructorDeclarator ::= TypeParametersopt SimpleTypeName ( FormalParameterListopt )
     *</b>
     */
    static public class ConstructorDeclarator extends Ast implements IConstructorDeclarator
    {
        private TypeParameters _TypeParametersopt;
        private identifier _SimpleTypeName;
        private AstToken _LPAREN;
        private IFormalParameterListopt _FormalParameterListopt;
        private AstToken _RPAREN;

        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public identifier getSimpleTypeName() { return _SimpleTypeName; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getFormalParameterListopt</b> may be <b>null</b>
         */
        public IFormalParameterListopt getFormalParameterListopt() { return _FormalParameterListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public ConstructorDeclarator(IToken leftIToken, IToken rightIToken,
                                     TypeParameters _TypeParametersopt,
                                     identifier _SimpleTypeName,
                                     AstToken _LPAREN,
                                     IFormalParameterListopt _FormalParameterListopt,
                                     AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._SimpleTypeName = _SimpleTypeName;
            ((Ast) _SimpleTypeName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameterListopt = _FormalParameterListopt;
            if (_FormalParameterListopt != null) ((Ast) _FormalParameterListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeParametersopt);
            list.add(_SimpleTypeName);
            list.add(_LPAREN);
            list.add(_FormalParameterListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConstructorDeclarator)) return false;
            if (! super.equals(o)) return false;
            ConstructorDeclarator other = (ConstructorDeclarator) o;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else; // continue
            else if (! _TypeParametersopt.equals(other._TypeParametersopt)) return false;
            if (! _SimpleTypeName.equals(other._SimpleTypeName)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_FormalParameterListopt == null)
                if (other._FormalParameterListopt != null) return false;
                else; // continue
            else if (! _FormalParameterListopt.equals(other._FormalParameterListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.hashCode());
            hash = hash * 31 + (_SimpleTypeName.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_FormalParameterListopt == null ? 0 : _FormalParameterListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_TypeParametersopt != null) _TypeParametersopt.accept(v);
                _SimpleTypeName.accept(v);
                _LPAREN.accept(v);
                if (_FormalParameterListopt != null) _FormalParameterListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 165:  ConstructorModifiers ::= ConstructorModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 166:  ConstructorModifiers ::= ConstructorModifiers ConstructorModifier
     *</b>
     */
    static public class ConstructorModifiers extends Ast implements IConstructorModifiers
    {
        private IConstructorModifiers _ConstructorModifiers;
        private IConstructorModifier _ConstructorModifier;

        public IConstructorModifiers getConstructorModifiers() { return _ConstructorModifiers; }
        public IConstructorModifier getConstructorModifier() { return _ConstructorModifier; }

        public ConstructorModifiers(IToken leftIToken, IToken rightIToken,
                                    IConstructorModifiers _ConstructorModifiers,
                                    IConstructorModifier _ConstructorModifier)
        {
            super(leftIToken, rightIToken);

            this._ConstructorModifiers = _ConstructorModifiers;
            ((Ast) _ConstructorModifiers).setParent(this);
            this._ConstructorModifier = _ConstructorModifier;
            ((Ast) _ConstructorModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConstructorModifiers);
            list.add(_ConstructorModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConstructorModifiers)) return false;
            if (! super.equals(o)) return false;
            ConstructorModifiers other = (ConstructorModifiers) o;
            if (! _ConstructorModifiers.equals(other._ConstructorModifiers)) return false;
            if (! _ConstructorModifier.equals(other._ConstructorModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConstructorModifiers.hashCode());
            hash = hash * 31 + (_ConstructorModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ConstructorModifiers.accept(v);
                _ConstructorModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 171:  ConstructorBody ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
     *</b>
     */
    static public class ConstructorBody extends Ast implements IConstructorBody
    {
        private AstToken _LBRACE;
        private IExplicitConstructorInvocationopt _ExplicitConstructorInvocationopt;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getExplicitConstructorInvocationopt</b> may be <b>null</b>
         */
        public IExplicitConstructorInvocationopt getExplicitConstructorInvocationopt() { return _ExplicitConstructorInvocationopt; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public ConstructorBody(IToken leftIToken, IToken rightIToken,
                               AstToken _LBRACE,
                               IExplicitConstructorInvocationopt _ExplicitConstructorInvocationopt,
                               IBlockStatementsopt _BlockStatementsopt,
                               AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._ExplicitConstructorInvocationopt = _ExplicitConstructorInvocationopt;
            if (_ExplicitConstructorInvocationopt != null) ((Ast) _ExplicitConstructorInvocationopt).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_ExplicitConstructorInvocationopt);
            list.add(_BlockStatementsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConstructorBody)) return false;
            if (! super.equals(o)) return false;
            ConstructorBody other = (ConstructorBody) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_ExplicitConstructorInvocationopt == null)
                if (other._ExplicitConstructorInvocationopt != null) return false;
                else; // continue
            else if (! _ExplicitConstructorInvocationopt.equals(other._ExplicitConstructorInvocationopt)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else; // continue
            else if (! _BlockStatementsopt.equals(other._BlockStatementsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_ExplicitConstructorInvocationopt == null ? 0 : _ExplicitConstructorInvocationopt.hashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_ExplicitConstructorInvocationopt != null) _ExplicitConstructorInvocationopt.accept(v);
                if (_BlockStatementsopt != null) _BlockStatementsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 175:  EnumDeclaration ::= ClassModifiersopt enum identifier Interfacesopt EnumBody
     *</b>
     */
    static public class EnumDeclaration extends Ast implements IEnumDeclaration
    {
        private IClassModifiersopt _ClassModifiersopt;
        private AstToken _enum;
        private identifier _identifier;
        private Interfaces _Interfacesopt;
        private EnumBody _EnumBody;

        /**
         * The value returned by <b>getClassModifiersopt</b> may be <b>null</b>
         */
        public IClassModifiersopt getClassModifiersopt() { return _ClassModifiersopt; }
        public AstToken getenum() { return _enum; }
        public identifier getidentifier() { return _identifier; }
        /**
         * The value returned by <b>getInterfacesopt</b> may be <b>null</b>
         */
        public Interfaces getInterfacesopt() { return _Interfacesopt; }
        public EnumBody getEnumBody() { return _EnumBody; }

        public EnumDeclaration(IToken leftIToken, IToken rightIToken,
                               IClassModifiersopt _ClassModifiersopt,
                               AstToken _enum,
                               identifier _identifier,
                               Interfaces _Interfacesopt,
                               EnumBody _EnumBody)
        {
            super(leftIToken, rightIToken);

            this._ClassModifiersopt = _ClassModifiersopt;
            if (_ClassModifiersopt != null) ((Ast) _ClassModifiersopt).setParent(this);
            this._enum = _enum;
            ((Ast) _enum).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._Interfacesopt = _Interfacesopt;
            if (_Interfacesopt != null) ((Ast) _Interfacesopt).setParent(this);
            this._EnumBody = _EnumBody;
            ((Ast) _EnumBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassModifiersopt);
            list.add(_enum);
            list.add(_identifier);
            list.add(_Interfacesopt);
            list.add(_EnumBody);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EnumDeclaration)) return false;
            if (! super.equals(o)) return false;
            EnumDeclaration other = (EnumDeclaration) o;
            if (_ClassModifiersopt == null)
                if (other._ClassModifiersopt != null) return false;
                else; // continue
            else if (! _ClassModifiersopt.equals(other._ClassModifiersopt)) return false;
            if (! _enum.equals(other._enum)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (_Interfacesopt == null)
                if (other._Interfacesopt != null) return false;
                else; // continue
            else if (! _Interfacesopt.equals(other._Interfacesopt)) return false;
            if (! _EnumBody.equals(other._EnumBody)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassModifiersopt == null ? 0 : _ClassModifiersopt.hashCode());
            hash = hash * 31 + (_enum.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_Interfacesopt == null ? 0 : _Interfacesopt.hashCode());
            hash = hash * 31 + (_EnumBody.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_ClassModifiersopt != null) _ClassModifiersopt.accept(v);
                _enum.accept(v);
                _identifier.accept(v);
                if (_Interfacesopt != null) _Interfacesopt.accept(v);
                _EnumBody.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 176:  EnumBody ::= { EnumConstantsopt ,opt EnumBodyDeclarationsopt }
     *</b>
     */
    static public class EnumBody extends Ast implements IEnumBody
    {
        private AstToken _LBRACE;
        private IEnumConstantsopt _EnumConstantsopt;
        private Commaopt _Commaopt;
        private EnumBodyDeclarations _EnumBodyDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getEnumConstantsopt</b> may be <b>null</b>
         */
        public IEnumConstantsopt getEnumConstantsopt() { return _EnumConstantsopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public Commaopt getCommaopt() { return _Commaopt; }
        /**
         * The value returned by <b>getEnumBodyDeclarationsopt</b> may be <b>null</b>
         */
        public EnumBodyDeclarations getEnumBodyDeclarationsopt() { return _EnumBodyDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public EnumBody(IToken leftIToken, IToken rightIToken,
                        AstToken _LBRACE,
                        IEnumConstantsopt _EnumConstantsopt,
                        Commaopt _Commaopt,
                        EnumBodyDeclarations _EnumBodyDeclarationsopt,
                        AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._EnumConstantsopt = _EnumConstantsopt;
            if (_EnumConstantsopt != null) ((Ast) _EnumConstantsopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt != null) ((Ast) _Commaopt).setParent(this);
            this._EnumBodyDeclarationsopt = _EnumBodyDeclarationsopt;
            if (_EnumBodyDeclarationsopt != null) ((Ast) _EnumBodyDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_EnumConstantsopt);
            list.add(_Commaopt);
            list.add(_EnumBodyDeclarationsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EnumBody)) return false;
            if (! super.equals(o)) return false;
            EnumBody other = (EnumBody) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_EnumConstantsopt == null)
                if (other._EnumConstantsopt != null) return false;
                else; // continue
            else if (! _EnumConstantsopt.equals(other._EnumConstantsopt)) return false;
            if (_Commaopt == null)
                if (other._Commaopt != null) return false;
                else; // continue
            else if (! _Commaopt.equals(other._Commaopt)) return false;
            if (_EnumBodyDeclarationsopt == null)
                if (other._EnumBodyDeclarationsopt != null) return false;
                else; // continue
            else if (! _EnumBodyDeclarationsopt.equals(other._EnumBodyDeclarationsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_EnumConstantsopt == null ? 0 : _EnumConstantsopt.hashCode());
            hash = hash * 31 + (_Commaopt == null ? 0 : _Commaopt.hashCode());
            hash = hash * 31 + (_EnumBodyDeclarationsopt == null ? 0 : _EnumBodyDeclarationsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_EnumConstantsopt != null) _EnumConstantsopt.accept(v);
                if (_Commaopt != null) _Commaopt.accept(v);
                if (_EnumBodyDeclarationsopt != null) _EnumBodyDeclarationsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 177:  EnumConstants ::= EnumConstant
     *</em>
     *<p>
     *<b>
     *<li>Rule 178:  EnumConstants ::= EnumConstants , EnumConstant
     *</b>
     */
    static public class EnumConstants extends Ast implements IEnumConstants
    {
        private IEnumConstants _EnumConstants;
        private AstToken _COMMA;
        private IEnumConstant _EnumConstant;

        public IEnumConstants getEnumConstants() { return _EnumConstants; }
        public AstToken getCOMMA() { return _COMMA; }
        public IEnumConstant getEnumConstant() { return _EnumConstant; }

        public EnumConstants(IToken leftIToken, IToken rightIToken,
                             IEnumConstants _EnumConstants,
                             AstToken _COMMA,
                             IEnumConstant _EnumConstant)
        {
            super(leftIToken, rightIToken);

            this._EnumConstants = _EnumConstants;
            ((Ast) _EnumConstants).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._EnumConstant = _EnumConstant;
            ((Ast) _EnumConstant).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_EnumConstants);
            list.add(_COMMA);
            list.add(_EnumConstant);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EnumConstants)) return false;
            if (! super.equals(o)) return false;
            EnumConstants other = (EnumConstants) o;
            if (! _EnumConstants.equals(other._EnumConstants)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _EnumConstant.equals(other._EnumConstant)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_EnumConstants.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_EnumConstant.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _EnumConstants.accept(v);
                _COMMA.accept(v);
                _EnumConstant.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 307:  EnumConstant ::= identifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 179:  EnumConstant ::= Annotationsopt identifier Argumentsopt ClassBodyopt
     *</b>
     */
    static public class EnumConstant extends Ast implements IEnumConstant
    {
        private IAnnotationsopt _Annotationsopt;
        private identifier _identifier;
        private Arguments _Argumentsopt;
        private ClassBody _ClassBodyopt;

        /**
         * The value returned by <b>getAnnotationsopt</b> may be <b>null</b>
         */
        public IAnnotationsopt getAnnotationsopt() { return _Annotationsopt; }
        public identifier getidentifier() { return _identifier; }
        /**
         * The value returned by <b>getArgumentsopt</b> may be <b>null</b>
         */
        public Arguments getArgumentsopt() { return _Argumentsopt; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public ClassBody getClassBodyopt() { return _ClassBodyopt; }

        public EnumConstant(IToken leftIToken, IToken rightIToken,
                            IAnnotationsopt _Annotationsopt,
                            identifier _identifier,
                            Arguments _Argumentsopt,
                            ClassBody _ClassBodyopt)
        {
            super(leftIToken, rightIToken);

            this._Annotationsopt = _Annotationsopt;
            if (_Annotationsopt != null) ((Ast) _Annotationsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._Argumentsopt = _Argumentsopt;
            if (_Argumentsopt != null) ((Ast) _Argumentsopt).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt != null) ((Ast) _ClassBodyopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Annotationsopt);
            list.add(_identifier);
            list.add(_Argumentsopt);
            list.add(_ClassBodyopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EnumConstant)) return false;
            if (! super.equals(o)) return false;
            EnumConstant other = (EnumConstant) o;
            if (_Annotationsopt == null)
                if (other._Annotationsopt != null) return false;
                else; // continue
            else if (! _Annotationsopt.equals(other._Annotationsopt)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (_Argumentsopt == null)
                if (other._Argumentsopt != null) return false;
                else; // continue
            else if (! _Argumentsopt.equals(other._Argumentsopt)) return false;
            if (_ClassBodyopt == null)
                if (other._ClassBodyopt != null) return false;
                else; // continue
            else if (! _ClassBodyopt.equals(other._ClassBodyopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Annotationsopt == null ? 0 : _Annotationsopt.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_Argumentsopt == null ? 0 : _Argumentsopt.hashCode());
            hash = hash * 31 + (_ClassBodyopt == null ? 0 : _ClassBodyopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_Annotationsopt != null) _Annotationsopt.accept(v);
                _identifier.accept(v);
                if (_Argumentsopt != null) _Argumentsopt.accept(v);
                if (_ClassBodyopt != null) _ClassBodyopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 180:  Arguments ::= ( ArgumentListopt )
     *</b>
     */
    static public class Arguments extends Ast implements IArguments
    {
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public Arguments(IToken leftIToken, IToken rightIToken,
                         AstToken _LPAREN,
                         IArgumentListopt _ArgumentListopt,
                         AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Arguments)) return false;
            if (! super.equals(o)) return false;
            Arguments other = (Arguments) o;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 181:  EnumBodyDeclarations ::= ; ClassBodyDeclarationsopt
     *</b>
     */
    static public class EnumBodyDeclarations extends Ast implements IEnumBodyDeclarations
    {
        private AstToken _SEMICOLON;
        private IClassBodyDeclarationsopt _ClassBodyDeclarationsopt;

        public AstToken getSEMICOLON() { return _SEMICOLON; }
        /**
         * The value returned by <b>getClassBodyDeclarationsopt</b> may be <b>null</b>
         */
        public IClassBodyDeclarationsopt getClassBodyDeclarationsopt() { return _ClassBodyDeclarationsopt; }

        public EnumBodyDeclarations(IToken leftIToken, IToken rightIToken,
                                    AstToken _SEMICOLON,
                                    IClassBodyDeclarationsopt _ClassBodyDeclarationsopt)
        {
            super(leftIToken, rightIToken);

            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt;
            if (_ClassBodyDeclarationsopt != null) ((Ast) _ClassBodyDeclarationsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_SEMICOLON);
            list.add(_ClassBodyDeclarationsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EnumBodyDeclarations)) return false;
            if (! super.equals(o)) return false;
            EnumBodyDeclarations other = (EnumBodyDeclarations) o;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            if (_ClassBodyDeclarationsopt == null)
                if (other._ClassBodyDeclarationsopt != null) return false;
                else; // continue
            else if (! _ClassBodyDeclarationsopt.equals(other._ClassBodyDeclarationsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_SEMICOLON.hashCode());
            hash = hash * 31 + (_ClassBodyDeclarationsopt == null ? 0 : _ClassBodyDeclarationsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _SEMICOLON.accept(v);
                if (_ClassBodyDeclarationsopt != null) _ClassBodyDeclarationsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 184:  NormalInterfaceDeclaration ::= InterfaceModifiersopt interface identifier TypeParametersopt ExtendsInterfacesopt InterfaceBody
     *</b>
     */
    static public class NormalInterfaceDeclaration extends Ast implements INormalInterfaceDeclaration
    {
        private IInterfaceModifiersopt _InterfaceModifiersopt;
        private AstToken _interface;
        private identifier _identifier;
        private TypeParameters _TypeParametersopt;
        private IExtendsInterfacesopt _ExtendsInterfacesopt;
        private InterfaceBody _InterfaceBody;

        /**
         * The value returned by <b>getInterfaceModifiersopt</b> may be <b>null</b>
         */
        public IInterfaceModifiersopt getInterfaceModifiersopt() { return _InterfaceModifiersopt; }
        public AstToken getinterface() { return _interface; }
        public identifier getidentifier() { return _identifier; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        /**
         * The value returned by <b>getExtendsInterfacesopt</b> may be <b>null</b>
         */
        public IExtendsInterfacesopt getExtendsInterfacesopt() { return _ExtendsInterfacesopt; }
        public InterfaceBody getInterfaceBody() { return _InterfaceBody; }

        public NormalInterfaceDeclaration(IToken leftIToken, IToken rightIToken,
                                          IInterfaceModifiersopt _InterfaceModifiersopt,
                                          AstToken _interface,
                                          identifier _identifier,
                                          TypeParameters _TypeParametersopt,
                                          IExtendsInterfacesopt _ExtendsInterfacesopt,
                                          InterfaceBody _InterfaceBody)
        {
            super(leftIToken, rightIToken);

            this._InterfaceModifiersopt = _InterfaceModifiersopt;
            if (_InterfaceModifiersopt != null) ((Ast) _InterfaceModifiersopt).setParent(this);
            this._interface = _interface;
            ((Ast) _interface).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._ExtendsInterfacesopt = _ExtendsInterfacesopt;
            if (_ExtendsInterfacesopt != null) ((Ast) _ExtendsInterfacesopt).setParent(this);
            this._InterfaceBody = _InterfaceBody;
            ((Ast) _InterfaceBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_InterfaceModifiersopt);
            list.add(_interface);
            list.add(_identifier);
            list.add(_TypeParametersopt);
            list.add(_ExtendsInterfacesopt);
            list.add(_InterfaceBody);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof NormalInterfaceDeclaration)) return false;
            if (! super.equals(o)) return false;
            NormalInterfaceDeclaration other = (NormalInterfaceDeclaration) o;
            if (_InterfaceModifiersopt == null)
                if (other._InterfaceModifiersopt != null) return false;
                else; // continue
            else if (! _InterfaceModifiersopt.equals(other._InterfaceModifiersopt)) return false;
            if (! _interface.equals(other._interface)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else; // continue
            else if (! _TypeParametersopt.equals(other._TypeParametersopt)) return false;
            if (_ExtendsInterfacesopt == null)
                if (other._ExtendsInterfacesopt != null) return false;
                else; // continue
            else if (! _ExtendsInterfacesopt.equals(other._ExtendsInterfacesopt)) return false;
            if (! _InterfaceBody.equals(other._InterfaceBody)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_InterfaceModifiersopt == null ? 0 : _InterfaceModifiersopt.hashCode());
            hash = hash * 31 + (_interface.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.hashCode());
            hash = hash * 31 + (_ExtendsInterfacesopt == null ? 0 : _ExtendsInterfacesopt.hashCode());
            hash = hash * 31 + (_InterfaceBody.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_InterfaceModifiersopt != null) _InterfaceModifiersopt.accept(v);
                _interface.accept(v);
                _identifier.accept(v);
                if (_TypeParametersopt != null) _TypeParametersopt.accept(v);
                if (_ExtendsInterfacesopt != null) _ExtendsInterfacesopt.accept(v);
                _InterfaceBody.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 185:  InterfaceModifiers ::= InterfaceModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 186:  InterfaceModifiers ::= InterfaceModifiers InterfaceModifier
     *</b>
     */
    static public class InterfaceModifiers extends Ast implements IInterfaceModifiers
    {
        private IInterfaceModifiers _InterfaceModifiers;
        private IInterfaceModifier _InterfaceModifier;

        public IInterfaceModifiers getInterfaceModifiers() { return _InterfaceModifiers; }
        public IInterfaceModifier getInterfaceModifier() { return _InterfaceModifier; }

        public InterfaceModifiers(IToken leftIToken, IToken rightIToken,
                                  IInterfaceModifiers _InterfaceModifiers,
                                  IInterfaceModifier _InterfaceModifier)
        {
            super(leftIToken, rightIToken);

            this._InterfaceModifiers = _InterfaceModifiers;
            ((Ast) _InterfaceModifiers).setParent(this);
            this._InterfaceModifier = _InterfaceModifier;
            ((Ast) _InterfaceModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_InterfaceModifiers);
            list.add(_InterfaceModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof InterfaceModifiers)) return false;
            if (! super.equals(o)) return false;
            InterfaceModifiers other = (InterfaceModifiers) o;
            if (! _InterfaceModifiers.equals(other._InterfaceModifiers)) return false;
            if (! _InterfaceModifier.equals(other._InterfaceModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_InterfaceModifiers.hashCode());
            hash = hash * 31 + (_InterfaceModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _InterfaceModifiers.accept(v);
                _InterfaceModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 196:  InterfaceBody ::= { InterfaceMemberDeclarationsopt }
     *</b>
     */
    static public class InterfaceBody extends Ast implements IInterfaceBody
    {
        private AstToken _LBRACE;
        private IInterfaceMemberDeclarationsopt _InterfaceMemberDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getInterfaceMemberDeclarationsopt</b> may be <b>null</b>
         */
        public IInterfaceMemberDeclarationsopt getInterfaceMemberDeclarationsopt() { return _InterfaceMemberDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public InterfaceBody(IToken leftIToken, IToken rightIToken,
                             AstToken _LBRACE,
                             IInterfaceMemberDeclarationsopt _InterfaceMemberDeclarationsopt,
                             AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._InterfaceMemberDeclarationsopt = _InterfaceMemberDeclarationsopt;
            if (_InterfaceMemberDeclarationsopt != null) ((Ast) _InterfaceMemberDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_InterfaceMemberDeclarationsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof InterfaceBody)) return false;
            if (! super.equals(o)) return false;
            InterfaceBody other = (InterfaceBody) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_InterfaceMemberDeclarationsopt == null)
                if (other._InterfaceMemberDeclarationsopt != null) return false;
                else; // continue
            else if (! _InterfaceMemberDeclarationsopt.equals(other._InterfaceMemberDeclarationsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_InterfaceMemberDeclarationsopt == null ? 0 : _InterfaceMemberDeclarationsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_InterfaceMemberDeclarationsopt != null) _InterfaceMemberDeclarationsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 197:  InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 198:  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration
     *</b>
     */
    static public class InterfaceMemberDeclarations extends Ast implements IInterfaceMemberDeclarations
    {
        private IInterfaceMemberDeclarations _InterfaceMemberDeclarations;
        private IInterfaceMemberDeclaration _InterfaceMemberDeclaration;

        public IInterfaceMemberDeclarations getInterfaceMemberDeclarations() { return _InterfaceMemberDeclarations; }
        public IInterfaceMemberDeclaration getInterfaceMemberDeclaration() { return _InterfaceMemberDeclaration; }

        public InterfaceMemberDeclarations(IToken leftIToken, IToken rightIToken,
                                           IInterfaceMemberDeclarations _InterfaceMemberDeclarations,
                                           IInterfaceMemberDeclaration _InterfaceMemberDeclaration)
        {
            super(leftIToken, rightIToken);

            this._InterfaceMemberDeclarations = _InterfaceMemberDeclarations;
            ((Ast) _InterfaceMemberDeclarations).setParent(this);
            this._InterfaceMemberDeclaration = _InterfaceMemberDeclaration;
            ((Ast) _InterfaceMemberDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_InterfaceMemberDeclarations);
            list.add(_InterfaceMemberDeclaration);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof InterfaceMemberDeclarations)) return false;
            if (! super.equals(o)) return false;
            InterfaceMemberDeclarations other = (InterfaceMemberDeclarations) o;
            if (! _InterfaceMemberDeclarations.equals(other._InterfaceMemberDeclarations)) return false;
            if (! _InterfaceMemberDeclaration.equals(other._InterfaceMemberDeclaration)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_InterfaceMemberDeclarations.hashCode());
            hash = hash * 31 + (_InterfaceMemberDeclaration.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _InterfaceMemberDeclarations.accept(v);
                _InterfaceMemberDeclaration.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 199:  InterfaceMemberDeclaration ::= ConstantDeclaration
     *<li>Rule 200:  InterfaceMemberDeclaration ::= AbstractMethodDeclaration
     *<li>Rule 201:  InterfaceMemberDeclaration ::= ClassDeclaration
     *<li>Rule 202:  InterfaceMemberDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 203:  InterfaceMemberDeclaration ::= ;
     *</b>
     */
    static public class InterfaceMemberDeclaration extends AstToken implements IInterfaceMemberDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public InterfaceMemberDeclaration(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 204:  ConstantDeclaration ::= ConstantModifiersopt Type VariableDeclarators
     *</b>
     */
    static public class ConstantDeclaration extends Ast implements IConstantDeclaration
    {
        private IConstantModifiersopt _ConstantModifiersopt;
        private IType _Type;
        private IVariableDeclarators _VariableDeclarators;

        /**
         * The value returned by <b>getConstantModifiersopt</b> may be <b>null</b>
         */
        public IConstantModifiersopt getConstantModifiersopt() { return _ConstantModifiersopt; }
        public IType getType() { return _Type; }
        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }

        public ConstantDeclaration(IToken leftIToken, IToken rightIToken,
                                   IConstantModifiersopt _ConstantModifiersopt,
                                   IType _Type,
                                   IVariableDeclarators _VariableDeclarators)
        {
            super(leftIToken, rightIToken);

            this._ConstantModifiersopt = _ConstantModifiersopt;
            if (_ConstantModifiersopt != null) ((Ast) _ConstantModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConstantModifiersopt);
            list.add(_Type);
            list.add(_VariableDeclarators);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConstantDeclaration)) return false;
            if (! super.equals(o)) return false;
            ConstantDeclaration other = (ConstantDeclaration) o;
            if (_ConstantModifiersopt == null)
                if (other._ConstantModifiersopt != null) return false;
                else; // continue
            else if (! _ConstantModifiersopt.equals(other._ConstantModifiersopt)) return false;
            if (! _Type.equals(other._Type)) return false;
            if (! _VariableDeclarators.equals(other._VariableDeclarators)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConstantModifiersopt == null ? 0 : _ConstantModifiersopt.hashCode());
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_VariableDeclarators.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_ConstantModifiersopt != null) _ConstantModifiersopt.accept(v);
                _Type.accept(v);
                _VariableDeclarators.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 205:  ConstantModifiers ::= ConstantModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 206:  ConstantModifiers ::= ConstantModifiers ConstantModifier
     *</b>
     */
    static public class ConstantModifiers extends Ast implements IConstantModifiers
    {
        private IConstantModifiers _ConstantModifiers;
        private IConstantModifier _ConstantModifier;

        public IConstantModifiers getConstantModifiers() { return _ConstantModifiers; }
        public IConstantModifier getConstantModifier() { return _ConstantModifier; }

        public ConstantModifiers(IToken leftIToken, IToken rightIToken,
                                 IConstantModifiers _ConstantModifiers,
                                 IConstantModifier _ConstantModifier)
        {
            super(leftIToken, rightIToken);

            this._ConstantModifiers = _ConstantModifiers;
            ((Ast) _ConstantModifiers).setParent(this);
            this._ConstantModifier = _ConstantModifier;
            ((Ast) _ConstantModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConstantModifiers);
            list.add(_ConstantModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConstantModifiers)) return false;
            if (! super.equals(o)) return false;
            ConstantModifiers other = (ConstantModifiers) o;
            if (! _ConstantModifiers.equals(other._ConstantModifiers)) return false;
            if (! _ConstantModifier.equals(other._ConstantModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConstantModifiers.hashCode());
            hash = hash * 31 + (_ConstantModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ConstantModifiers.accept(v);
                _ConstantModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 211:  AbstractMethodDeclaration ::= AbstractMethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt ;
     *</b>
     */
    static public class AbstractMethodDeclaration extends Ast implements IAbstractMethodDeclaration
    {
        private IAbstractMethodModifiersopt _AbstractMethodModifiersopt;
        private TypeParameters _TypeParametersopt;
        private IResultType _ResultType;
        private IMethodDeclarator _MethodDeclarator;
        private Throws _Throwsopt;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getAbstractMethodModifiersopt</b> may be <b>null</b>
         */
        public IAbstractMethodModifiersopt getAbstractMethodModifiersopt() { return _AbstractMethodModifiersopt; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public IResultType getResultType() { return _ResultType; }
        public IMethodDeclarator getMethodDeclarator() { return _MethodDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public Throws getThrowsopt() { return _Throwsopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public AbstractMethodDeclaration(IToken leftIToken, IToken rightIToken,
                                         IAbstractMethodModifiersopt _AbstractMethodModifiersopt,
                                         TypeParameters _TypeParametersopt,
                                         IResultType _ResultType,
                                         IMethodDeclarator _MethodDeclarator,
                                         Throws _Throwsopt,
                                         AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt;
            if (_AbstractMethodModifiersopt != null) ((Ast) _AbstractMethodModifiersopt).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._ResultType = _ResultType;
            ((Ast) _ResultType).setParent(this);
            this._MethodDeclarator = _MethodDeclarator;
            ((Ast) _MethodDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt != null) ((Ast) _Throwsopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AbstractMethodModifiersopt);
            list.add(_TypeParametersopt);
            list.add(_ResultType);
            list.add(_MethodDeclarator);
            list.add(_Throwsopt);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AbstractMethodDeclaration)) return false;
            if (! super.equals(o)) return false;
            AbstractMethodDeclaration other = (AbstractMethodDeclaration) o;
            if (_AbstractMethodModifiersopt == null)
                if (other._AbstractMethodModifiersopt != null) return false;
                else; // continue
            else if (! _AbstractMethodModifiersopt.equals(other._AbstractMethodModifiersopt)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else; // continue
            else if (! _TypeParametersopt.equals(other._TypeParametersopt)) return false;
            if (! _ResultType.equals(other._ResultType)) return false;
            if (! _MethodDeclarator.equals(other._MethodDeclarator)) return false;
            if (_Throwsopt == null)
                if (other._Throwsopt != null) return false;
                else; // continue
            else if (! _Throwsopt.equals(other._Throwsopt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AbstractMethodModifiersopt == null ? 0 : _AbstractMethodModifiersopt.hashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.hashCode());
            hash = hash * 31 + (_ResultType.hashCode());
            hash = hash * 31 + (_MethodDeclarator.hashCode());
            hash = hash * 31 + (_Throwsopt == null ? 0 : _Throwsopt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_AbstractMethodModifiersopt != null) _AbstractMethodModifiersopt.accept(v);
                if (_TypeParametersopt != null) _TypeParametersopt.accept(v);
                _ResultType.accept(v);
                _MethodDeclarator.accept(v);
                if (_Throwsopt != null) _Throwsopt.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 212:  AbstractMethodModifiers ::= AbstractMethodModifier
     *</em>
     *<p>
     *<b>
     *<li>Rule 213:  AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier
     *</b>
     */
    static public class AbstractMethodModifiers extends Ast implements IAbstractMethodModifiers
    {
        private IAbstractMethodModifiers _AbstractMethodModifiers;
        private IAbstractMethodModifier _AbstractMethodModifier;

        public IAbstractMethodModifiers getAbstractMethodModifiers() { return _AbstractMethodModifiers; }
        public IAbstractMethodModifier getAbstractMethodModifier() { return _AbstractMethodModifier; }

        public AbstractMethodModifiers(IToken leftIToken, IToken rightIToken,
                                       IAbstractMethodModifiers _AbstractMethodModifiers,
                                       IAbstractMethodModifier _AbstractMethodModifier)
        {
            super(leftIToken, rightIToken);

            this._AbstractMethodModifiers = _AbstractMethodModifiers;
            ((Ast) _AbstractMethodModifiers).setParent(this);
            this._AbstractMethodModifier = _AbstractMethodModifier;
            ((Ast) _AbstractMethodModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AbstractMethodModifiers);
            list.add(_AbstractMethodModifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AbstractMethodModifiers)) return false;
            if (! super.equals(o)) return false;
            AbstractMethodModifiers other = (AbstractMethodModifiers) o;
            if (! _AbstractMethodModifiers.equals(other._AbstractMethodModifiers)) return false;
            if (! _AbstractMethodModifier.equals(other._AbstractMethodModifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AbstractMethodModifiers.hashCode());
            hash = hash * 31 + (_AbstractMethodModifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AbstractMethodModifiers.accept(v);
                _AbstractMethodModifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 217:  AnnotationTypeDeclaration ::= InterfaceModifiersopt @ interface identifier AnnotationTypeBody
     *</b>
     */
    static public class AnnotationTypeDeclaration extends Ast implements IAnnotationTypeDeclaration
    {
        private IInterfaceModifiersopt _InterfaceModifiersopt;
        private AstToken _AT;
        private AstToken _interface;
        private identifier _identifier;
        private AnnotationTypeBody _AnnotationTypeBody;

        /**
         * The value returned by <b>getInterfaceModifiersopt</b> may be <b>null</b>
         */
        public IInterfaceModifiersopt getInterfaceModifiersopt() { return _InterfaceModifiersopt; }
        public AstToken getAT() { return _AT; }
        public AstToken getinterface() { return _interface; }
        public identifier getidentifier() { return _identifier; }
        public AnnotationTypeBody getAnnotationTypeBody() { return _AnnotationTypeBody; }

        public AnnotationTypeDeclaration(IToken leftIToken, IToken rightIToken,
                                         IInterfaceModifiersopt _InterfaceModifiersopt,
                                         AstToken _AT,
                                         AstToken _interface,
                                         identifier _identifier,
                                         AnnotationTypeBody _AnnotationTypeBody)
        {
            super(leftIToken, rightIToken);

            this._InterfaceModifiersopt = _InterfaceModifiersopt;
            if (_InterfaceModifiersopt != null) ((Ast) _InterfaceModifiersopt).setParent(this);
            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._interface = _interface;
            ((Ast) _interface).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._AnnotationTypeBody = _AnnotationTypeBody;
            ((Ast) _AnnotationTypeBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_InterfaceModifiersopt);
            list.add(_AT);
            list.add(_interface);
            list.add(_identifier);
            list.add(_AnnotationTypeBody);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AnnotationTypeDeclaration)) return false;
            if (! super.equals(o)) return false;
            AnnotationTypeDeclaration other = (AnnotationTypeDeclaration) o;
            if (_InterfaceModifiersopt == null)
                if (other._InterfaceModifiersopt != null) return false;
                else; // continue
            else if (! _InterfaceModifiersopt.equals(other._InterfaceModifiersopt)) return false;
            if (! _AT.equals(other._AT)) return false;
            if (! _interface.equals(other._interface)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _AnnotationTypeBody.equals(other._AnnotationTypeBody)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_InterfaceModifiersopt == null ? 0 : _InterfaceModifiersopt.hashCode());
            hash = hash * 31 + (_AT.hashCode());
            hash = hash * 31 + (_interface.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_AnnotationTypeBody.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_InterfaceModifiersopt != null) _InterfaceModifiersopt.accept(v);
                _AT.accept(v);
                _interface.accept(v);
                _identifier.accept(v);
                _AnnotationTypeBody.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 218:  AnnotationTypeBody ::= { AnnotationTypeElementDeclarationsopt }
     *</b>
     */
    static public class AnnotationTypeBody extends Ast implements IAnnotationTypeBody
    {
        private AstToken _LBRACE;
        private IAnnotationTypeElementDeclarationsopt _AnnotationTypeElementDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getAnnotationTypeElementDeclarationsopt</b> may be <b>null</b>
         */
        public IAnnotationTypeElementDeclarationsopt getAnnotationTypeElementDeclarationsopt() { return _AnnotationTypeElementDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public AnnotationTypeBody(IToken leftIToken, IToken rightIToken,
                                  AstToken _LBRACE,
                                  IAnnotationTypeElementDeclarationsopt _AnnotationTypeElementDeclarationsopt,
                                  AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._AnnotationTypeElementDeclarationsopt = _AnnotationTypeElementDeclarationsopt;
            if (_AnnotationTypeElementDeclarationsopt != null) ((Ast) _AnnotationTypeElementDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_AnnotationTypeElementDeclarationsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AnnotationTypeBody)) return false;
            if (! super.equals(o)) return false;
            AnnotationTypeBody other = (AnnotationTypeBody) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_AnnotationTypeElementDeclarationsopt == null)
                if (other._AnnotationTypeElementDeclarationsopt != null) return false;
                else; // continue
            else if (! _AnnotationTypeElementDeclarationsopt.equals(other._AnnotationTypeElementDeclarationsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_AnnotationTypeElementDeclarationsopt == null ? 0 : _AnnotationTypeElementDeclarationsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_AnnotationTypeElementDeclarationsopt != null) _AnnotationTypeElementDeclarationsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 219:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration
     *</em>
     *<p>
     *<b>
     *<li>Rule 220:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration
     *</b>
     */
    static public class AnnotationTypeElementDeclarations extends Ast implements IAnnotationTypeElementDeclarations
    {
        private IAnnotationTypeElementDeclarations _AnnotationTypeElementDeclarations;
        private IAnnotationTypeElementDeclaration _AnnotationTypeElementDeclaration;

        public IAnnotationTypeElementDeclarations getAnnotationTypeElementDeclarations() { return _AnnotationTypeElementDeclarations; }
        public IAnnotationTypeElementDeclaration getAnnotationTypeElementDeclaration() { return _AnnotationTypeElementDeclaration; }

        public AnnotationTypeElementDeclarations(IToken leftIToken, IToken rightIToken,
                                                 IAnnotationTypeElementDeclarations _AnnotationTypeElementDeclarations,
                                                 IAnnotationTypeElementDeclaration _AnnotationTypeElementDeclaration)
        {
            super(leftIToken, rightIToken);

            this._AnnotationTypeElementDeclarations = _AnnotationTypeElementDeclarations;
            ((Ast) _AnnotationTypeElementDeclarations).setParent(this);
            this._AnnotationTypeElementDeclaration = _AnnotationTypeElementDeclaration;
            ((Ast) _AnnotationTypeElementDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AnnotationTypeElementDeclarations);
            list.add(_AnnotationTypeElementDeclaration);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AnnotationTypeElementDeclarations)) return false;
            if (! super.equals(o)) return false;
            AnnotationTypeElementDeclarations other = (AnnotationTypeElementDeclarations) o;
            if (! _AnnotationTypeElementDeclarations.equals(other._AnnotationTypeElementDeclarations)) return false;
            if (! _AnnotationTypeElementDeclaration.equals(other._AnnotationTypeElementDeclaration)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AnnotationTypeElementDeclarations.hashCode());
            hash = hash * 31 + (_AnnotationTypeElementDeclaration.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AnnotationTypeElementDeclarations.accept(v);
                _AnnotationTypeElementDeclaration.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 228:  DefaultValue ::= default ElementValue
     *</b>
     */
    static public class DefaultValue extends Ast implements IDefaultValue
    {
        private AstToken _default;
        private IElementValue _ElementValue;

        public AstToken getdefault() { return _default; }
        public IElementValue getElementValue() { return _ElementValue; }

        public DefaultValue(IToken leftIToken, IToken rightIToken,
                            AstToken _default,
                            IElementValue _ElementValue)
        {
            super(leftIToken, rightIToken);

            this._default = _default;
            ((Ast) _default).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_default);
            list.add(_ElementValue);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof DefaultValue)) return false;
            if (! super.equals(o)) return false;
            DefaultValue other = (DefaultValue) o;
            if (! _default.equals(other._default)) return false;
            if (! _ElementValue.equals(other._ElementValue)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_default.hashCode());
            hash = hash * 31 + (_ElementValue.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _default.accept(v);
                _ElementValue.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 229:  Annotations ::= Annotation
     *</em>
     *<p>
     *<b>
     *<li>Rule 230:  Annotations ::= Annotations Annotation
     *</b>
     */
    static public class Annotations extends Ast implements IAnnotations
    {
        private IAnnotations _Annotations;
        private IAnnotation _Annotation;

        public IAnnotations getAnnotations() { return _Annotations; }
        public IAnnotation getAnnotation() { return _Annotation; }

        public Annotations(IToken leftIToken, IToken rightIToken,
                           IAnnotations _Annotations,
                           IAnnotation _Annotation)
        {
            super(leftIToken, rightIToken);

            this._Annotations = _Annotations;
            ((Ast) _Annotations).setParent(this);
            this._Annotation = _Annotation;
            ((Ast) _Annotation).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Annotations);
            list.add(_Annotation);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Annotations)) return false;
            if (! super.equals(o)) return false;
            Annotations other = (Annotations) o;
            if (! _Annotations.equals(other._Annotations)) return false;
            if (! _Annotation.equals(other._Annotation)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Annotations.hashCode());
            hash = hash * 31 + (_Annotation.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Annotations.accept(v);
                _Annotation.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 234:  NormalAnnotation ::= @ TypeName ( ElementValuePairsopt )
     *</b>
     */
    static public class NormalAnnotation extends Ast implements INormalAnnotation
    {
        private AstToken _AT;
        private ITypeName _TypeName;
        private AstToken _LPAREN;
        private IElementValuePairsopt _ElementValuePairsopt;
        private AstToken _RPAREN;

        public AstToken getAT() { return _AT; }
        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getElementValuePairsopt</b> may be <b>null</b>
         */
        public IElementValuePairsopt getElementValuePairsopt() { return _ElementValuePairsopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public NormalAnnotation(IToken leftIToken, IToken rightIToken,
                                AstToken _AT,
                                ITypeName _TypeName,
                                AstToken _LPAREN,
                                IElementValuePairsopt _ElementValuePairsopt,
                                AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ElementValuePairsopt = _ElementValuePairsopt;
            if (_ElementValuePairsopt != null) ((Ast) _ElementValuePairsopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AT);
            list.add(_TypeName);
            list.add(_LPAREN);
            list.add(_ElementValuePairsopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof NormalAnnotation)) return false;
            if (! super.equals(o)) return false;
            NormalAnnotation other = (NormalAnnotation) o;
            if (! _AT.equals(other._AT)) return false;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ElementValuePairsopt == null)
                if (other._ElementValuePairsopt != null) return false;
                else; // continue
            else if (! _ElementValuePairsopt.equals(other._ElementValuePairsopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AT.hashCode());
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ElementValuePairsopt == null ? 0 : _ElementValuePairsopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AT.accept(v);
                _TypeName.accept(v);
                _LPAREN.accept(v);
                if (_ElementValuePairsopt != null) _ElementValuePairsopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 235:  ElementValuePairs ::= ElementValuePair
     *</em>
     *<p>
     *<b>
     *<li>Rule 236:  ElementValuePairs ::= ElementValuePairs , ElementValuePair
     *</b>
     */
    static public class ElementValuePairs extends Ast implements IElementValuePairs
    {
        private IElementValuePairs _ElementValuePairs;
        private AstToken _COMMA;
        private ElementValuePair _ElementValuePair;

        public IElementValuePairs getElementValuePairs() { return _ElementValuePairs; }
        public AstToken getCOMMA() { return _COMMA; }
        public ElementValuePair getElementValuePair() { return _ElementValuePair; }

        public ElementValuePairs(IToken leftIToken, IToken rightIToken,
                                 IElementValuePairs _ElementValuePairs,
                                 AstToken _COMMA,
                                 ElementValuePair _ElementValuePair)
        {
            super(leftIToken, rightIToken);

            this._ElementValuePairs = _ElementValuePairs;
            ((Ast) _ElementValuePairs).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ElementValuePair = _ElementValuePair;
            ((Ast) _ElementValuePair).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ElementValuePairs);
            list.add(_COMMA);
            list.add(_ElementValuePair);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ElementValuePairs)) return false;
            if (! super.equals(o)) return false;
            ElementValuePairs other = (ElementValuePairs) o;
            if (! _ElementValuePairs.equals(other._ElementValuePairs)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _ElementValuePair.equals(other._ElementValuePair)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ElementValuePairs.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_ElementValuePair.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ElementValuePairs.accept(v);
                _COMMA.accept(v);
                _ElementValuePair.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 237:  ElementValuePair ::= SimpleName = ElementValue
     *</b>
     */
    static public class ElementValuePair extends Ast implements IElementValuePair
    {
        private identifier _SimpleName;
        private AstToken _EQUAL;
        private IElementValue _ElementValue;

        public identifier getSimpleName() { return _SimpleName; }
        public AstToken getEQUAL() { return _EQUAL; }
        public IElementValue getElementValue() { return _ElementValue; }

        public ElementValuePair(IToken leftIToken, IToken rightIToken,
                                identifier _SimpleName,
                                AstToken _EQUAL,
                                IElementValue _ElementValue)
        {
            super(leftIToken, rightIToken);

            this._SimpleName = _SimpleName;
            ((Ast) _SimpleName).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_SimpleName);
            list.add(_EQUAL);
            list.add(_ElementValue);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ElementValuePair)) return false;
            if (! super.equals(o)) return false;
            ElementValuePair other = (ElementValuePair) o;
            if (! _SimpleName.equals(other._SimpleName)) return false;
            if (! _EQUAL.equals(other._EQUAL)) return false;
            if (! _ElementValue.equals(other._ElementValue)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_SimpleName.hashCode());
            hash = hash * 31 + (_EQUAL.hashCode());
            hash = hash * 31 + (_ElementValue.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _SimpleName.accept(v);
                _EQUAL.accept(v);
                _ElementValue.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 242:  ElementValueArrayInitializer ::= { ElementValuesopt ,opt }
     *</b>
     */
    static public class ElementValueArrayInitializer extends Ast implements IElementValueArrayInitializer
    {
        private AstToken _LBRACE;
        private IElementValuesopt _ElementValuesopt;
        private Commaopt _Commaopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getElementValuesopt</b> may be <b>null</b>
         */
        public IElementValuesopt getElementValuesopt() { return _ElementValuesopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public Commaopt getCommaopt() { return _Commaopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public ElementValueArrayInitializer(IToken leftIToken, IToken rightIToken,
                                            AstToken _LBRACE,
                                            IElementValuesopt _ElementValuesopt,
                                            Commaopt _Commaopt,
                                            AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._ElementValuesopt = _ElementValuesopt;
            if (_ElementValuesopt != null) ((Ast) _ElementValuesopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt != null) ((Ast) _Commaopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_ElementValuesopt);
            list.add(_Commaopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ElementValueArrayInitializer)) return false;
            if (! super.equals(o)) return false;
            ElementValueArrayInitializer other = (ElementValueArrayInitializer) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_ElementValuesopt == null)
                if (other._ElementValuesopt != null) return false;
                else; // continue
            else if (! _ElementValuesopt.equals(other._ElementValuesopt)) return false;
            if (_Commaopt == null)
                if (other._Commaopt != null) return false;
                else; // continue
            else if (! _Commaopt.equals(other._Commaopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_ElementValuesopt == null ? 0 : _ElementValuesopt.hashCode());
            hash = hash * 31 + (_Commaopt == null ? 0 : _Commaopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_ElementValuesopt != null) _ElementValuesopt.accept(v);
                if (_Commaopt != null) _Commaopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 243:  ElementValues ::= ElementValue
     *</em>
     *<p>
     *<b>
     *<li>Rule 244:  ElementValues ::= ElementValues , ElementValue
     *</b>
     */
    static public class ElementValues extends Ast implements IElementValues
    {
        private IElementValues _ElementValues;
        private AstToken _COMMA;
        private IElementValue _ElementValue;

        public IElementValues getElementValues() { return _ElementValues; }
        public AstToken getCOMMA() { return _COMMA; }
        public IElementValue getElementValue() { return _ElementValue; }

        public ElementValues(IToken leftIToken, IToken rightIToken,
                             IElementValues _ElementValues,
                             AstToken _COMMA,
                             IElementValue _ElementValue)
        {
            super(leftIToken, rightIToken);

            this._ElementValues = _ElementValues;
            ((Ast) _ElementValues).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ElementValues);
            list.add(_COMMA);
            list.add(_ElementValue);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ElementValues)) return false;
            if (! super.equals(o)) return false;
            ElementValues other = (ElementValues) o;
            if (! _ElementValues.equals(other._ElementValues)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _ElementValue.equals(other._ElementValue)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ElementValues.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_ElementValue.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ElementValues.accept(v);
                _COMMA.accept(v);
                _ElementValue.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 245:  MarkerAnnotation ::= @ TypeName
     *</b>
     */
    static public class MarkerAnnotation extends Ast implements IMarkerAnnotation
    {
        private AstToken _AT;
        private ITypeName _TypeName;

        public AstToken getAT() { return _AT; }
        public ITypeName getTypeName() { return _TypeName; }

        public MarkerAnnotation(IToken leftIToken, IToken rightIToken,
                                AstToken _AT,
                                ITypeName _TypeName)
        {
            super(leftIToken, rightIToken);

            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AT);
            list.add(_TypeName);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MarkerAnnotation)) return false;
            if (! super.equals(o)) return false;
            MarkerAnnotation other = (MarkerAnnotation) o;
            if (! _AT.equals(other._AT)) return false;
            if (! _TypeName.equals(other._TypeName)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AT.hashCode());
            hash = hash * 31 + (_TypeName.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AT.accept(v);
                _TypeName.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 246:  SingleElementAnnotation ::= @ TypeName ( ElementValue )
     *</b>
     */
    static public class SingleElementAnnotation extends Ast implements ISingleElementAnnotation
    {
        private AstToken _AT;
        private ITypeName _TypeName;
        private AstToken _LPAREN;
        private IElementValue _ElementValue;
        private AstToken _RPAREN;

        public AstToken getAT() { return _AT; }
        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IElementValue getElementValue() { return _ElementValue; }
        public AstToken getRPAREN() { return _RPAREN; }

        public SingleElementAnnotation(IToken leftIToken, IToken rightIToken,
                                       AstToken _AT,
                                       ITypeName _TypeName,
                                       AstToken _LPAREN,
                                       IElementValue _ElementValue,
                                       AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AT);
            list.add(_TypeName);
            list.add(_LPAREN);
            list.add(_ElementValue);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SingleElementAnnotation)) return false;
            if (! super.equals(o)) return false;
            SingleElementAnnotation other = (SingleElementAnnotation) o;
            if (! _AT.equals(other._AT)) return false;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _ElementValue.equals(other._ElementValue)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AT.hashCode());
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ElementValue.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AT.accept(v);
                _TypeName.accept(v);
                _LPAREN.accept(v);
                _ElementValue.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 247:  ArrayInitializer ::= { VariableInitializersopt ,opt }
     *</b>
     */
    static public class ArrayInitializer extends Ast implements IArrayInitializer
    {
        private AstToken _LBRACE;
        private IVariableInitializersopt _VariableInitializersopt;
        private Commaopt _Commaopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getVariableInitializersopt</b> may be <b>null</b>
         */
        public IVariableInitializersopt getVariableInitializersopt() { return _VariableInitializersopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public Commaopt getCommaopt() { return _Commaopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public ArrayInitializer(IToken leftIToken, IToken rightIToken,
                                AstToken _LBRACE,
                                IVariableInitializersopt _VariableInitializersopt,
                                Commaopt _Commaopt,
                                AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._VariableInitializersopt = _VariableInitializersopt;
            if (_VariableInitializersopt != null) ((Ast) _VariableInitializersopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt != null) ((Ast) _Commaopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_VariableInitializersopt);
            list.add(_Commaopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayInitializer)) return false;
            if (! super.equals(o)) return false;
            ArrayInitializer other = (ArrayInitializer) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_VariableInitializersopt == null)
                if (other._VariableInitializersopt != null) return false;
                else; // continue
            else if (! _VariableInitializersopt.equals(other._VariableInitializersopt)) return false;
            if (_Commaopt == null)
                if (other._Commaopt != null) return false;
                else; // continue
            else if (! _Commaopt.equals(other._Commaopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_VariableInitializersopt == null ? 0 : _VariableInitializersopt.hashCode());
            hash = hash * 31 + (_Commaopt == null ? 0 : _Commaopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_VariableInitializersopt != null) _VariableInitializersopt.accept(v);
                if (_Commaopt != null) _Commaopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 248:  VariableInitializers ::= VariableInitializer
     *</em>
     *<p>
     *<b>
     *<li>Rule 249:  VariableInitializers ::= VariableInitializers , VariableInitializer
     *</b>
     */
    static public class VariableInitializers extends Ast implements IVariableInitializers
    {
        private IVariableInitializers _VariableInitializers;
        private AstToken _COMMA;
        private IVariableInitializer _VariableInitializer;

        public IVariableInitializers getVariableInitializers() { return _VariableInitializers; }
        public AstToken getCOMMA() { return _COMMA; }
        public IVariableInitializer getVariableInitializer() { return _VariableInitializer; }

        public VariableInitializers(IToken leftIToken, IToken rightIToken,
                                    IVariableInitializers _VariableInitializers,
                                    AstToken _COMMA,
                                    IVariableInitializer _VariableInitializer)
        {
            super(leftIToken, rightIToken);

            this._VariableInitializers = _VariableInitializers;
            ((Ast) _VariableInitializers).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._VariableInitializer = _VariableInitializer;
            ((Ast) _VariableInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableInitializers);
            list.add(_COMMA);
            list.add(_VariableInitializer);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof VariableInitializers)) return false;
            if (! super.equals(o)) return false;
            VariableInitializers other = (VariableInitializers) o;
            if (! _VariableInitializers.equals(other._VariableInitializers)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _VariableInitializer.equals(other._VariableInitializer)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableInitializers.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_VariableInitializer.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _VariableInitializers.accept(v);
                _COMMA.accept(v);
                _VariableInitializer.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 250:  Block ::= { BlockStatementsopt }
     *</b>
     */
    static public class Block extends Ast implements IBlock
    {
        private AstToken _LBRACE;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public Block(IToken leftIToken, IToken rightIToken,
                     AstToken _LBRACE,
                     IBlockStatementsopt _BlockStatementsopt,
                     AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_BlockStatementsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Block)) return false;
            if (! super.equals(o)) return false;
            Block other = (Block) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else; // continue
            else if (! _BlockStatementsopt.equals(other._BlockStatementsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_BlockStatementsopt != null) _BlockStatementsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 251:  BlockStatements ::= BlockStatement
     *</em>
     *<p>
     *<b>
     *<li>Rule 252:  BlockStatements ::= BlockStatements BlockStatement
     *</b>
     */
    static public class BlockStatements extends Ast implements IBlockStatements
    {
        private IBlockStatements _BlockStatements;
        private IBlockStatement _BlockStatement;

        public IBlockStatements getBlockStatements() { return _BlockStatements; }
        public IBlockStatement getBlockStatement() { return _BlockStatement; }

        public BlockStatements(IToken leftIToken, IToken rightIToken,
                               IBlockStatements _BlockStatements,
                               IBlockStatement _BlockStatement)
        {
            super(leftIToken, rightIToken);

            this._BlockStatements = _BlockStatements;
            ((Ast) _BlockStatements).setParent(this);
            this._BlockStatement = _BlockStatement;
            ((Ast) _BlockStatement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_BlockStatements);
            list.add(_BlockStatement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof BlockStatements)) return false;
            if (! super.equals(o)) return false;
            BlockStatements other = (BlockStatements) o;
            if (! _BlockStatements.equals(other._BlockStatements)) return false;
            if (! _BlockStatement.equals(other._BlockStatement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_BlockStatements.hashCode());
            hash = hash * 31 + (_BlockStatement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _BlockStatements.accept(v);
                _BlockStatement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 256:  LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
     *</b>
     */
    static public class LocalVariableDeclarationStatement extends Ast implements ILocalVariableDeclarationStatement
    {
        private LocalVariableDeclaration _LocalVariableDeclaration;
        private AstToken _SEMICOLON;

        public LocalVariableDeclaration getLocalVariableDeclaration() { return _LocalVariableDeclaration; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public LocalVariableDeclarationStatement(IToken leftIToken, IToken rightIToken,
                                                 LocalVariableDeclaration _LocalVariableDeclaration,
                                                 AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._LocalVariableDeclaration = _LocalVariableDeclaration;
            ((Ast) _LocalVariableDeclaration).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LocalVariableDeclaration);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LocalVariableDeclarationStatement)) return false;
            if (! super.equals(o)) return false;
            LocalVariableDeclarationStatement other = (LocalVariableDeclarationStatement) o;
            if (! _LocalVariableDeclaration.equals(other._LocalVariableDeclaration)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LocalVariableDeclaration.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LocalVariableDeclaration.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 257:  LocalVariableDeclaration ::= VariableModifiersopt Type VariableDeclarators
     *</b>
     */
    static public class LocalVariableDeclaration extends Ast implements ILocalVariableDeclaration
    {
        private IVariableModifiersopt _VariableModifiersopt;
        private IType _Type;
        private IVariableDeclarators _VariableDeclarators;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public IVariableModifiersopt getVariableModifiersopt() { return _VariableModifiersopt; }
        public IType getType() { return _Type; }
        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }

        public LocalVariableDeclaration(IToken leftIToken, IToken rightIToken,
                                        IVariableModifiersopt _VariableModifiersopt,
                                        IType _Type,
                                        IVariableDeclarators _VariableDeclarators)
        {
            super(leftIToken, rightIToken);

            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt != null) ((Ast) _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_VariableModifiersopt);
            list.add(_Type);
            list.add(_VariableDeclarators);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LocalVariableDeclaration)) return false;
            if (! super.equals(o)) return false;
            LocalVariableDeclaration other = (LocalVariableDeclaration) o;
            if (_VariableModifiersopt == null)
                if (other._VariableModifiersopt != null) return false;
                else; // continue
            else if (! _VariableModifiersopt.equals(other._VariableModifiersopt)) return false;
            if (! _Type.equals(other._Type)) return false;
            if (! _VariableDeclarators.equals(other._VariableDeclarators)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_VariableModifiersopt == null ? 0 : _VariableModifiersopt.hashCode());
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_VariableDeclarators.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_VariableModifiersopt != null) _VariableModifiersopt.accept(v);
                _Type.accept(v);
                _VariableDeclarators.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 281:  IfThenStatement ::= if ( Expression ) Statement
     *</b>
     */
    static public class IfThenStatement extends Ast implements IIfThenStatement
    {
        private AstToken _if;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getif() { return _if; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatement getStatement() { return _Statement; }

        public IfThenStatement(IToken leftIToken, IToken rightIToken,
                               AstToken _if,
                               AstToken _LPAREN,
                               IExpression _Expression,
                               AstToken _RPAREN,
                               IStatement _Statement)
        {
            super(leftIToken, rightIToken);

            this._if = _if;
            ((Ast) _if).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_if);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_Statement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof IfThenStatement)) return false;
            if (! super.equals(o)) return false;
            IfThenStatement other = (IfThenStatement) o;
            if (! _if.equals(other._if)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_if.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _if.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _Statement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 282:  IfThenElseStatement ::= if ( Expression ) StatementNoShortIf else Statement
     *</b>
     */
    static public class IfThenElseStatement extends Ast implements IIfThenElseStatement
    {
        private AstToken _if;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;
        private AstToken _else;
        private IStatement _Statement;

        public AstToken getif() { return _if; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public AstToken getelse() { return _else; }
        public IStatement getStatement() { return _Statement; }

        public IfThenElseStatement(IToken leftIToken, IToken rightIToken,
                                   AstToken _if,
                                   AstToken _LPAREN,
                                   IExpression _Expression,
                                   AstToken _RPAREN,
                                   IStatementNoShortIf _StatementNoShortIf,
                                   AstToken _else,
                                   IStatement _Statement)
        {
            super(leftIToken, rightIToken);

            this._if = _if;
            ((Ast) _if).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            this._else = _else;
            ((Ast) _else).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_if);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_StatementNoShortIf);
            list.add(_else);
            list.add(_Statement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof IfThenElseStatement)) return false;
            if (! super.equals(o)) return false;
            IfThenElseStatement other = (IfThenElseStatement) o;
            if (! _if.equals(other._if)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.equals(other._StatementNoShortIf)) return false;
            if (! _else.equals(other._else)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_if.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_StatementNoShortIf.hashCode());
            hash = hash * 31 + (_else.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _if.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _StatementNoShortIf.accept(v);
                _else.accept(v);
                _Statement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 283:  IfThenElseStatementNoShortIf ::= if ( Expression ) StatementNoShortIf else StatementNoShortIf
     *</b>
     */
    static public class IfThenElseStatementNoShortIf extends Ast implements IIfThenElseStatementNoShortIf
    {
        private AstToken _if;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;
        private AstToken _else;
        private IStatementNoShortIf _StatementNoShortIf7;

        public AstToken getif() { return _if; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public AstToken getelse() { return _else; }
        public IStatementNoShortIf getStatementNoShortIf7() { return _StatementNoShortIf7; }

        public IfThenElseStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                            AstToken _if,
                                            AstToken _LPAREN,
                                            IExpression _Expression,
                                            AstToken _RPAREN,
                                            IStatementNoShortIf _StatementNoShortIf,
                                            AstToken _else,
                                            IStatementNoShortIf _StatementNoShortIf7)
        {
            super(leftIToken, rightIToken);

            this._if = _if;
            ((Ast) _if).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            this._else = _else;
            ((Ast) _else).setParent(this);
            this._StatementNoShortIf7 = _StatementNoShortIf7;
            ((Ast) _StatementNoShortIf7).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_if);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_StatementNoShortIf);
            list.add(_else);
            list.add(_StatementNoShortIf7);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof IfThenElseStatementNoShortIf)) return false;
            if (! super.equals(o)) return false;
            IfThenElseStatementNoShortIf other = (IfThenElseStatementNoShortIf) o;
            if (! _if.equals(other._if)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.equals(other._StatementNoShortIf)) return false;
            if (! _else.equals(other._else)) return false;
            if (! _StatementNoShortIf7.equals(other._StatementNoShortIf7)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_if.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_StatementNoShortIf.hashCode());
            hash = hash * 31 + (_else.hashCode());
            hash = hash * 31 + (_StatementNoShortIf7.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _if.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _StatementNoShortIf.accept(v);
                _else.accept(v);
                _StatementNoShortIf7.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 284:  EmptyStatement ::= ;
     *</b>
     */
    static public class EmptyStatement extends AstToken implements IEmptyStatement
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public EmptyStatement(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 285:  LabeledStatement ::= identifier : Statement
     *</b>
     */
    static public class LabeledStatement extends Ast implements ILabeledStatement
    {
        private identifier _identifier;
        private AstToken _COLON;
        private IStatement _Statement;

        public identifier getidentifier() { return _identifier; }
        public AstToken getCOLON() { return _COLON; }
        public IStatement getStatement() { return _Statement; }

        public LabeledStatement(IToken leftIToken, IToken rightIToken,
                                identifier _identifier,
                                AstToken _COLON,
                                IStatement _Statement)
        {
            super(leftIToken, rightIToken);

            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_identifier);
            list.add(_COLON);
            list.add(_Statement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LabeledStatement)) return false;
            if (! super.equals(o)) return false;
            LabeledStatement other = (LabeledStatement) o;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _identifier.accept(v);
                _COLON.accept(v);
                _Statement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 286:  LabeledStatementNoShortIf ::= identifier : StatementNoShortIf
     *</b>
     */
    static public class LabeledStatementNoShortIf extends Ast implements ILabeledStatementNoShortIf
    {
        private identifier _identifier;
        private AstToken _COLON;
        private IStatementNoShortIf _StatementNoShortIf;

        public identifier getidentifier() { return _identifier; }
        public AstToken getCOLON() { return _COLON; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }

        public LabeledStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                         identifier _identifier,
                                         AstToken _COLON,
                                         IStatementNoShortIf _StatementNoShortIf)
        {
            super(leftIToken, rightIToken);

            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_identifier);
            list.add(_COLON);
            list.add(_StatementNoShortIf);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LabeledStatementNoShortIf)) return false;
            if (! super.equals(o)) return false;
            LabeledStatementNoShortIf other = (LabeledStatementNoShortIf) o;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            if (! _StatementNoShortIf.equals(other._StatementNoShortIf)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            hash = hash * 31 + (_StatementNoShortIf.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _identifier.accept(v);
                _COLON.accept(v);
                _StatementNoShortIf.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 287:  ExpressionStatement ::= StatementExpression ;
     *</b>
     */
    static public class ExpressionStatement extends Ast implements IExpressionStatement
    {
        private IStatementExpression _StatementExpression;
        private AstToken _SEMICOLON;

        public IStatementExpression getStatementExpression() { return _StatementExpression; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ExpressionStatement(IToken leftIToken, IToken rightIToken,
                                   IStatementExpression _StatementExpression,
                                   AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._StatementExpression = _StatementExpression;
            ((Ast) _StatementExpression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_StatementExpression);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExpressionStatement)) return false;
            if (! super.equals(o)) return false;
            ExpressionStatement other = (ExpressionStatement) o;
            if (! _StatementExpression.equals(other._StatementExpression)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_StatementExpression.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _StatementExpression.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 297:  SwitchStatement ::= switch ( Expression ) SwitchBlock
     *</b>
     */
    static public class SwitchStatement extends Ast implements ISwitchStatement
    {
        private AstToken _switch;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private SwitchBlock _SwitchBlock;

        public AstToken getswitch() { return _switch; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public SwitchBlock getSwitchBlock() { return _SwitchBlock; }

        public SwitchStatement(IToken leftIToken, IToken rightIToken,
                               AstToken _switch,
                               AstToken _LPAREN,
                               IExpression _Expression,
                               AstToken _RPAREN,
                               SwitchBlock _SwitchBlock)
        {
            super(leftIToken, rightIToken);

            this._switch = _switch;
            ((Ast) _switch).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SwitchBlock = _SwitchBlock;
            ((Ast) _SwitchBlock).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_switch);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_SwitchBlock);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchStatement)) return false;
            if (! super.equals(o)) return false;
            SwitchStatement other = (SwitchStatement) o;
            if (! _switch.equals(other._switch)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _SwitchBlock.equals(other._SwitchBlock)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_switch.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_SwitchBlock.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _switch.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _SwitchBlock.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 298:  SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
     *</b>
     */
    static public class SwitchBlock extends Ast implements ISwitchBlock
    {
        private AstToken _LBRACE;
        private ISwitchBlockStatementGroupsopt _SwitchBlockStatementGroupsopt;
        private ISwitchLabelsopt _SwitchLabelsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        /**
         * The value returned by <b>getSwitchBlockStatementGroupsopt</b> may be <b>null</b>
         */
        public ISwitchBlockStatementGroupsopt getSwitchBlockStatementGroupsopt() { return _SwitchBlockStatementGroupsopt; }
        /**
         * The value returned by <b>getSwitchLabelsopt</b> may be <b>null</b>
         */
        public ISwitchLabelsopt getSwitchLabelsopt() { return _SwitchLabelsopt; }
        public AstToken getRBRACE() { return _RBRACE; }

        public SwitchBlock(IToken leftIToken, IToken rightIToken,
                           AstToken _LBRACE,
                           ISwitchBlockStatementGroupsopt _SwitchBlockStatementGroupsopt,
                           ISwitchLabelsopt _SwitchLabelsopt,
                           AstToken _RBRACE)
        {
            super(leftIToken, rightIToken);

            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._SwitchBlockStatementGroupsopt = _SwitchBlockStatementGroupsopt;
            if (_SwitchBlockStatementGroupsopt != null) ((Ast) _SwitchBlockStatementGroupsopt).setParent(this);
            this._SwitchLabelsopt = _SwitchLabelsopt;
            if (_SwitchLabelsopt != null) ((Ast) _SwitchLabelsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACE);
            list.add(_SwitchBlockStatementGroupsopt);
            list.add(_SwitchLabelsopt);
            list.add(_RBRACE);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchBlock)) return false;
            if (! super.equals(o)) return false;
            SwitchBlock other = (SwitchBlock) o;
            if (! _LBRACE.equals(other._LBRACE)) return false;
            if (_SwitchBlockStatementGroupsopt == null)
                if (other._SwitchBlockStatementGroupsopt != null) return false;
                else; // continue
            else if (! _SwitchBlockStatementGroupsopt.equals(other._SwitchBlockStatementGroupsopt)) return false;
            if (_SwitchLabelsopt == null)
                if (other._SwitchLabelsopt != null) return false;
                else; // continue
            else if (! _SwitchLabelsopt.equals(other._SwitchLabelsopt)) return false;
            if (! _RBRACE.equals(other._RBRACE)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACE.hashCode());
            hash = hash * 31 + (_SwitchBlockStatementGroupsopt == null ? 0 : _SwitchBlockStatementGroupsopt.hashCode());
            hash = hash * 31 + (_SwitchLabelsopt == null ? 0 : _SwitchLabelsopt.hashCode());
            hash = hash * 31 + (_RBRACE.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACE.accept(v);
                if (_SwitchBlockStatementGroupsopt != null) _SwitchBlockStatementGroupsopt.accept(v);
                if (_SwitchLabelsopt != null) _SwitchLabelsopt.accept(v);
                _RBRACE.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 299:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
     *</em>
     *<p>
     *<b>
     *<li>Rule 300:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup
     *</b>
     */
    static public class SwitchBlockStatementGroups extends Ast implements ISwitchBlockStatementGroups
    {
        private ISwitchBlockStatementGroups _SwitchBlockStatementGroups;
        private SwitchBlockStatementGroup _SwitchBlockStatementGroup;

        public ISwitchBlockStatementGroups getSwitchBlockStatementGroups() { return _SwitchBlockStatementGroups; }
        public SwitchBlockStatementGroup getSwitchBlockStatementGroup() { return _SwitchBlockStatementGroup; }

        public SwitchBlockStatementGroups(IToken leftIToken, IToken rightIToken,
                                          ISwitchBlockStatementGroups _SwitchBlockStatementGroups,
                                          SwitchBlockStatementGroup _SwitchBlockStatementGroup)
        {
            super(leftIToken, rightIToken);

            this._SwitchBlockStatementGroups = _SwitchBlockStatementGroups;
            ((Ast) _SwitchBlockStatementGroups).setParent(this);
            this._SwitchBlockStatementGroup = _SwitchBlockStatementGroup;
            ((Ast) _SwitchBlockStatementGroup).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_SwitchBlockStatementGroups);
            list.add(_SwitchBlockStatementGroup);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchBlockStatementGroups)) return false;
            if (! super.equals(o)) return false;
            SwitchBlockStatementGroups other = (SwitchBlockStatementGroups) o;
            if (! _SwitchBlockStatementGroups.equals(other._SwitchBlockStatementGroups)) return false;
            if (! _SwitchBlockStatementGroup.equals(other._SwitchBlockStatementGroup)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_SwitchBlockStatementGroups.hashCode());
            hash = hash * 31 + (_SwitchBlockStatementGroup.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _SwitchBlockStatementGroups.accept(v);
                _SwitchBlockStatementGroup.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 301:  SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
     *</b>
     */
    static public class SwitchBlockStatementGroup extends Ast implements ISwitchBlockStatementGroup
    {
        private ISwitchLabels _SwitchLabels;
        private IBlockStatements _BlockStatements;

        public ISwitchLabels getSwitchLabels() { return _SwitchLabels; }
        public IBlockStatements getBlockStatements() { return _BlockStatements; }

        public SwitchBlockStatementGroup(IToken leftIToken, IToken rightIToken,
                                         ISwitchLabels _SwitchLabels,
                                         IBlockStatements _BlockStatements)
        {
            super(leftIToken, rightIToken);

            this._SwitchLabels = _SwitchLabels;
            ((Ast) _SwitchLabels).setParent(this);
            this._BlockStatements = _BlockStatements;
            ((Ast) _BlockStatements).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_SwitchLabels);
            list.add(_BlockStatements);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchBlockStatementGroup)) return false;
            if (! super.equals(o)) return false;
            SwitchBlockStatementGroup other = (SwitchBlockStatementGroup) o;
            if (! _SwitchLabels.equals(other._SwitchLabels)) return false;
            if (! _BlockStatements.equals(other._BlockStatements)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_SwitchLabels.hashCode());
            hash = hash * 31 + (_BlockStatements.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _SwitchLabels.accept(v);
                _BlockStatements.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 302:  SwitchLabels ::= SwitchLabel
     *</em>
     *<p>
     *<b>
     *<li>Rule 303:  SwitchLabels ::= SwitchLabels SwitchLabel
     *</b>
     */
    static public class SwitchLabels extends Ast implements ISwitchLabels
    {
        private ISwitchLabels _SwitchLabels;
        private ISwitchLabel _SwitchLabel;

        public ISwitchLabels getSwitchLabels() { return _SwitchLabels; }
        public ISwitchLabel getSwitchLabel() { return _SwitchLabel; }

        public SwitchLabels(IToken leftIToken, IToken rightIToken,
                            ISwitchLabels _SwitchLabels,
                            ISwitchLabel _SwitchLabel)
        {
            super(leftIToken, rightIToken);

            this._SwitchLabels = _SwitchLabels;
            ((Ast) _SwitchLabels).setParent(this);
            this._SwitchLabel = _SwitchLabel;
            ((Ast) _SwitchLabel).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_SwitchLabels);
            list.add(_SwitchLabel);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchLabels)) return false;
            if (! super.equals(o)) return false;
            SwitchLabels other = (SwitchLabels) o;
            if (! _SwitchLabels.equals(other._SwitchLabels)) return false;
            if (! _SwitchLabel.equals(other._SwitchLabel)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_SwitchLabels.hashCode());
            hash = hash * 31 + (_SwitchLabel.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _SwitchLabels.accept(v);
                _SwitchLabel.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 308:  WhileStatement ::= while ( Expression ) Statement
     *</b>
     */
    static public class WhileStatement extends Ast implements IWhileStatement
    {
        private AstToken _while;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getwhile() { return _while; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatement getStatement() { return _Statement; }

        public WhileStatement(IToken leftIToken, IToken rightIToken,
                              AstToken _while,
                              AstToken _LPAREN,
                              IExpression _Expression,
                              AstToken _RPAREN,
                              IStatement _Statement)
        {
            super(leftIToken, rightIToken);

            this._while = _while;
            ((Ast) _while).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_while);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_Statement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof WhileStatement)) return false;
            if (! super.equals(o)) return false;
            WhileStatement other = (WhileStatement) o;
            if (! _while.equals(other._while)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_while.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _while.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _Statement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 309:  WhileStatementNoShortIf ::= while ( Expression ) StatementNoShortIf
     *</b>
     */
    static public class WhileStatementNoShortIf extends Ast implements IWhileStatementNoShortIf
    {
        private AstToken _while;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;

        public AstToken getwhile() { return _while; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }

        public WhileStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                       AstToken _while,
                                       AstToken _LPAREN,
                                       IExpression _Expression,
                                       AstToken _RPAREN,
                                       IStatementNoShortIf _StatementNoShortIf)
        {
            super(leftIToken, rightIToken);

            this._while = _while;
            ((Ast) _while).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_while);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_StatementNoShortIf);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof WhileStatementNoShortIf)) return false;
            if (! super.equals(o)) return false;
            WhileStatementNoShortIf other = (WhileStatementNoShortIf) o;
            if (! _while.equals(other._while)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.equals(other._StatementNoShortIf)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_while.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_StatementNoShortIf.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _while.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _StatementNoShortIf.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 310:  DoStatement ::= do Statement while ( Expression ) ;
     *</b>
     */
    static public class DoStatement extends Ast implements IDoStatement
    {
        private AstToken _do;
        private IStatement _Statement;
        private AstToken _while;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        public AstToken getdo() { return _do; }
        public IStatement getStatement() { return _Statement; }
        public AstToken getwhile() { return _while; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public DoStatement(IToken leftIToken, IToken rightIToken,
                           AstToken _do,
                           IStatement _Statement,
                           AstToken _while,
                           AstToken _LPAREN,
                           IExpression _Expression,
                           AstToken _RPAREN,
                           AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._do = _do;
            ((Ast) _do).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            this._while = _while;
            ((Ast) _while).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_do);
            list.add(_Statement);
            list.add(_while);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof DoStatement)) return false;
            if (! super.equals(o)) return false;
            DoStatement other = (DoStatement) o;
            if (! _do.equals(other._do)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            if (! _while.equals(other._while)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_do.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            hash = hash * 31 + (_while.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _do.accept(v);
                _Statement.accept(v);
                _while.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 313:  BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
     *</b>
     */
    static public class BasicForStatement extends Ast implements IBasicForStatement
    {
        private AstToken _for;
        private AstToken _LPAREN;
        private IForInitopt _ForInitopt;
        private AstToken _SEMICOLON;
        private IExpressionopt _Expressionopt;
        private AstToken _SEMICOLON6;
        private IForUpdateopt _ForUpdateopt;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getfor() { return _for; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getForInitopt</b> may be <b>null</b>
         */
        public IForInitopt getForInitopt() { return _ForInitopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public IExpressionopt getExpressionopt() { return _Expressionopt; }
        public AstToken getSEMICOLON6() { return _SEMICOLON6; }
        /**
         * The value returned by <b>getForUpdateopt</b> may be <b>null</b>
         */
        public IForUpdateopt getForUpdateopt() { return _ForUpdateopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatement getStatement() { return _Statement; }

        public BasicForStatement(IToken leftIToken, IToken rightIToken,
                                 AstToken _for,
                                 AstToken _LPAREN,
                                 IForInitopt _ForInitopt,
                                 AstToken _SEMICOLON,
                                 IExpressionopt _Expressionopt,
                                 AstToken _SEMICOLON6,
                                 IForUpdateopt _ForUpdateopt,
                                 AstToken _RPAREN,
                                 IStatement _Statement)
        {
            super(leftIToken, rightIToken);

            this._for = _for;
            ((Ast) _for).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ForInitopt = _ForInitopt;
            if (_ForInitopt != null) ((Ast) _ForInitopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt != null) ((Ast) _Expressionopt).setParent(this);
            this._SEMICOLON6 = _SEMICOLON6;
            ((Ast) _SEMICOLON6).setParent(this);
            this._ForUpdateopt = _ForUpdateopt;
            if (_ForUpdateopt != null) ((Ast) _ForUpdateopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_for);
            list.add(_LPAREN);
            list.add(_ForInitopt);
            list.add(_SEMICOLON);
            list.add(_Expressionopt);
            list.add(_SEMICOLON6);
            list.add(_ForUpdateopt);
            list.add(_RPAREN);
            list.add(_Statement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof BasicForStatement)) return false;
            if (! super.equals(o)) return false;
            BasicForStatement other = (BasicForStatement) o;
            if (! _for.equals(other._for)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ForInitopt == null)
                if (other._ForInitopt != null) return false;
                else; // continue
            else if (! _ForInitopt.equals(other._ForInitopt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            if (_Expressionopt == null)
                if (other._Expressionopt != null) return false;
                else; // continue
            else if (! _Expressionopt.equals(other._Expressionopt)) return false;
            if (! _SEMICOLON6.equals(other._SEMICOLON6)) return false;
            if (_ForUpdateopt == null)
                if (other._ForUpdateopt != null) return false;
                else; // continue
            else if (! _ForUpdateopt.equals(other._ForUpdateopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_for.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ForInitopt == null ? 0 : _ForInitopt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            hash = hash * 31 + (_Expressionopt == null ? 0 : _Expressionopt.hashCode());
            hash = hash * 31 + (_SEMICOLON6.hashCode());
            hash = hash * 31 + (_ForUpdateopt == null ? 0 : _ForUpdateopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _for.accept(v);
                _LPAREN.accept(v);
                if (_ForInitopt != null) _ForInitopt.accept(v);
                _SEMICOLON.accept(v);
                if (_Expressionopt != null) _Expressionopt.accept(v);
                _SEMICOLON6.accept(v);
                if (_ForUpdateopt != null) _ForUpdateopt.accept(v);
                _RPAREN.accept(v);
                _Statement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 314:  ForStatementNoShortIf ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf
     *</b>
     */
    static public class ForStatementNoShortIf extends Ast implements IForStatementNoShortIf
    {
        private AstToken _for;
        private AstToken _LPAREN;
        private IForInitopt _ForInitopt;
        private AstToken _SEMICOLON;
        private IExpressionopt _Expressionopt;
        private AstToken _SEMICOLON6;
        private IForUpdateopt _ForUpdateopt;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;

        public AstToken getfor() { return _for; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getForInitopt</b> may be <b>null</b>
         */
        public IForInitopt getForInitopt() { return _ForInitopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public IExpressionopt getExpressionopt() { return _Expressionopt; }
        public AstToken getSEMICOLON6() { return _SEMICOLON6; }
        /**
         * The value returned by <b>getForUpdateopt</b> may be <b>null</b>
         */
        public IForUpdateopt getForUpdateopt() { return _ForUpdateopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }

        public ForStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                     AstToken _for,
                                     AstToken _LPAREN,
                                     IForInitopt _ForInitopt,
                                     AstToken _SEMICOLON,
                                     IExpressionopt _Expressionopt,
                                     AstToken _SEMICOLON6,
                                     IForUpdateopt _ForUpdateopt,
                                     AstToken _RPAREN,
                                     IStatementNoShortIf _StatementNoShortIf)
        {
            super(leftIToken, rightIToken);

            this._for = _for;
            ((Ast) _for).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ForInitopt = _ForInitopt;
            if (_ForInitopt != null) ((Ast) _ForInitopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt != null) ((Ast) _Expressionopt).setParent(this);
            this._SEMICOLON6 = _SEMICOLON6;
            ((Ast) _SEMICOLON6).setParent(this);
            this._ForUpdateopt = _ForUpdateopt;
            if (_ForUpdateopt != null) ((Ast) _ForUpdateopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_for);
            list.add(_LPAREN);
            list.add(_ForInitopt);
            list.add(_SEMICOLON);
            list.add(_Expressionopt);
            list.add(_SEMICOLON6);
            list.add(_ForUpdateopt);
            list.add(_RPAREN);
            list.add(_StatementNoShortIf);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ForStatementNoShortIf)) return false;
            if (! super.equals(o)) return false;
            ForStatementNoShortIf other = (ForStatementNoShortIf) o;
            if (! _for.equals(other._for)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ForInitopt == null)
                if (other._ForInitopt != null) return false;
                else; // continue
            else if (! _ForInitopt.equals(other._ForInitopt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            if (_Expressionopt == null)
                if (other._Expressionopt != null) return false;
                else; // continue
            else if (! _Expressionopt.equals(other._Expressionopt)) return false;
            if (! _SEMICOLON6.equals(other._SEMICOLON6)) return false;
            if (_ForUpdateopt == null)
                if (other._ForUpdateopt != null) return false;
                else; // continue
            else if (! _ForUpdateopt.equals(other._ForUpdateopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.equals(other._StatementNoShortIf)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_for.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ForInitopt == null ? 0 : _ForInitopt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            hash = hash * 31 + (_Expressionopt == null ? 0 : _Expressionopt.hashCode());
            hash = hash * 31 + (_SEMICOLON6.hashCode());
            hash = hash * 31 + (_ForUpdateopt == null ? 0 : _ForUpdateopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_StatementNoShortIf.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _for.accept(v);
                _LPAREN.accept(v);
                if (_ForInitopt != null) _ForInitopt.accept(v);
                _SEMICOLON.accept(v);
                if (_Expressionopt != null) _Expressionopt.accept(v);
                _SEMICOLON6.accept(v);
                if (_ForUpdateopt != null) _ForUpdateopt.accept(v);
                _RPAREN.accept(v);
                _StatementNoShortIf.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 318:  StatementExpressionList ::= StatementExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 319:  StatementExpressionList ::= StatementExpressionList , StatementExpression
     *</b>
     */
    static public class StatementExpressionList extends Ast implements IStatementExpressionList
    {
        private IStatementExpressionList _StatementExpressionList;
        private AstToken _COMMA;
        private IStatementExpression _StatementExpression;

        public IStatementExpressionList getStatementExpressionList() { return _StatementExpressionList; }
        public AstToken getCOMMA() { return _COMMA; }
        public IStatementExpression getStatementExpression() { return _StatementExpression; }

        public StatementExpressionList(IToken leftIToken, IToken rightIToken,
                                       IStatementExpressionList _StatementExpressionList,
                                       AstToken _COMMA,
                                       IStatementExpression _StatementExpression)
        {
            super(leftIToken, rightIToken);

            this._StatementExpressionList = _StatementExpressionList;
            ((Ast) _StatementExpressionList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._StatementExpression = _StatementExpression;
            ((Ast) _StatementExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_StatementExpressionList);
            list.add(_COMMA);
            list.add(_StatementExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof StatementExpressionList)) return false;
            if (! super.equals(o)) return false;
            StatementExpressionList other = (StatementExpressionList) o;
            if (! _StatementExpressionList.equals(other._StatementExpressionList)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _StatementExpression.equals(other._StatementExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_StatementExpressionList.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_StatementExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _StatementExpressionList.accept(v);
                _COMMA.accept(v);
                _StatementExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 320:  EnhancedForStatement ::= for ( FormalParameter : Expression ) Statement
     *</b>
     */
    static public class EnhancedForStatement extends Ast implements IEnhancedForStatement
    {
        private AstToken _for;
        private AstToken _LPAREN;
        private FormalParameter _FormalParameter;
        private AstToken _COLON;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getfor() { return _for; }
        public AstToken getLPAREN() { return _LPAREN; }
        public FormalParameter getFormalParameter() { return _FormalParameter; }
        public AstToken getCOLON() { return _COLON; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IStatement getStatement() { return _Statement; }

        public EnhancedForStatement(IToken leftIToken, IToken rightIToken,
                                    AstToken _for,
                                    AstToken _LPAREN,
                                    FormalParameter _FormalParameter,
                                    AstToken _COLON,
                                    IExpression _Expression,
                                    AstToken _RPAREN,
                                    IStatement _Statement)
        {
            super(leftIToken, rightIToken);

            this._for = _for;
            ((Ast) _for).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameter = _FormalParameter;
            ((Ast) _FormalParameter).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_for);
            list.add(_LPAREN);
            list.add(_FormalParameter);
            list.add(_COLON);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_Statement);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EnhancedForStatement)) return false;
            if (! super.equals(o)) return false;
            EnhancedForStatement other = (EnhancedForStatement) o;
            if (! _for.equals(other._for)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _FormalParameter.equals(other._FormalParameter)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _Statement.equals(other._Statement)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_for.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_FormalParameter.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_Statement.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _for.accept(v);
                _LPAREN.accept(v);
                _FormalParameter.accept(v);
                _COLON.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _Statement.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 321:  BreakStatement ::= break identifieropt ;
     *</b>
     */
    static public class BreakStatement extends Ast implements IBreakStatement
    {
        private AstToken _break;
        private identifier _identifieropt;
        private AstToken _SEMICOLON;

        public AstToken getbreak() { return _break; }
        /**
         * The value returned by <b>getidentifieropt</b> may be <b>null</b>
         */
        public identifier getidentifieropt() { return _identifieropt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public BreakStatement(IToken leftIToken, IToken rightIToken,
                              AstToken _break,
                              identifier _identifieropt,
                              AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._break = _break;
            ((Ast) _break).setParent(this);
            this._identifieropt = _identifieropt;
            if (_identifieropt != null) ((Ast) _identifieropt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_break);
            list.add(_identifieropt);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof BreakStatement)) return false;
            if (! super.equals(o)) return false;
            BreakStatement other = (BreakStatement) o;
            if (! _break.equals(other._break)) return false;
            if (_identifieropt == null)
                if (other._identifieropt != null) return false;
                else; // continue
            else if (! _identifieropt.equals(other._identifieropt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_break.hashCode());
            hash = hash * 31 + (_identifieropt == null ? 0 : _identifieropt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _break.accept(v);
                if (_identifieropt != null) _identifieropt.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 322:  ContinueStatement ::= continue identifieropt ;
     *</b>
     */
    static public class ContinueStatement extends Ast implements IContinueStatement
    {
        private AstToken _continue;
        private identifier _identifieropt;
        private AstToken _SEMICOLON;

        public AstToken getcontinue() { return _continue; }
        /**
         * The value returned by <b>getidentifieropt</b> may be <b>null</b>
         */
        public identifier getidentifieropt() { return _identifieropt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ContinueStatement(IToken leftIToken, IToken rightIToken,
                                 AstToken _continue,
                                 identifier _identifieropt,
                                 AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._continue = _continue;
            ((Ast) _continue).setParent(this);
            this._identifieropt = _identifieropt;
            if (_identifieropt != null) ((Ast) _identifieropt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_continue);
            list.add(_identifieropt);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ContinueStatement)) return false;
            if (! super.equals(o)) return false;
            ContinueStatement other = (ContinueStatement) o;
            if (! _continue.equals(other._continue)) return false;
            if (_identifieropt == null)
                if (other._identifieropt != null) return false;
                else; // continue
            else if (! _identifieropt.equals(other._identifieropt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_continue.hashCode());
            hash = hash * 31 + (_identifieropt == null ? 0 : _identifieropt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _continue.accept(v);
                if (_identifieropt != null) _identifieropt.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 323:  ReturnStatement ::= return Expressionopt ;
     *</b>
     */
    static public class ReturnStatement extends Ast implements IReturnStatement
    {
        private AstToken _return;
        private IExpressionopt _Expressionopt;
        private AstToken _SEMICOLON;

        public AstToken getreturn() { return _return; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public IExpressionopt getExpressionopt() { return _Expressionopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ReturnStatement(IToken leftIToken, IToken rightIToken,
                               AstToken _return,
                               IExpressionopt _Expressionopt,
                               AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._return = _return;
            ((Ast) _return).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt != null) ((Ast) _Expressionopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_return);
            list.add(_Expressionopt);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ReturnStatement)) return false;
            if (! super.equals(o)) return false;
            ReturnStatement other = (ReturnStatement) o;
            if (! _return.equals(other._return)) return false;
            if (_Expressionopt == null)
                if (other._Expressionopt != null) return false;
                else; // continue
            else if (! _Expressionopt.equals(other._Expressionopt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_return.hashCode());
            hash = hash * 31 + (_Expressionopt == null ? 0 : _Expressionopt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _return.accept(v);
                if (_Expressionopt != null) _Expressionopt.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 324:  ThrowStatement ::= throw Expression ;
     *</b>
     */
    static public class ThrowStatement extends Ast implements IThrowStatement
    {
        private AstToken _throw;
        private IExpression _Expression;
        private AstToken _SEMICOLON;

        public AstToken getthrow() { return _throw; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ThrowStatement(IToken leftIToken, IToken rightIToken,
                              AstToken _throw,
                              IExpression _Expression,
                              AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._throw = _throw;
            ((Ast) _throw).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_throw);
            list.add(_Expression);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ThrowStatement)) return false;
            if (! super.equals(o)) return false;
            ThrowStatement other = (ThrowStatement) o;
            if (! _throw.equals(other._throw)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_throw.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _throw.accept(v);
                _Expression.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 325:  SynchronizedStatement ::= synchronized ( Expression ) Block
     *</b>
     */
    static public class SynchronizedStatement extends Ast implements ISynchronizedStatement
    {
        private AstToken _synchronized;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private Block _Block;

        public AstToken getsynchronized() { return _synchronized; }
        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public Block getBlock() { return _Block; }

        public SynchronizedStatement(IToken leftIToken, IToken rightIToken,
                                     AstToken _synchronized,
                                     AstToken _LPAREN,
                                     IExpression _Expression,
                                     AstToken _RPAREN,
                                     Block _Block)
        {
            super(leftIToken, rightIToken);

            this._synchronized = _synchronized;
            ((Ast) _synchronized).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_synchronized);
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            list.add(_Block);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SynchronizedStatement)) return false;
            if (! super.equals(o)) return false;
            SynchronizedStatement other = (SynchronizedStatement) o;
            if (! _synchronized.equals(other._synchronized)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _Block.equals(other._Block)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_synchronized.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_Block.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _synchronized.accept(v);
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
                _Block.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 328:  Catches ::= CatchClause
     *</em>
     *<p>
     *<b>
     *<li>Rule 329:  Catches ::= Catches CatchClause
     *</b>
     */
    static public class Catches extends Ast implements ICatches
    {
        private ICatches _Catches;
        private CatchClause _CatchClause;

        public ICatches getCatches() { return _Catches; }
        public CatchClause getCatchClause() { return _CatchClause; }

        public Catches(IToken leftIToken, IToken rightIToken,
                       ICatches _Catches,
                       CatchClause _CatchClause)
        {
            super(leftIToken, rightIToken);

            this._Catches = _Catches;
            ((Ast) _Catches).setParent(this);
            this._CatchClause = _CatchClause;
            ((Ast) _CatchClause).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Catches);
            list.add(_CatchClause);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Catches)) return false;
            if (! super.equals(o)) return false;
            Catches other = (Catches) o;
            if (! _Catches.equals(other._Catches)) return false;
            if (! _CatchClause.equals(other._CatchClause)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Catches.hashCode());
            hash = hash * 31 + (_CatchClause.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Catches.accept(v);
                _CatchClause.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 330:  CatchClause ::= catch ( FormalParameter ) Block
     *</b>
     */
    static public class CatchClause extends Ast implements ICatchClause
    {
        private AstToken _catch;
        private AstToken _LPAREN;
        private FormalParameter _FormalParameter;
        private AstToken _RPAREN;
        private Block _Block;

        public AstToken getcatch() { return _catch; }
        public AstToken getLPAREN() { return _LPAREN; }
        public FormalParameter getFormalParameter() { return _FormalParameter; }
        public AstToken getRPAREN() { return _RPAREN; }
        public Block getBlock() { return _Block; }

        public CatchClause(IToken leftIToken, IToken rightIToken,
                           AstToken _catch,
                           AstToken _LPAREN,
                           FormalParameter _FormalParameter,
                           AstToken _RPAREN,
                           Block _Block)
        {
            super(leftIToken, rightIToken);

            this._catch = _catch;
            ((Ast) _catch).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameter = _FormalParameter;
            ((Ast) _FormalParameter).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_catch);
            list.add(_LPAREN);
            list.add(_FormalParameter);
            list.add(_RPAREN);
            list.add(_Block);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof CatchClause)) return false;
            if (! super.equals(o)) return false;
            CatchClause other = (CatchClause) o;
            if (! _catch.equals(other._catch)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _FormalParameter.equals(other._FormalParameter)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _Block.equals(other._Block)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_catch.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_FormalParameter.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_Block.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _catch.accept(v);
                _LPAREN.accept(v);
                _FormalParameter.accept(v);
                _RPAREN.accept(v);
                _Block.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 331:  Finally ::= finally Block
     *</b>
     */
    static public class Finally extends Ast implements IFinally
    {
        private AstToken _finally;
        private Block _Block;

        public AstToken getfinally() { return _finally; }
        public Block getBlock() { return _Block; }

        public Finally(IToken leftIToken, IToken rightIToken,
                       AstToken _finally,
                       Block _Block)
        {
            super(leftIToken, rightIToken);

            this._finally = _finally;
            ((Ast) _finally).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_finally);
            list.add(_Block);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Finally)) return false;
            if (! super.equals(o)) return false;
            Finally other = (Finally) o;
            if (! _finally.equals(other._finally)) return false;
            if (! _Block.equals(other._Block)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_finally.hashCode());
            hash = hash * 31 + (_Block.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _finally.accept(v);
                _Block.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 356:  ArgumentList ::= Expression
     *</em>
     *<p>
     *<b>
     *<li>Rule 357:  ArgumentList ::= ArgumentList , Expression
     *</b>
     */
    static public class ArgumentList extends Ast implements IArgumentList
    {
        private IArgumentList _ArgumentList;
        private AstToken _COMMA;
        private IExpression _Expression;

        public IArgumentList getArgumentList() { return _ArgumentList; }
        public AstToken getCOMMA() { return _COMMA; }
        public IExpression getExpression() { return _Expression; }

        public ArgumentList(IToken leftIToken, IToken rightIToken,
                            IArgumentList _ArgumentList,
                            AstToken _COMMA,
                            IExpression _Expression)
        {
            super(leftIToken, rightIToken);

            this._ArgumentList = _ArgumentList;
            ((Ast) _ArgumentList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ArgumentList);
            list.add(_COMMA);
            list.add(_Expression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArgumentList)) return false;
            if (! super.equals(o)) return false;
            ArgumentList other = (ArgumentList) o;
            if (! _ArgumentList.equals(other._ArgumentList)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ArgumentList.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ArgumentList.accept(v);
                _COMMA.accept(v);
                _Expression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 362:  DimExprs ::= DimExpr
     *</em>
     *<p>
     *<b>
     *<li>Rule 363:  DimExprs ::= DimExprs DimExpr
     *</b>
     */
    static public class DimExprs extends Ast implements IDimExprs
    {
        private IDimExprs _DimExprs;
        private DimExpr _DimExpr;

        public IDimExprs getDimExprs() { return _DimExprs; }
        public DimExpr getDimExpr() { return _DimExpr; }

        public DimExprs(IToken leftIToken, IToken rightIToken,
                        IDimExprs _DimExprs,
                        DimExpr _DimExpr)
        {
            super(leftIToken, rightIToken);

            this._DimExprs = _DimExprs;
            ((Ast) _DimExprs).setParent(this);
            this._DimExpr = _DimExpr;
            ((Ast) _DimExpr).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_DimExprs);
            list.add(_DimExpr);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof DimExprs)) return false;
            if (! super.equals(o)) return false;
            DimExprs other = (DimExprs) o;
            if (! _DimExprs.equals(other._DimExprs)) return false;
            if (! _DimExpr.equals(other._DimExpr)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_DimExprs.hashCode());
            hash = hash * 31 + (_DimExpr.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _DimExprs.accept(v);
                _DimExpr.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 364:  DimExpr ::= [ Expression ]
     *</b>
     */
    static public class DimExpr extends Ast implements IDimExpr
    {
        private AstToken _LBRACKET;
        private IExpression _Expression;
        private AstToken _RBRACKET;

        public AstToken getLBRACKET() { return _LBRACKET; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public DimExpr(IToken leftIToken, IToken rightIToken,
                       AstToken _LBRACKET,
                       IExpression _Expression,
                       AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACKET);
            list.add(_Expression);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof DimExpr)) return false;
            if (! super.equals(o)) return false;
            DimExpr other = (DimExpr) o;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACKET.accept(v);
                _Expression.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 381:  PostIncrementExpression ::= PostfixExpression ++
     *</b>
     */
    static public class PostIncrementExpression extends Ast implements IPostIncrementExpression
    {
        private IPostfixExpression _PostfixExpression;
        private AstToken _PLUS_PLUS;

        public IPostfixExpression getPostfixExpression() { return _PostfixExpression; }
        public AstToken getPLUS_PLUS() { return _PLUS_PLUS; }

        public PostIncrementExpression(IToken leftIToken, IToken rightIToken,
                                       IPostfixExpression _PostfixExpression,
                                       AstToken _PLUS_PLUS)
        {
            super(leftIToken, rightIToken);

            this._PostfixExpression = _PostfixExpression;
            ((Ast) _PostfixExpression).setParent(this);
            this._PLUS_PLUS = _PLUS_PLUS;
            ((Ast) _PLUS_PLUS).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PostfixExpression);
            list.add(_PLUS_PLUS);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PostIncrementExpression)) return false;
            if (! super.equals(o)) return false;
            PostIncrementExpression other = (PostIncrementExpression) o;
            if (! _PostfixExpression.equals(other._PostfixExpression)) return false;
            if (! _PLUS_PLUS.equals(other._PLUS_PLUS)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PostfixExpression.hashCode());
            hash = hash * 31 + (_PLUS_PLUS.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PostfixExpression.accept(v);
                _PLUS_PLUS.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 382:  PostDecrementExpression ::= PostfixExpression --
     *</b>
     */
    static public class PostDecrementExpression extends Ast implements IPostDecrementExpression
    {
        private IPostfixExpression _PostfixExpression;
        private AstToken _MINUS_MINUS;

        public IPostfixExpression getPostfixExpression() { return _PostfixExpression; }
        public AstToken getMINUS_MINUS() { return _MINUS_MINUS; }

        public PostDecrementExpression(IToken leftIToken, IToken rightIToken,
                                       IPostfixExpression _PostfixExpression,
                                       AstToken _MINUS_MINUS)
        {
            super(leftIToken, rightIToken);

            this._PostfixExpression = _PostfixExpression;
            ((Ast) _PostfixExpression).setParent(this);
            this._MINUS_MINUS = _MINUS_MINUS;
            ((Ast) _MINUS_MINUS).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PostfixExpression);
            list.add(_MINUS_MINUS);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PostDecrementExpression)) return false;
            if (! super.equals(o)) return false;
            PostDecrementExpression other = (PostDecrementExpression) o;
            if (! _PostfixExpression.equals(other._PostfixExpression)) return false;
            if (! _MINUS_MINUS.equals(other._MINUS_MINUS)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PostfixExpression.hashCode());
            hash = hash * 31 + (_MINUS_MINUS.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PostfixExpression.accept(v);
                _MINUS_MINUS.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 388:  PreIncrementExpression ::= ++ UnaryExpression
     *</b>
     */
    static public class PreIncrementExpression extends Ast implements IPreIncrementExpression
    {
        private AstToken _PLUS_PLUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getPLUS_PLUS() { return _PLUS_PLUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public PreIncrementExpression(IToken leftIToken, IToken rightIToken,
                                      AstToken _PLUS_PLUS,
                                      IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._PLUS_PLUS = _PLUS_PLUS;
            ((Ast) _PLUS_PLUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PLUS_PLUS);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PreIncrementExpression)) return false;
            if (! super.equals(o)) return false;
            PreIncrementExpression other = (PreIncrementExpression) o;
            if (! _PLUS_PLUS.equals(other._PLUS_PLUS)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PLUS_PLUS.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PLUS_PLUS.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 389:  PreDecrementExpression ::= -- UnaryExpression
     *</b>
     */
    static public class PreDecrementExpression extends Ast implements IPreDecrementExpression
    {
        private AstToken _MINUS_MINUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getMINUS_MINUS() { return _MINUS_MINUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public PreDecrementExpression(IToken leftIToken, IToken rightIToken,
                                      AstToken _MINUS_MINUS,
                                      IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._MINUS_MINUS = _MINUS_MINUS;
            ((Ast) _MINUS_MINUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MINUS_MINUS);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PreDecrementExpression)) return false;
            if (! super.equals(o)) return false;
            PreDecrementExpression other = (PreDecrementExpression) o;
            if (! _MINUS_MINUS.equals(other._MINUS_MINUS)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MINUS_MINUS.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MINUS_MINUS.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 416:  AndExpression ::= EqualityExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 417:  AndExpression ::= AndExpression & EqualityExpression
     *</b>
     */
    static public class AndExpression extends Ast implements IAndExpression
    {
        private IAndExpression _AndExpression;
        private AstToken _AND;
        private IEqualityExpression _EqualityExpression;

        public IAndExpression getAndExpression() { return _AndExpression; }
        public AstToken getAND() { return _AND; }
        public IEqualityExpression getEqualityExpression() { return _EqualityExpression; }

        public AndExpression(IToken leftIToken, IToken rightIToken,
                             IAndExpression _AndExpression,
                             AstToken _AND,
                             IEqualityExpression _EqualityExpression)
        {
            super(leftIToken, rightIToken);

            this._AndExpression = _AndExpression;
            ((Ast) _AndExpression).setParent(this);
            this._AND = _AND;
            ((Ast) _AND).setParent(this);
            this._EqualityExpression = _EqualityExpression;
            ((Ast) _EqualityExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AndExpression);
            list.add(_AND);
            list.add(_EqualityExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AndExpression)) return false;
            if (! super.equals(o)) return false;
            AndExpression other = (AndExpression) o;
            if (! _AndExpression.equals(other._AndExpression)) return false;
            if (! _AND.equals(other._AND)) return false;
            if (! _EqualityExpression.equals(other._EqualityExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AndExpression.hashCode());
            hash = hash * 31 + (_AND.hashCode());
            hash = hash * 31 + (_EqualityExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AndExpression.accept(v);
                _AND.accept(v);
                _EqualityExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 418:  ExclusiveOrExpression ::= AndExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 419:  ExclusiveOrExpression ::= ExclusiveOrExpression ^ AndExpression
     *</b>
     */
    static public class ExclusiveOrExpression extends Ast implements IExclusiveOrExpression
    {
        private IExclusiveOrExpression _ExclusiveOrExpression;
        private AstToken _XOR;
        private IAndExpression _AndExpression;

        public IExclusiveOrExpression getExclusiveOrExpression() { return _ExclusiveOrExpression; }
        public AstToken getXOR() { return _XOR; }
        public IAndExpression getAndExpression() { return _AndExpression; }

        public ExclusiveOrExpression(IToken leftIToken, IToken rightIToken,
                                     IExclusiveOrExpression _ExclusiveOrExpression,
                                     AstToken _XOR,
                                     IAndExpression _AndExpression)
        {
            super(leftIToken, rightIToken);

            this._ExclusiveOrExpression = _ExclusiveOrExpression;
            ((Ast) _ExclusiveOrExpression).setParent(this);
            this._XOR = _XOR;
            ((Ast) _XOR).setParent(this);
            this._AndExpression = _AndExpression;
            ((Ast) _AndExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ExclusiveOrExpression);
            list.add(_XOR);
            list.add(_AndExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExclusiveOrExpression)) return false;
            if (! super.equals(o)) return false;
            ExclusiveOrExpression other = (ExclusiveOrExpression) o;
            if (! _ExclusiveOrExpression.equals(other._ExclusiveOrExpression)) return false;
            if (! _XOR.equals(other._XOR)) return false;
            if (! _AndExpression.equals(other._AndExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ExclusiveOrExpression.hashCode());
            hash = hash * 31 + (_XOR.hashCode());
            hash = hash * 31 + (_AndExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ExclusiveOrExpression.accept(v);
                _XOR.accept(v);
                _AndExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 420:  InclusiveOrExpression ::= ExclusiveOrExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 421:  InclusiveOrExpression ::= InclusiveOrExpression | ExclusiveOrExpression
     *</b>
     */
    static public class InclusiveOrExpression extends Ast implements IInclusiveOrExpression
    {
        private IInclusiveOrExpression _InclusiveOrExpression;
        private AstToken _OR;
        private IExclusiveOrExpression _ExclusiveOrExpression;

        public IInclusiveOrExpression getInclusiveOrExpression() { return _InclusiveOrExpression; }
        public AstToken getOR() { return _OR; }
        public IExclusiveOrExpression getExclusiveOrExpression() { return _ExclusiveOrExpression; }

        public InclusiveOrExpression(IToken leftIToken, IToken rightIToken,
                                     IInclusiveOrExpression _InclusiveOrExpression,
                                     AstToken _OR,
                                     IExclusiveOrExpression _ExclusiveOrExpression)
        {
            super(leftIToken, rightIToken);

            this._InclusiveOrExpression = _InclusiveOrExpression;
            ((Ast) _InclusiveOrExpression).setParent(this);
            this._OR = _OR;
            ((Ast) _OR).setParent(this);
            this._ExclusiveOrExpression = _ExclusiveOrExpression;
            ((Ast) _ExclusiveOrExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_InclusiveOrExpression);
            list.add(_OR);
            list.add(_ExclusiveOrExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof InclusiveOrExpression)) return false;
            if (! super.equals(o)) return false;
            InclusiveOrExpression other = (InclusiveOrExpression) o;
            if (! _InclusiveOrExpression.equals(other._InclusiveOrExpression)) return false;
            if (! _OR.equals(other._OR)) return false;
            if (! _ExclusiveOrExpression.equals(other._ExclusiveOrExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_InclusiveOrExpression.hashCode());
            hash = hash * 31 + (_OR.hashCode());
            hash = hash * 31 + (_ExclusiveOrExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _InclusiveOrExpression.accept(v);
                _OR.accept(v);
                _ExclusiveOrExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 422:  ConditionalAndExpression ::= InclusiveOrExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 423:  ConditionalAndExpression ::= ConditionalAndExpression && InclusiveOrExpression
     *</b>
     */
    static public class ConditionalAndExpression extends Ast implements IConditionalAndExpression
    {
        private IConditionalAndExpression _ConditionalAndExpression;
        private AstToken _AND_AND;
        private IInclusiveOrExpression _InclusiveOrExpression;

        public IConditionalAndExpression getConditionalAndExpression() { return _ConditionalAndExpression; }
        public AstToken getAND_AND() { return _AND_AND; }
        public IInclusiveOrExpression getInclusiveOrExpression() { return _InclusiveOrExpression; }

        public ConditionalAndExpression(IToken leftIToken, IToken rightIToken,
                                        IConditionalAndExpression _ConditionalAndExpression,
                                        AstToken _AND_AND,
                                        IInclusiveOrExpression _InclusiveOrExpression)
        {
            super(leftIToken, rightIToken);

            this._ConditionalAndExpression = _ConditionalAndExpression;
            ((Ast) _ConditionalAndExpression).setParent(this);
            this._AND_AND = _AND_AND;
            ((Ast) _AND_AND).setParent(this);
            this._InclusiveOrExpression = _InclusiveOrExpression;
            ((Ast) _InclusiveOrExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConditionalAndExpression);
            list.add(_AND_AND);
            list.add(_InclusiveOrExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConditionalAndExpression)) return false;
            if (! super.equals(o)) return false;
            ConditionalAndExpression other = (ConditionalAndExpression) o;
            if (! _ConditionalAndExpression.equals(other._ConditionalAndExpression)) return false;
            if (! _AND_AND.equals(other._AND_AND)) return false;
            if (! _InclusiveOrExpression.equals(other._InclusiveOrExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConditionalAndExpression.hashCode());
            hash = hash * 31 + (_AND_AND.hashCode());
            hash = hash * 31 + (_InclusiveOrExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ConditionalAndExpression.accept(v);
                _AND_AND.accept(v);
                _InclusiveOrExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 424:  ConditionalOrExpression ::= ConditionalAndExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 425:  ConditionalOrExpression ::= ConditionalOrExpression || ConditionalAndExpression
     *</b>
     */
    static public class ConditionalOrExpression extends Ast implements IConditionalOrExpression
    {
        private IConditionalOrExpression _ConditionalOrExpression;
        private AstToken _OR_OR;
        private IConditionalAndExpression _ConditionalAndExpression;

        public IConditionalOrExpression getConditionalOrExpression() { return _ConditionalOrExpression; }
        public AstToken getOR_OR() { return _OR_OR; }
        public IConditionalAndExpression getConditionalAndExpression() { return _ConditionalAndExpression; }

        public ConditionalOrExpression(IToken leftIToken, IToken rightIToken,
                                       IConditionalOrExpression _ConditionalOrExpression,
                                       AstToken _OR_OR,
                                       IConditionalAndExpression _ConditionalAndExpression)
        {
            super(leftIToken, rightIToken);

            this._ConditionalOrExpression = _ConditionalOrExpression;
            ((Ast) _ConditionalOrExpression).setParent(this);
            this._OR_OR = _OR_OR;
            ((Ast) _OR_OR).setParent(this);
            this._ConditionalAndExpression = _ConditionalAndExpression;
            ((Ast) _ConditionalAndExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConditionalOrExpression);
            list.add(_OR_OR);
            list.add(_ConditionalAndExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConditionalOrExpression)) return false;
            if (! super.equals(o)) return false;
            ConditionalOrExpression other = (ConditionalOrExpression) o;
            if (! _ConditionalOrExpression.equals(other._ConditionalOrExpression)) return false;
            if (! _OR_OR.equals(other._OR_OR)) return false;
            if (! _ConditionalAndExpression.equals(other._ConditionalAndExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConditionalOrExpression.hashCode());
            hash = hash * 31 + (_OR_OR.hashCode());
            hash = hash * 31 + (_ConditionalAndExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ConditionalOrExpression.accept(v);
                _OR_OR.accept(v);
                _ConditionalAndExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 426:  ConditionalExpression ::= ConditionalOrExpression
     *</em>
     *<p>
     *<b>
     *<li>Rule 427:  ConditionalExpression ::= ConditionalOrExpression ? Expression : ConditionalExpression
     *</b>
     */
    static public class ConditionalExpression extends Ast implements IConditionalExpression
    {
        private IConditionalOrExpression _ConditionalOrExpression;
        private AstToken _QUESTION;
        private IExpression _Expression;
        private AstToken _COLON;
        private IConditionalExpression _ConditionalExpression;

        public IConditionalOrExpression getConditionalOrExpression() { return _ConditionalOrExpression; }
        public AstToken getQUESTION() { return _QUESTION; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getCOLON() { return _COLON; }
        public IConditionalExpression getConditionalExpression() { return _ConditionalExpression; }

        public ConditionalExpression(IToken leftIToken, IToken rightIToken,
                                     IConditionalOrExpression _ConditionalOrExpression,
                                     AstToken _QUESTION,
                                     IExpression _Expression,
                                     AstToken _COLON,
                                     IConditionalExpression _ConditionalExpression)
        {
            super(leftIToken, rightIToken);

            this._ConditionalOrExpression = _ConditionalOrExpression;
            ((Ast) _ConditionalOrExpression).setParent(this);
            this._QUESTION = _QUESTION;
            ((Ast) _QUESTION).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._ConditionalExpression = _ConditionalExpression;
            ((Ast) _ConditionalExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ConditionalOrExpression);
            list.add(_QUESTION);
            list.add(_Expression);
            list.add(_COLON);
            list.add(_ConditionalExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ConditionalExpression)) return false;
            if (! super.equals(o)) return false;
            ConditionalExpression other = (ConditionalExpression) o;
            if (! _ConditionalOrExpression.equals(other._ConditionalOrExpression)) return false;
            if (! _QUESTION.equals(other._QUESTION)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            if (! _ConditionalExpression.equals(other._ConditionalExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ConditionalOrExpression.hashCode());
            hash = hash * 31 + (_QUESTION.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            hash = hash * 31 + (_ConditionalExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ConditionalOrExpression.accept(v);
                _QUESTION.accept(v);
                _Expression.accept(v);
                _COLON.accept(v);
                _ConditionalExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 430:  Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
     *</b>
     */
    static public class Assignment extends Ast implements IAssignment
    {
        private ILeftHandSide _LeftHandSide;
        private IAssignmentOperator _AssignmentOperator;
        private IAssignmentExpression _AssignmentExpression;

        public ILeftHandSide getLeftHandSide() { return _LeftHandSide; }
        public IAssignmentOperator getAssignmentOperator() { return _AssignmentOperator; }
        public IAssignmentExpression getAssignmentExpression() { return _AssignmentExpression; }

        public Assignment(IToken leftIToken, IToken rightIToken,
                          ILeftHandSide _LeftHandSide,
                          IAssignmentOperator _AssignmentOperator,
                          IAssignmentExpression _AssignmentExpression)
        {
            super(leftIToken, rightIToken);

            this._LeftHandSide = _LeftHandSide;
            ((Ast) _LeftHandSide).setParent(this);
            this._AssignmentOperator = _AssignmentOperator;
            ((Ast) _AssignmentOperator).setParent(this);
            this._AssignmentExpression = _AssignmentExpression;
            ((Ast) _AssignmentExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LeftHandSide);
            list.add(_AssignmentOperator);
            list.add(_AssignmentExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Assignment)) return false;
            if (! super.equals(o)) return false;
            Assignment other = (Assignment) o;
            if (! _LeftHandSide.equals(other._LeftHandSide)) return false;
            if (! _AssignmentOperator.equals(other._AssignmentOperator)) return false;
            if (! _AssignmentExpression.equals(other._AssignmentExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LeftHandSide.hashCode());
            hash = hash * 31 + (_AssignmentOperator.hashCode());
            hash = hash * 31 + (_AssignmentExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LeftHandSide.accept(v);
                _AssignmentOperator.accept(v);
                _AssignmentExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 492:  ,opt ::= $Empty
     *</em>
     *<p>
     *<b>
     *<li>Rule 493:  ,opt ::= ,
     *</b>
     */
    static public class Commaopt extends AstToken implements ICommaopt
    {
        public IToken getCOMMA() { return leftIToken; }

        public Commaopt(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<em>
     *<li>Rule 504:  ...opt ::= $Empty
     *</em>
     *<p>
     *<b>
     *<li>Rule 505:  ...opt ::= ...
     *</b>
     */
    static public class Ellipsisopt extends AstToken implements IEllipsisopt
    {
        public IToken getELLIPSIS() { return leftIToken; }

        public Ellipsisopt(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 5:  LPGUserAction ::= $BeginAction BlockStatementsopt $EndAction
     *</b>
     */
    static public class LPGUserAction__BeginAction_BlockStatementsopt_EndAction extends Ast implements ILPGUserAction
    {
        private AstToken _BeginAction;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _EndAction;

        public AstToken getBeginAction() { return _BeginAction; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public AstToken getEndAction() { return _EndAction; }

        public LPGUserAction__BeginAction_BlockStatementsopt_EndAction(IToken leftIToken, IToken rightIToken,
                                                                       AstToken _BeginAction,
                                                                       IBlockStatementsopt _BlockStatementsopt,
                                                                       AstToken _EndAction)
        {
            super(leftIToken, rightIToken);

            this._BeginAction = _BeginAction;
            ((Ast) _BeginAction).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._EndAction = _EndAction;
            ((Ast) _EndAction).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_BeginAction);
            list.add(_BlockStatementsopt);
            list.add(_EndAction);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LPGUserAction__BeginAction_BlockStatementsopt_EndAction)) return false;
            if (! super.equals(o)) return false;
            LPGUserAction__BeginAction_BlockStatementsopt_EndAction other = (LPGUserAction__BeginAction_BlockStatementsopt_EndAction) o;
            if (! _BeginAction.equals(other._BeginAction)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else; // continue
            else if (! _BlockStatementsopt.equals(other._BlockStatementsopt)) return false;
            if (! _EndAction.equals(other._EndAction)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_BeginAction.hashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.hashCode());
            hash = hash * 31 + (_EndAction.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _BeginAction.accept(v);
                if (_BlockStatementsopt != null) _BlockStatementsopt.accept(v);
                _EndAction.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 6:  LPGUserAction ::= $BeginJava BlockStatementsopt $EndJava
     *</b>
     */
    static public class LPGUserAction__BeginJava_BlockStatementsopt_EndJava extends Ast implements ILPGUserAction
    {
        private AstToken _BeginJava;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _EndJava;

        public AstToken getBeginJava() { return _BeginJava; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public AstToken getEndJava() { return _EndJava; }

        public LPGUserAction__BeginJava_BlockStatementsopt_EndJava(IToken leftIToken, IToken rightIToken,
                                                                   AstToken _BeginJava,
                                                                   IBlockStatementsopt _BlockStatementsopt,
                                                                   AstToken _EndJava)
        {
            super(leftIToken, rightIToken);

            this._BeginJava = _BeginJava;
            ((Ast) _BeginJava).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._EndJava = _EndJava;
            ((Ast) _EndJava).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_BeginJava);
            list.add(_BlockStatementsopt);
            list.add(_EndJava);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof LPGUserAction__BeginJava_BlockStatementsopt_EndJava)) return false;
            if (! super.equals(o)) return false;
            LPGUserAction__BeginJava_BlockStatementsopt_EndJava other = (LPGUserAction__BeginJava_BlockStatementsopt_EndJava) o;
            if (! _BeginJava.equals(other._BeginJava)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else; // continue
            else if (! _BlockStatementsopt.equals(other._BlockStatementsopt)) return false;
            if (! _EndJava.equals(other._EndJava)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_BeginJava.hashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.hashCode());
            hash = hash * 31 + (_EndJava.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _BeginJava.accept(v);
                if (_BlockStatementsopt != null) _BlockStatementsopt.accept(v);
                _EndJava.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 7:  LPGUserAction ::= $NoAction
     *</b>
     */
    static public class LPGUserAction__NoAction extends AstToken implements ILPGUserAction
    {
        public IToken getNoAction() { return leftIToken; }

        public LPGUserAction__NoAction(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 8:  LPGUserAction ::= $NullAction
     *</b>
     */
    static public class LPGUserAction__NullAction extends AstToken implements ILPGUserAction
    {
        public IToken getNullAction() { return leftIToken; }

        public LPGUserAction__NullAction(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 9:  LPGUserAction ::= $BadAction
     *</b>
     */
    static public class LPGUserAction__BadAction extends AstToken implements ILPGUserAction
    {
        public IToken getBadAction() { return leftIToken; }

        public LPGUserAction__BadAction(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 16:  IntegralType ::= byte
     *</b>
     */
    static public class IntegralType__byte extends AstToken implements IIntegralType
    {
        public IToken getbyte() { return leftIToken; }

        public IntegralType__byte(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 17:  IntegralType ::= short
     *</b>
     */
    static public class IntegralType__short extends AstToken implements IIntegralType
    {
        public IToken getshort() { return leftIToken; }

        public IntegralType__short(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 18:  IntegralType ::= int
     *</b>
     */
    static public class IntegralType__int extends AstToken implements IIntegralType
    {
        public IToken getint() { return leftIToken; }

        public IntegralType__int(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 19:  IntegralType ::= long
     *</b>
     */
    static public class IntegralType__long extends AstToken implements IIntegralType
    {
        public IToken getlong() { return leftIToken; }

        public IntegralType__long(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 20:  IntegralType ::= char
     *</b>
     */
    static public class IntegralType__char extends AstToken implements IIntegralType
    {
        public IToken getchar() { return leftIToken; }

        public IntegralType__char(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 21:  FloatingPointType ::= float
     *</b>
     */
    static public class FloatingPointType__float extends AstToken implements IFloatingPointType
    {
        public IToken getfloat() { return leftIToken; }

        public FloatingPointType__float(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 22:  FloatingPointType ::= double
     *</b>
     */
    static public class FloatingPointType__double extends AstToken implements IFloatingPointType
    {
        public IToken getdouble() { return leftIToken; }

        public FloatingPointType__double(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 45:  WildcardBounds ::= extends ReferenceType
     *</b>
     */
    static public class WildcardBounds__extends_ReferenceType extends Ast implements IWildcardBounds
    {
        private AstToken _extends;
        private IReferenceType _ReferenceType;

        public AstToken getextends() { return _extends; }
        public IReferenceType getReferenceType() { return _ReferenceType; }

        public WildcardBounds__extends_ReferenceType(IToken leftIToken, IToken rightIToken,
                                                     AstToken _extends,
                                                     IReferenceType _ReferenceType)
        {
            super(leftIToken, rightIToken);

            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_extends);
            list.add(_ReferenceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof WildcardBounds__extends_ReferenceType)) return false;
            if (! super.equals(o)) return false;
            WildcardBounds__extends_ReferenceType other = (WildcardBounds__extends_ReferenceType) o;
            if (! _extends.equals(other._extends)) return false;
            if (! _ReferenceType.equals(other._ReferenceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_extends.hashCode());
            hash = hash * 31 + (_ReferenceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _extends.accept(v);
                _ReferenceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 46:  WildcardBounds ::= super ReferenceType
     *</b>
     */
    static public class WildcardBounds__super_ReferenceType extends Ast implements IWildcardBounds
    {
        private AstToken _super;
        private IReferenceType _ReferenceType;

        public AstToken getsuper() { return _super; }
        public IReferenceType getReferenceType() { return _ReferenceType; }

        public WildcardBounds__super_ReferenceType(IToken leftIToken, IToken rightIToken,
                                                   AstToken _super,
                                                   IReferenceType _ReferenceType)
        {
            super(leftIToken, rightIToken);

            this._super = _super;
            ((Ast) _super).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_super);
            list.add(_ReferenceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof WildcardBounds__super_ReferenceType)) return false;
            if (! super.equals(o)) return false;
            WildcardBounds__super_ReferenceType other = (WildcardBounds__super_ReferenceType) o;
            if (! _super.equals(other._super)) return false;
            if (! _ReferenceType.equals(other._ReferenceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_ReferenceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _super.accept(v);
                _ReferenceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 80:  ClassModifier ::= public
     *</b>
     */
    static public class ClassModifier__public extends AstToken implements IClassModifier
    {
        public IToken getpublic() { return leftIToken; }

        public ClassModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 81:  ClassModifier ::= protected
     *</b>
     */
    static public class ClassModifier__protected extends AstToken implements IClassModifier
    {
        public IToken getprotected() { return leftIToken; }

        public ClassModifier__protected(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 82:  ClassModifier ::= private
     *</b>
     */
    static public class ClassModifier__private extends AstToken implements IClassModifier
    {
        public IToken getprivate() { return leftIToken; }

        public ClassModifier__private(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 83:  ClassModifier ::= abstract
     *</b>
     */
    static public class ClassModifier__abstract extends AstToken implements IClassModifier
    {
        public IToken getabstract() { return leftIToken; }

        public ClassModifier__abstract(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 84:  ClassModifier ::= static
     *</b>
     */
    static public class ClassModifier__static extends AstToken implements IClassModifier
    {
        public IToken getstatic() { return leftIToken; }

        public ClassModifier__static(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 85:  ClassModifier ::= final
     *</b>
     */
    static public class ClassModifier__final extends AstToken implements IClassModifier
    {
        public IToken getfinal() { return leftIToken; }

        public ClassModifier__final(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 86:  ClassModifier ::= strictfp
     *</b>
     */
    static public class ClassModifier__strictfp extends AstToken implements IClassModifier
    {
        public IToken getstrictfp() { return leftIToken; }

        public ClassModifier__strictfp(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 118:  FieldModifier ::= public
     *</b>
     */
    static public class FieldModifier__public extends AstToken implements IFieldModifier
    {
        public IToken getpublic() { return leftIToken; }

        public FieldModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 119:  FieldModifier ::= protected
     *</b>
     */
    static public class FieldModifier__protected extends AstToken implements IFieldModifier
    {
        public IToken getprotected() { return leftIToken; }

        public FieldModifier__protected(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 120:  FieldModifier ::= private
     *</b>
     */
    static public class FieldModifier__private extends AstToken implements IFieldModifier
    {
        public IToken getprivate() { return leftIToken; }

        public FieldModifier__private(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 121:  FieldModifier ::= static
     *</b>
     */
    static public class FieldModifier__static extends AstToken implements IFieldModifier
    {
        public IToken getstatic() { return leftIToken; }

        public FieldModifier__static(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 122:  FieldModifier ::= final
     *</b>
     */
    static public class FieldModifier__final extends AstToken implements IFieldModifier
    {
        public IToken getfinal() { return leftIToken; }

        public FieldModifier__final(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 123:  FieldModifier ::= transient
     *</b>
     */
    static public class FieldModifier__transient extends AstToken implements IFieldModifier
    {
        public IToken gettransient() { return leftIToken; }

        public FieldModifier__transient(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 124:  FieldModifier ::= volatile
     *</b>
     */
    static public class FieldModifier__volatile extends AstToken implements IFieldModifier
    {
        public IToken getvolatile() { return leftIToken; }

        public FieldModifier__volatile(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 129:  MethodDeclarator ::= identifier ( FormalParameterListopt )
     *</b>
     */
    static public class MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN extends Ast implements IMethodDeclarator
    {
        private identifier _identifier;
        private AstToken _LPAREN;
        private IFormalParameterListopt _FormalParameterListopt;
        private AstToken _RPAREN;

        public identifier getidentifier() { return _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getFormalParameterListopt</b> may be <b>null</b>
         */
        public IFormalParameterListopt getFormalParameterListopt() { return _FormalParameterListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN(IToken leftIToken, IToken rightIToken,
                                                                                 identifier _identifier,
                                                                                 AstToken _LPAREN,
                                                                                 IFormalParameterListopt _FormalParameterListopt,
                                                                                 AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameterListopt = _FormalParameterListopt;
            if (_FormalParameterListopt != null) ((Ast) _FormalParameterListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_identifier);
            list.add(_LPAREN);
            list.add(_FormalParameterListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN)) return false;
            if (! super.equals(o)) return false;
            MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN other = (MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN) o;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_FormalParameterListopt == null)
                if (other._FormalParameterListopt != null) return false;
                else; // continue
            else if (! _FormalParameterListopt.equals(other._FormalParameterListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_FormalParameterListopt == null ? 0 : _FormalParameterListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _identifier.accept(v);
                _LPAREN.accept(v);
                if (_FormalParameterListopt != null) _FormalParameterListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 130:  MethodDeclarator ::= MethodDeclarator [ ]
     *</b>
     */
    static public class MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET extends Ast implements IMethodDeclarator
    {
        private IMethodDeclarator _MethodDeclarator;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IMethodDeclarator getMethodDeclarator() { return _MethodDeclarator; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET(IToken leftIToken, IToken rightIToken,
                                                                    IMethodDeclarator _MethodDeclarator,
                                                                    AstToken _LBRACKET,
                                                                    AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._MethodDeclarator = _MethodDeclarator;
            ((Ast) _MethodDeclarator).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MethodDeclarator);
            list.add(_LBRACKET);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET)) return false;
            if (! super.equals(o)) return false;
            MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET other = (MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET) o;
            if (! _MethodDeclarator.equals(other._MethodDeclarator)) return false;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MethodDeclarator.hashCode());
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MethodDeclarator.accept(v);
                _LBRACKET.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 144:  MethodModifier ::= public
     *</b>
     */
    static public class MethodModifier__public extends AstToken implements IMethodModifier
    {
        public IToken getpublic() { return leftIToken; }

        public MethodModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 145:  MethodModifier ::= protected
     *</b>
     */
    static public class MethodModifier__protected extends AstToken implements IMethodModifier
    {
        public IToken getprotected() { return leftIToken; }

        public MethodModifier__protected(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 146:  MethodModifier ::= private
     *</b>
     */
    static public class MethodModifier__private extends AstToken implements IMethodModifier
    {
        public IToken getprivate() { return leftIToken; }

        public MethodModifier__private(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 147:  MethodModifier ::= abstract
     *</b>
     */
    static public class MethodModifier__abstract extends AstToken implements IMethodModifier
    {
        public IToken getabstract() { return leftIToken; }

        public MethodModifier__abstract(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 148:  MethodModifier ::= static
     *</b>
     */
    static public class MethodModifier__static extends AstToken implements IMethodModifier
    {
        public IToken getstatic() { return leftIToken; }

        public MethodModifier__static(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 149:  MethodModifier ::= final
     *</b>
     */
    static public class MethodModifier__final extends AstToken implements IMethodModifier
    {
        public IToken getfinal() { return leftIToken; }

        public MethodModifier__final(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 150:  MethodModifier ::= synchronized
     *</b>
     */
    static public class MethodModifier__synchronized extends AstToken implements IMethodModifier
    {
        public IToken getsynchronized() { return leftIToken; }

        public MethodModifier__synchronized(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 151:  MethodModifier ::= native
     *</b>
     */
    static public class MethodModifier__native extends AstToken implements IMethodModifier
    {
        public IToken getnative() { return leftIToken; }

        public MethodModifier__native(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 152:  MethodModifier ::= strictfp
     *</b>
     */
    static public class MethodModifier__strictfp extends AstToken implements IMethodModifier
    {
        public IToken getstrictfp() { return leftIToken; }

        public MethodModifier__strictfp(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 168:  ConstructorModifier ::= public
     *</b>
     */
    static public class ConstructorModifier__public extends AstToken implements IConstructorModifier
    {
        public IToken getpublic() { return leftIToken; }

        public ConstructorModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 169:  ConstructorModifier ::= protected
     *</b>
     */
    static public class ConstructorModifier__protected extends AstToken implements IConstructorModifier
    {
        public IToken getprotected() { return leftIToken; }

        public ConstructorModifier__protected(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 170:  ConstructorModifier ::= private
     *</b>
     */
    static public class ConstructorModifier__private extends AstToken implements IConstructorModifier
    {
        public IToken getprivate() { return leftIToken; }

        public ConstructorModifier__private(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 172:  ExplicitConstructorInvocation ::= TypeArgumentsopt this ( ArgumentListopt ) ;
     *</b>
     */
    static public class ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON extends Ast implements IExplicitConstructorInvocation
    {
        private TypeArguments _TypeArgumentsopt;
        private AstToken _this;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public AstToken getthis() { return _this; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON(IToken leftIToken, IToken rightIToken,
                                                                                                            TypeArguments _TypeArgumentsopt,
                                                                                                            AstToken _this,
                                                                                                            AstToken _LPAREN,
                                                                                                            IArgumentListopt _ArgumentListopt,
                                                                                                            AstToken _RPAREN,
                                                                                                            AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._this = _this;
            ((Ast) _this).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeArgumentsopt);
            list.add(_this);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)) return false;
            if (! super.equals(o)) return false;
            ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON other = (ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) o;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _this.equals(other._this)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_this.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _this.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 173:  ExplicitConstructorInvocation ::= TypeArgumentsopt super ( ArgumentListopt ) ;
     *</b>
     */
    static public class ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON extends Ast implements IExplicitConstructorInvocation
    {
        private TypeArguments _TypeArgumentsopt;
        private AstToken _super;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public AstToken getsuper() { return _super; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON(IToken leftIToken, IToken rightIToken,
                                                                                                             TypeArguments _TypeArgumentsopt,
                                                                                                             AstToken _super,
                                                                                                             AstToken _LPAREN,
                                                                                                             IArgumentListopt _ArgumentListopt,
                                                                                                             AstToken _RPAREN,
                                                                                                             AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeArgumentsopt);
            list.add(_super);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)) return false;
            if (! super.equals(o)) return false;
            ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON other = (ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) o;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _super.equals(other._super)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _super.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 174:  ExplicitConstructorInvocation ::= Primary . TypeArgumentsopt super ( ArgumentListopt ) ;
     *</b>
     */
    static public class ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON extends Ast implements IExplicitConstructorInvocation
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private TypeArguments _TypeArgumentsopt;
        private AstToken _super;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        public IPrimary getPrimary() { return _Primary; }
        public AstToken getDOT() { return _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public AstToken getsuper() { return _super; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON(IToken leftIToken, IToken rightIToken,
                                                                                                                         IPrimary _Primary,
                                                                                                                         AstToken _DOT,
                                                                                                                         TypeArguments _TypeArgumentsopt,
                                                                                                                         AstToken _super,
                                                                                                                         AstToken _LPAREN,
                                                                                                                         IArgumentListopt _ArgumentListopt,
                                                                                                                         AstToken _RPAREN,
                                                                                                                         AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Primary);
            list.add(_DOT);
            list.add(_TypeArgumentsopt);
            list.add(_super);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)) return false;
            if (! super.equals(o)) return false;
            ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON other = (ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) o;
            if (! _Primary.equals(other._Primary)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _super.equals(other._super)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Primary.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Primary.accept(v);
                _DOT.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _super.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 188:  InterfaceModifier ::= public
     *</b>
     */
    static public class InterfaceModifier__public extends AstToken implements IInterfaceModifier
    {
        public IToken getpublic() { return leftIToken; }

        public InterfaceModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 189:  InterfaceModifier ::= protected
     *</b>
     */
    static public class InterfaceModifier__protected extends AstToken implements IInterfaceModifier
    {
        public IToken getprotected() { return leftIToken; }

        public InterfaceModifier__protected(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 190:  InterfaceModifier ::= private
     *</b>
     */
    static public class InterfaceModifier__private extends AstToken implements IInterfaceModifier
    {
        public IToken getprivate() { return leftIToken; }

        public InterfaceModifier__private(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 191:  InterfaceModifier ::= abstract
     *</b>
     */
    static public class InterfaceModifier__abstract extends AstToken implements IInterfaceModifier
    {
        public IToken getabstract() { return leftIToken; }

        public InterfaceModifier__abstract(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 192:  InterfaceModifier ::= static
     *</b>
     */
    static public class InterfaceModifier__static extends AstToken implements IInterfaceModifier
    {
        public IToken getstatic() { return leftIToken; }

        public InterfaceModifier__static(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 193:  InterfaceModifier ::= strictfp
     *</b>
     */
    static public class InterfaceModifier__strictfp extends AstToken implements IInterfaceModifier
    {
        public IToken getstrictfp() { return leftIToken; }

        public InterfaceModifier__strictfp(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 194:  ExtendsInterfaces ::= extends InterfaceType
     *</b>
     */
    static public class ExtendsInterfaces__extends_InterfaceType extends Ast implements IExtendsInterfaces
    {
        private AstToken _extends;
        private InterfaceType _InterfaceType;

        public AstToken getextends() { return _extends; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }

        public ExtendsInterfaces__extends_InterfaceType(IToken leftIToken, IToken rightIToken,
                                                        AstToken _extends,
                                                        InterfaceType _InterfaceType)
        {
            super(leftIToken, rightIToken);

            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_extends);
            list.add(_InterfaceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExtendsInterfaces__extends_InterfaceType)) return false;
            if (! super.equals(o)) return false;
            ExtendsInterfaces__extends_InterfaceType other = (ExtendsInterfaces__extends_InterfaceType) o;
            if (! _extends.equals(other._extends)) return false;
            if (! _InterfaceType.equals(other._InterfaceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_extends.hashCode());
            hash = hash * 31 + (_InterfaceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _extends.accept(v);
                _InterfaceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 195:  ExtendsInterfaces ::= ExtendsInterfaces , InterfaceType
     *</b>
     */
    static public class ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType extends Ast implements IExtendsInterfaces
    {
        private IExtendsInterfaces _ExtendsInterfaces;
        private AstToken _COMMA;
        private InterfaceType _InterfaceType;

        public IExtendsInterfaces getExtendsInterfaces() { return _ExtendsInterfaces; }
        public AstToken getCOMMA() { return _COMMA; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }

        public ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType(IToken leftIToken, IToken rightIToken,
                                                                        IExtendsInterfaces _ExtendsInterfaces,
                                                                        AstToken _COMMA,
                                                                        InterfaceType _InterfaceType)
        {
            super(leftIToken, rightIToken);

            this._ExtendsInterfaces = _ExtendsInterfaces;
            ((Ast) _ExtendsInterfaces).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ExtendsInterfaces);
            list.add(_COMMA);
            list.add(_InterfaceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType)) return false;
            if (! super.equals(o)) return false;
            ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType other = (ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType) o;
            if (! _ExtendsInterfaces.equals(other._ExtendsInterfaces)) return false;
            if (! _COMMA.equals(other._COMMA)) return false;
            if (! _InterfaceType.equals(other._InterfaceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ExtendsInterfaces.hashCode());
            hash = hash * 31 + (_COMMA.hashCode());
            hash = hash * 31 + (_InterfaceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ExtendsInterfaces.accept(v);
                _COMMA.accept(v);
                _InterfaceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 208:  ConstantModifier ::= public
     *</b>
     */
    static public class ConstantModifier__public extends AstToken implements IConstantModifier
    {
        public IToken getpublic() { return leftIToken; }

        public ConstantModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 209:  ConstantModifier ::= static
     *</b>
     */
    static public class ConstantModifier__static extends AstToken implements IConstantModifier
    {
        public IToken getstatic() { return leftIToken; }

        public ConstantModifier__static(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 210:  ConstantModifier ::= final
     *</b>
     */
    static public class ConstantModifier__final extends AstToken implements IConstantModifier
    {
        public IToken getfinal() { return leftIToken; }

        public ConstantModifier__final(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 215:  AbstractMethodModifier ::= public
     *</b>
     */
    static public class AbstractMethodModifier__public extends AstToken implements IAbstractMethodModifier
    {
        public IToken getpublic() { return leftIToken; }

        public AbstractMethodModifier__public(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 216:  AbstractMethodModifier ::= abstract
     *</b>
     */
    static public class AbstractMethodModifier__abstract extends AstToken implements IAbstractMethodModifier
    {
        public IToken getabstract() { return leftIToken; }

        public AbstractMethodModifier__abstract(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 221:  AnnotationTypeElementDeclaration ::= AbstractMethodModifiersopt Type identifier ( ) DefaultValueopt ;
     *</b>
     */
    static public class AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON extends Ast implements IAnnotationTypeElementDeclaration
    {
        private IAbstractMethodModifiersopt _AbstractMethodModifiersopt;
        private IType _Type;
        private identifier _identifier;
        private AstToken _LPAREN;
        private AstToken _RPAREN;
        private DefaultValue _DefaultValueopt;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getAbstractMethodModifiersopt</b> may be <b>null</b>
         */
        public IAbstractMethodModifiersopt getAbstractMethodModifiersopt() { return _AbstractMethodModifiersopt; }
        public IType getType() { return _Type; }
        public identifier getidentifier() { return _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public AstToken getRPAREN() { return _RPAREN; }
        /**
         * The value returned by <b>getDefaultValueopt</b> may be <b>null</b>
         */
        public DefaultValue getDefaultValueopt() { return _DefaultValueopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON(IToken leftIToken, IToken rightIToken,
                                                                                                                                    IAbstractMethodModifiersopt _AbstractMethodModifiersopt,
                                                                                                                                    IType _Type,
                                                                                                                                    identifier _identifier,
                                                                                                                                    AstToken _LPAREN,
                                                                                                                                    AstToken _RPAREN,
                                                                                                                                    DefaultValue _DefaultValueopt,
                                                                                                                                    AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt;
            if (_AbstractMethodModifiersopt != null) ((Ast) _AbstractMethodModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._DefaultValueopt = _DefaultValueopt;
            if (_DefaultValueopt != null) ((Ast) _DefaultValueopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AbstractMethodModifiersopt);
            list.add(_Type);
            list.add(_identifier);
            list.add(_LPAREN);
            list.add(_RPAREN);
            list.add(_DefaultValueopt);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON)) return false;
            if (! super.equals(o)) return false;
            AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON other = (AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON) o;
            if (_AbstractMethodModifiersopt == null)
                if (other._AbstractMethodModifiersopt != null) return false;
                else; // continue
            else if (! _AbstractMethodModifiersopt.equals(other._AbstractMethodModifiersopt)) return false;
            if (! _Type.equals(other._Type)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (_DefaultValueopt == null)
                if (other._DefaultValueopt != null) return false;
                else; // continue
            else if (! _DefaultValueopt.equals(other._DefaultValueopt)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AbstractMethodModifiersopt == null ? 0 : _AbstractMethodModifiersopt.hashCode());
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_DefaultValueopt == null ? 0 : _DefaultValueopt.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                if (_AbstractMethodModifiersopt != null) _AbstractMethodModifiersopt.accept(v);
                _Type.accept(v);
                _identifier.accept(v);
                _LPAREN.accept(v);
                _RPAREN.accept(v);
                if (_DefaultValueopt != null) _DefaultValueopt.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 227:  AnnotationTypeElementDeclaration ::= ;
     *</b>
     */
    static public class AnnotationTypeElementDeclaration__SEMICOLON extends AstToken implements IAnnotationTypeElementDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public AnnotationTypeElementDeclaration__SEMICOLON(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 295:  AssertStatement ::= assert Expression ;
     *</b>
     */
    static public class AssertStatement__assert_Expression_SEMICOLON extends Ast implements IAssertStatement
    {
        private AstToken _assert;
        private IExpression _Expression;
        private AstToken _SEMICOLON;

        public AstToken getassert() { return _assert; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public AssertStatement__assert_Expression_SEMICOLON(IToken leftIToken, IToken rightIToken,
                                                            AstToken _assert,
                                                            IExpression _Expression,
                                                            AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._assert = _assert;
            ((Ast) _assert).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_assert);
            list.add(_Expression);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AssertStatement__assert_Expression_SEMICOLON)) return false;
            if (! super.equals(o)) return false;
            AssertStatement__assert_Expression_SEMICOLON other = (AssertStatement__assert_Expression_SEMICOLON) o;
            if (! _assert.equals(other._assert)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_assert.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _assert.accept(v);
                _Expression.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 296:  AssertStatement ::= assert Expression : Expression ;
     *</b>
     */
    static public class AssertStatement__assert_Expression_COLON_Expression_SEMICOLON extends Ast implements IAssertStatement
    {
        private AstToken _assert;
        private IExpression _Expression;
        private AstToken _COLON;
        private IExpression _Expression4;
        private AstToken _SEMICOLON;

        public AstToken getassert() { return _assert; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getCOLON() { return _COLON; }
        public IExpression getExpression4() { return _Expression4; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }

        public AssertStatement__assert_Expression_COLON_Expression_SEMICOLON(IToken leftIToken, IToken rightIToken,
                                                                             AstToken _assert,
                                                                             IExpression _Expression,
                                                                             AstToken _COLON,
                                                                             IExpression _Expression4,
                                                                             AstToken _SEMICOLON)
        {
            super(leftIToken, rightIToken);

            this._assert = _assert;
            ((Ast) _assert).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._Expression4 = _Expression4;
            ((Ast) _Expression4).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_assert);
            list.add(_Expression);
            list.add(_COLON);
            list.add(_Expression4);
            list.add(_SEMICOLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AssertStatement__assert_Expression_COLON_Expression_SEMICOLON)) return false;
            if (! super.equals(o)) return false;
            AssertStatement__assert_Expression_COLON_Expression_SEMICOLON other = (AssertStatement__assert_Expression_COLON_Expression_SEMICOLON) o;
            if (! _assert.equals(other._assert)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            if (! _Expression4.equals(other._Expression4)) return false;
            if (! _SEMICOLON.equals(other._SEMICOLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_assert.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            hash = hash * 31 + (_Expression4.hashCode());
            hash = hash * 31 + (_SEMICOLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _assert.accept(v);
                _Expression.accept(v);
                _COLON.accept(v);
                _Expression4.accept(v);
                _SEMICOLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 304:  SwitchLabel ::= case ConstantExpression :
     *</b>
     */
    static public class SwitchLabel__case_ConstantExpression_COLON extends Ast implements ISwitchLabel
    {
        private AstToken _case;
        private IConstantExpression _ConstantExpression;
        private AstToken _COLON;

        public AstToken getcase() { return _case; }
        public IConstantExpression getConstantExpression() { return _ConstantExpression; }
        public AstToken getCOLON() { return _COLON; }

        public SwitchLabel__case_ConstantExpression_COLON(IToken leftIToken, IToken rightIToken,
                                                          AstToken _case,
                                                          IConstantExpression _ConstantExpression,
                                                          AstToken _COLON)
        {
            super(leftIToken, rightIToken);

            this._case = _case;
            ((Ast) _case).setParent(this);
            this._ConstantExpression = _ConstantExpression;
            ((Ast) _ConstantExpression).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_case);
            list.add(_ConstantExpression);
            list.add(_COLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchLabel__case_ConstantExpression_COLON)) return false;
            if (! super.equals(o)) return false;
            SwitchLabel__case_ConstantExpression_COLON other = (SwitchLabel__case_ConstantExpression_COLON) o;
            if (! _case.equals(other._case)) return false;
            if (! _ConstantExpression.equals(other._ConstantExpression)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_case.hashCode());
            hash = hash * 31 + (_ConstantExpression.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _case.accept(v);
                _ConstantExpression.accept(v);
                _COLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 305:  SwitchLabel ::= case EnumConstant :
     *</b>
     */
    static public class SwitchLabel__case_EnumConstant_COLON extends Ast implements ISwitchLabel
    {
        private AstToken _case;
        private IEnumConstant _EnumConstant;
        private AstToken _COLON;

        public AstToken getcase() { return _case; }
        public IEnumConstant getEnumConstant() { return _EnumConstant; }
        public AstToken getCOLON() { return _COLON; }

        public SwitchLabel__case_EnumConstant_COLON(IToken leftIToken, IToken rightIToken,
                                                    AstToken _case,
                                                    IEnumConstant _EnumConstant,
                                                    AstToken _COLON)
        {
            super(leftIToken, rightIToken);

            this._case = _case;
            ((Ast) _case).setParent(this);
            this._EnumConstant = _EnumConstant;
            ((Ast) _EnumConstant).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_case);
            list.add(_EnumConstant);
            list.add(_COLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchLabel__case_EnumConstant_COLON)) return false;
            if (! super.equals(o)) return false;
            SwitchLabel__case_EnumConstant_COLON other = (SwitchLabel__case_EnumConstant_COLON) o;
            if (! _case.equals(other._case)) return false;
            if (! _EnumConstant.equals(other._EnumConstant)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_case.hashCode());
            hash = hash * 31 + (_EnumConstant.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _case.accept(v);
                _EnumConstant.accept(v);
                _COLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 306:  SwitchLabel ::= default :
     *</b>
     */
    static public class SwitchLabel__default_COLON extends Ast implements ISwitchLabel
    {
        private AstToken _default;
        private AstToken _COLON;

        public AstToken getdefault() { return _default; }
        public AstToken getCOLON() { return _COLON; }

        public SwitchLabel__default_COLON(IToken leftIToken, IToken rightIToken,
                                          AstToken _default,
                                          AstToken _COLON)
        {
            super(leftIToken, rightIToken);

            this._default = _default;
            ((Ast) _default).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_default);
            list.add(_COLON);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof SwitchLabel__default_COLON)) return false;
            if (! super.equals(o)) return false;
            SwitchLabel__default_COLON other = (SwitchLabel__default_COLON) o;
            if (! _default.equals(other._default)) return false;
            if (! _COLON.equals(other._COLON)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_default.hashCode());
            hash = hash * 31 + (_COLON.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _default.accept(v);
                _COLON.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 326:  TryStatement ::= try Block Catches
     *</b>
     */
    static public class TryStatement__try_Block_Catches extends Ast implements ITryStatement
    {
        private AstToken _try;
        private Block _Block;
        private ICatches _Catches;

        public AstToken gettry() { return _try; }
        public Block getBlock() { return _Block; }
        public ICatches getCatches() { return _Catches; }

        public TryStatement__try_Block_Catches(IToken leftIToken, IToken rightIToken,
                                               AstToken _try,
                                               Block _Block,
                                               ICatches _Catches)
        {
            super(leftIToken, rightIToken);

            this._try = _try;
            ((Ast) _try).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            this._Catches = _Catches;
            ((Ast) _Catches).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_try);
            list.add(_Block);
            list.add(_Catches);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TryStatement__try_Block_Catches)) return false;
            if (! super.equals(o)) return false;
            TryStatement__try_Block_Catches other = (TryStatement__try_Block_Catches) o;
            if (! _try.equals(other._try)) return false;
            if (! _Block.equals(other._Block)) return false;
            if (! _Catches.equals(other._Catches)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_try.hashCode());
            hash = hash * 31 + (_Block.hashCode());
            hash = hash * 31 + (_Catches.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _try.accept(v);
                _Block.accept(v);
                _Catches.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 327:  TryStatement ::= try Block Catchesopt Finally
     *</b>
     */
    static public class TryStatement__try_Block_Catchesopt_Finally extends Ast implements ITryStatement
    {
        private AstToken _try;
        private Block _Block;
        private ICatchesopt _Catchesopt;
        private Finally _Finally;

        public AstToken gettry() { return _try; }
        public Block getBlock() { return _Block; }
        /**
         * The value returned by <b>getCatchesopt</b> may be <b>null</b>
         */
        public ICatchesopt getCatchesopt() { return _Catchesopt; }
        public Finally getFinally() { return _Finally; }

        public TryStatement__try_Block_Catchesopt_Finally(IToken leftIToken, IToken rightIToken,
                                                          AstToken _try,
                                                          Block _Block,
                                                          ICatchesopt _Catchesopt,
                                                          Finally _Finally)
        {
            super(leftIToken, rightIToken);

            this._try = _try;
            ((Ast) _try).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            this._Catchesopt = _Catchesopt;
            if (_Catchesopt != null) ((Ast) _Catchesopt).setParent(this);
            this._Finally = _Finally;
            ((Ast) _Finally).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_try);
            list.add(_Block);
            list.add(_Catchesopt);
            list.add(_Finally);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof TryStatement__try_Block_Catchesopt_Finally)) return false;
            if (! super.equals(o)) return false;
            TryStatement__try_Block_Catchesopt_Finally other = (TryStatement__try_Block_Catchesopt_Finally) o;
            if (! _try.equals(other._try)) return false;
            if (! _Block.equals(other._Block)) return false;
            if (_Catchesopt == null)
                if (other._Catchesopt != null) return false;
                else; // continue
            else if (! _Catchesopt.equals(other._Catchesopt)) return false;
            if (! _Finally.equals(other._Finally)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_try.hashCode());
            hash = hash * 31 + (_Block.hashCode());
            hash = hash * 31 + (_Catchesopt == null ? 0 : _Catchesopt.hashCode());
            hash = hash * 31 + (_Finally.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _try.accept(v);
                _Block.accept(v);
                if (_Catchesopt != null) _Catchesopt.accept(v);
                _Finally.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 335:  PrimaryNoNewArray ::= Type . class
     *</b>
     */
    static public class PrimaryNoNewArray__Type_DOT_class extends Ast implements IPrimaryNoNewArray
    {
        private IType _Type;
        private AstToken _DOT;
        private AstToken _class;

        public IType getType() { return _Type; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getclass() { return _class; }

        public PrimaryNoNewArray__Type_DOT_class(IToken leftIToken, IToken rightIToken,
                                                 IType _Type,
                                                 AstToken _DOT,
                                                 AstToken _class)
        {
            super(leftIToken, rightIToken);

            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._class = _class;
            ((Ast) _class).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Type);
            list.add(_DOT);
            list.add(_class);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PrimaryNoNewArray__Type_DOT_class)) return false;
            if (! super.equals(o)) return false;
            PrimaryNoNewArray__Type_DOT_class other = (PrimaryNoNewArray__Type_DOT_class) o;
            if (! _Type.equals(other._Type)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _class.equals(other._class)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Type.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_class.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Type.accept(v);
                _DOT.accept(v);
                _class.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 336:  PrimaryNoNewArray ::= void . class
     *</b>
     */
    static public class PrimaryNoNewArray__void_DOT_class extends Ast implements IPrimaryNoNewArray
    {
        private AstToken _void;
        private AstToken _DOT;
        private AstToken _class;

        public AstToken getvoid() { return _void; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getclass() { return _class; }

        public PrimaryNoNewArray__void_DOT_class(IToken leftIToken, IToken rightIToken,
                                                 AstToken _void,
                                                 AstToken _DOT,
                                                 AstToken _class)
        {
            super(leftIToken, rightIToken);

            this._void = _void;
            ((Ast) _void).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._class = _class;
            ((Ast) _class).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_void);
            list.add(_DOT);
            list.add(_class);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PrimaryNoNewArray__void_DOT_class)) return false;
            if (! super.equals(o)) return false;
            PrimaryNoNewArray__void_DOT_class other = (PrimaryNoNewArray__void_DOT_class) o;
            if (! _void.equals(other._void)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _class.equals(other._class)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_void.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_class.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _void.accept(v);
                _DOT.accept(v);
                _class.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 337:  PrimaryNoNewArray ::= this
     *</b>
     */
    static public class PrimaryNoNewArray__this extends AstToken implements IPrimaryNoNewArray
    {
        public IToken getthis() { return leftIToken; }

        public PrimaryNoNewArray__this(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 338:  PrimaryNoNewArray ::= ClassName . this
     *</b>
     */
    static public class PrimaryNoNewArray__ClassName_DOT_this extends Ast implements IPrimaryNoNewArray
    {
        private IClassName _ClassName;
        private AstToken _DOT;
        private AstToken _this;

        public IClassName getClassName() { return _ClassName; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getthis() { return _this; }

        public PrimaryNoNewArray__ClassName_DOT_this(IToken leftIToken, IToken rightIToken,
                                                     IClassName _ClassName,
                                                     AstToken _DOT,
                                                     AstToken _this)
        {
            super(leftIToken, rightIToken);

            this._ClassName = _ClassName;
            ((Ast) _ClassName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._this = _this;
            ((Ast) _this).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassName);
            list.add(_DOT);
            list.add(_this);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PrimaryNoNewArray__ClassName_DOT_this)) return false;
            if (! super.equals(o)) return false;
            PrimaryNoNewArray__ClassName_DOT_this other = (PrimaryNoNewArray__ClassName_DOT_this) o;
            if (! _ClassName.equals(other._ClassName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _this.equals(other._this)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_this.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ClassName.accept(v);
                _DOT.accept(v);
                _this.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 339:  PrimaryNoNewArray ::= ( Expression )
     *</b>
     */
    static public class PrimaryNoNewArray__LPAREN_Expression_RPAREN extends Ast implements IPrimaryNoNewArray
    {
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;

        public AstToken getLPAREN() { return _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }

        public PrimaryNoNewArray__LPAREN_Expression_RPAREN(IToken leftIToken, IToken rightIToken,
                                                           AstToken _LPAREN,
                                                           IExpression _Expression,
                                                           AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LPAREN);
            list.add(_Expression);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof PrimaryNoNewArray__LPAREN_Expression_RPAREN)) return false;
            if (! super.equals(o)) return false;
            PrimaryNoNewArray__LPAREN_Expression_RPAREN other = (PrimaryNoNewArray__LPAREN_Expression_RPAREN) o;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LPAREN.accept(v);
                _Expression.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 344:  Literal ::= IntegerLiteral
     *</b>
     */
    static public class Literal__IntegerLiteral extends AstToken implements ILiteral
    {
        public IToken getIntegerLiteral() { return leftIToken; }

        public Literal__IntegerLiteral(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 345:  Literal ::= LongLiteral
     *</b>
     */
    static public class Literal__LongLiteral extends AstToken implements ILiteral
    {
        public IToken getLongLiteral() { return leftIToken; }

        public Literal__LongLiteral(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 346:  Literal ::= FloatingPointLiteral
     *</b>
     */
    static public class Literal__FloatingPointLiteral extends AstToken implements ILiteral
    {
        public IToken getFloatingPointLiteral() { return leftIToken; }

        public Literal__FloatingPointLiteral(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 347:  Literal ::= DoubleLiteral
     *</b>
     */
    static public class Literal__DoubleLiteral extends AstToken implements ILiteral
    {
        public IToken getDoubleLiteral() { return leftIToken; }

        public Literal__DoubleLiteral(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 349:  Literal ::= CharacterLiteral
     *</b>
     */
    static public class Literal__CharacterLiteral extends AstToken implements ILiteral
    {
        public IToken getCharacterLiteral() { return leftIToken; }

        public Literal__CharacterLiteral(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 350:  Literal ::= StringLiteral
     *</b>
     */
    static public class Literal__StringLiteral extends AstToken implements ILiteral
    {
        public IToken getStringLiteral() { return leftIToken; }

        public Literal__StringLiteral(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 351:  Literal ::= null
     *</b>
     */
    static public class Literal__null extends AstToken implements ILiteral
    {
        public IToken getnull() { return leftIToken; }

        public Literal__null(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 352:  BooleanLiteral ::= true
     *</b>
     */
    static public class BooleanLiteral__true extends AstToken implements IBooleanLiteral
    {
        public IToken gettrue() { return leftIToken; }

        public BooleanLiteral__true(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 353:  BooleanLiteral ::= false
     *</b>
     */
    static public class BooleanLiteral__false extends AstToken implements IBooleanLiteral
    {
        public IToken getfalse() { return leftIToken; }

        public BooleanLiteral__false(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 354:  ClassInstanceCreationExpression ::= new TypeArgumentsopt ClassOrInterfaceType TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
     *</b>
     */
    static public class ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt extends Ast implements IClassInstanceCreationExpression
    {
        private AstToken _new;
        private TypeArguments _TypeArgumentsopt;
        private ClassType _ClassOrInterfaceType;
        private TypeArguments _TypeArgumentsopt4;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private ClassBody _ClassBodyopt;

        public AstToken getnew() { return _new; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        /**
         * The value returned by <b>getTypeArgumentsopt4</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt4() { return _TypeArgumentsopt4; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public ClassBody getClassBodyopt() { return _ClassBodyopt; }

        public ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt(IToken leftIToken, IToken rightIToken,
                                                                                                                                                      AstToken _new,
                                                                                                                                                      TypeArguments _TypeArgumentsopt,
                                                                                                                                                      ClassType _ClassOrInterfaceType,
                                                                                                                                                      TypeArguments _TypeArgumentsopt4,
                                                                                                                                                      AstToken _LPAREN,
                                                                                                                                                      IArgumentListopt _ArgumentListopt,
                                                                                                                                                      AstToken _RPAREN,
                                                                                                                                                      ClassBody _ClassBodyopt)
        {
            super(leftIToken, rightIToken);

            this._new = _new;
            ((Ast) _new).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._TypeArgumentsopt4 = _TypeArgumentsopt4;
            if (_TypeArgumentsopt4 != null) ((Ast) _TypeArgumentsopt4).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt != null) ((Ast) _ClassBodyopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_new);
            list.add(_TypeArgumentsopt);
            list.add(_ClassOrInterfaceType);
            list.add(_TypeArgumentsopt4);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            list.add(_ClassBodyopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt)) return false;
            if (! super.equals(o)) return false;
            ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt other = (ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) o;
            if (! _new.equals(other._new)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _ClassOrInterfaceType.equals(other._ClassOrInterfaceType)) return false;
            if (_TypeArgumentsopt4 == null)
                if (other._TypeArgumentsopt4 != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt4.equals(other._TypeArgumentsopt4)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (_ClassBodyopt == null)
                if (other._ClassBodyopt != null) return false;
                else; // continue
            else if (! _ClassBodyopt.equals(other._ClassBodyopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_new.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt4 == null ? 0 : _TypeArgumentsopt4.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_ClassBodyopt == null ? 0 : _ClassBodyopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _new.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _ClassOrInterfaceType.accept(v);
                if (_TypeArgumentsopt4 != null) _TypeArgumentsopt4.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
                if (_ClassBodyopt != null) _ClassBodyopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 355:  ClassInstanceCreationExpression ::= Primary . new TypeArgumentsopt identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
     *</b>
     */
    static public class ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt extends Ast implements IClassInstanceCreationExpression
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private AstToken _new;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private TypeArguments _TypeArgumentsopt6;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private ClassBody _ClassBodyopt;

        public IPrimary getPrimary() { return _Primary; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getnew() { return _new; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        /**
         * The value returned by <b>getTypeArgumentsopt6</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt6() { return _TypeArgumentsopt6; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public ClassBody getClassBodyopt() { return _ClassBodyopt; }

        public ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt(IToken leftIToken, IToken rightIToken,
                                                                                                                                                        IPrimary _Primary,
                                                                                                                                                        AstToken _DOT,
                                                                                                                                                        AstToken _new,
                                                                                                                                                        TypeArguments _TypeArgumentsopt,
                                                                                                                                                        identifier _identifier,
                                                                                                                                                        TypeArguments _TypeArgumentsopt6,
                                                                                                                                                        AstToken _LPAREN,
                                                                                                                                                        IArgumentListopt _ArgumentListopt,
                                                                                                                                                        AstToken _RPAREN,
                                                                                                                                                        ClassBody _ClassBodyopt)
        {
            super(leftIToken, rightIToken);

            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._TypeArgumentsopt6 = _TypeArgumentsopt6;
            if (_TypeArgumentsopt6 != null) ((Ast) _TypeArgumentsopt6).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt != null) ((Ast) _ClassBodyopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Primary);
            list.add(_DOT);
            list.add(_new);
            list.add(_TypeArgumentsopt);
            list.add(_identifier);
            list.add(_TypeArgumentsopt6);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            list.add(_ClassBodyopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt)) return false;
            if (! super.equals(o)) return false;
            ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt other = (ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) o;
            if (! _Primary.equals(other._Primary)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _new.equals(other._new)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (_TypeArgumentsopt6 == null)
                if (other._TypeArgumentsopt6 != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt6.equals(other._TypeArgumentsopt6)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (_ClassBodyopt == null)
                if (other._ClassBodyopt != null) return false;
                else; // continue
            else if (! _ClassBodyopt.equals(other._ClassBodyopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Primary.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_new.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt6 == null ? 0 : _TypeArgumentsopt6.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_ClassBodyopt == null ? 0 : _ClassBodyopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Primary.accept(v);
                _DOT.accept(v);
                _new.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _identifier.accept(v);
                if (_TypeArgumentsopt6 != null) _TypeArgumentsopt6.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
                if (_ClassBodyopt != null) _ClassBodyopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 358:  ArrayCreationExpression ::= new PrimitiveType DimExprs Dimsopt
     *</b>
     */
    static public class ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt extends Ast implements IArrayCreationExpression
    {
        private AstToken _new;
        private IPrimitiveType _PrimitiveType;
        private IDimExprs _DimExprs;
        private IDimsopt _Dimsopt;

        public AstToken getnew() { return _new; }
        public IPrimitiveType getPrimitiveType() { return _PrimitiveType; }
        public IDimExprs getDimExprs() { return _DimExprs; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public IDimsopt getDimsopt() { return _Dimsopt; }

        public ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt(IToken leftIToken, IToken rightIToken,
                                                                           AstToken _new,
                                                                           IPrimitiveType _PrimitiveType,
                                                                           IDimExprs _DimExprs,
                                                                           IDimsopt _Dimsopt)
        {
            super(leftIToken, rightIToken);

            this._new = _new;
            ((Ast) _new).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            ((Ast) _PrimitiveType).setParent(this);
            this._DimExprs = _DimExprs;
            ((Ast) _DimExprs).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt != null) ((Ast) _Dimsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_new);
            list.add(_PrimitiveType);
            list.add(_DimExprs);
            list.add(_Dimsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt)) return false;
            if (! super.equals(o)) return false;
            ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt other = (ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt) o;
            if (! _new.equals(other._new)) return false;
            if (! _PrimitiveType.equals(other._PrimitiveType)) return false;
            if (! _DimExprs.equals(other._DimExprs)) return false;
            if (_Dimsopt == null)
                if (other._Dimsopt != null) return false;
                else; // continue
            else if (! _Dimsopt.equals(other._Dimsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_new.hashCode());
            hash = hash * 31 + (_PrimitiveType.hashCode());
            hash = hash * 31 + (_DimExprs.hashCode());
            hash = hash * 31 + (_Dimsopt == null ? 0 : _Dimsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _new.accept(v);
                _PrimitiveType.accept(v);
                _DimExprs.accept(v);
                if (_Dimsopt != null) _Dimsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 359:  ArrayCreationExpression ::= new ClassOrInterfaceType DimExprs Dimsopt
     *</b>
     */
    static public class ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt extends Ast implements IArrayCreationExpression
    {
        private AstToken _new;
        private ClassType _ClassOrInterfaceType;
        private IDimExprs _DimExprs;
        private IDimsopt _Dimsopt;

        public AstToken getnew() { return _new; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        public IDimExprs getDimExprs() { return _DimExprs; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public IDimsopt getDimsopt() { return _Dimsopt; }

        public ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt(IToken leftIToken, IToken rightIToken,
                                                                                  AstToken _new,
                                                                                  ClassType _ClassOrInterfaceType,
                                                                                  IDimExprs _DimExprs,
                                                                                  IDimsopt _Dimsopt)
        {
            super(leftIToken, rightIToken);

            this._new = _new;
            ((Ast) _new).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._DimExprs = _DimExprs;
            ((Ast) _DimExprs).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt != null) ((Ast) _Dimsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_new);
            list.add(_ClassOrInterfaceType);
            list.add(_DimExprs);
            list.add(_Dimsopt);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt)) return false;
            if (! super.equals(o)) return false;
            ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt other = (ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt) o;
            if (! _new.equals(other._new)) return false;
            if (! _ClassOrInterfaceType.equals(other._ClassOrInterfaceType)) return false;
            if (! _DimExprs.equals(other._DimExprs)) return false;
            if (_Dimsopt == null)
                if (other._Dimsopt != null) return false;
                else; // continue
            else if (! _Dimsopt.equals(other._Dimsopt)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_new.hashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.hashCode());
            hash = hash * 31 + (_DimExprs.hashCode());
            hash = hash * 31 + (_Dimsopt == null ? 0 : _Dimsopt.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _new.accept(v);
                _ClassOrInterfaceType.accept(v);
                _DimExprs.accept(v);
                if (_Dimsopt != null) _Dimsopt.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 360:  ArrayCreationExpression ::= new PrimitiveType Dims ArrayInitializer
     *</b>
     */
    static public class ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer extends Ast implements IArrayCreationExpression
    {
        private AstToken _new;
        private IPrimitiveType _PrimitiveType;
        private IDims _Dims;
        private ArrayInitializer _ArrayInitializer;

        public AstToken getnew() { return _new; }
        public IPrimitiveType getPrimitiveType() { return _PrimitiveType; }
        public IDims getDims() { return _Dims; }
        public ArrayInitializer getArrayInitializer() { return _ArrayInitializer; }

        public ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer(IToken leftIToken, IToken rightIToken,
                                                                                AstToken _new,
                                                                                IPrimitiveType _PrimitiveType,
                                                                                IDims _Dims,
                                                                                ArrayInitializer _ArrayInitializer)
        {
            super(leftIToken, rightIToken);

            this._new = _new;
            ((Ast) _new).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            ((Ast) _PrimitiveType).setParent(this);
            this._Dims = _Dims;
            ((Ast) _Dims).setParent(this);
            this._ArrayInitializer = _ArrayInitializer;
            ((Ast) _ArrayInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_new);
            list.add(_PrimitiveType);
            list.add(_Dims);
            list.add(_ArrayInitializer);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer)) return false;
            if (! super.equals(o)) return false;
            ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer other = (ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer) o;
            if (! _new.equals(other._new)) return false;
            if (! _PrimitiveType.equals(other._PrimitiveType)) return false;
            if (! _Dims.equals(other._Dims)) return false;
            if (! _ArrayInitializer.equals(other._ArrayInitializer)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_new.hashCode());
            hash = hash * 31 + (_PrimitiveType.hashCode());
            hash = hash * 31 + (_Dims.hashCode());
            hash = hash * 31 + (_ArrayInitializer.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _new.accept(v);
                _PrimitiveType.accept(v);
                _Dims.accept(v);
                _ArrayInitializer.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 361:  ArrayCreationExpression ::= new ClassOrInterfaceType Dims ArrayInitializer
     *</b>
     */
    static public class ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer extends Ast implements IArrayCreationExpression
    {
        private AstToken _new;
        private ClassType _ClassOrInterfaceType;
        private IDims _Dims;
        private ArrayInitializer _ArrayInitializer;

        public AstToken getnew() { return _new; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        public IDims getDims() { return _Dims; }
        public ArrayInitializer getArrayInitializer() { return _ArrayInitializer; }

        public ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer(IToken leftIToken, IToken rightIToken,
                                                                                       AstToken _new,
                                                                                       ClassType _ClassOrInterfaceType,
                                                                                       IDims _Dims,
                                                                                       ArrayInitializer _ArrayInitializer)
        {
            super(leftIToken, rightIToken);

            this._new = _new;
            ((Ast) _new).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._Dims = _Dims;
            ((Ast) _Dims).setParent(this);
            this._ArrayInitializer = _ArrayInitializer;
            ((Ast) _ArrayInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_new);
            list.add(_ClassOrInterfaceType);
            list.add(_Dims);
            list.add(_ArrayInitializer);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer)) return false;
            if (! super.equals(o)) return false;
            ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer other = (ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer) o;
            if (! _new.equals(other._new)) return false;
            if (! _ClassOrInterfaceType.equals(other._ClassOrInterfaceType)) return false;
            if (! _Dims.equals(other._Dims)) return false;
            if (! _ArrayInitializer.equals(other._ArrayInitializer)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_new.hashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.hashCode());
            hash = hash * 31 + (_Dims.hashCode());
            hash = hash * 31 + (_ArrayInitializer.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _new.accept(v);
                _ClassOrInterfaceType.accept(v);
                _Dims.accept(v);
                _ArrayInitializer.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 365:  Dims ::= [ ]
     *</b>
     */
    static public class Dims__LBRACKET_RBRACKET extends Ast implements IDims
    {
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public AstToken getLBRACKET() { return _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public Dims__LBRACKET_RBRACKET(IToken leftIToken, IToken rightIToken,
                                       AstToken _LBRACKET,
                                       AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LBRACKET);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Dims__LBRACKET_RBRACKET)) return false;
            if (! super.equals(o)) return false;
            Dims__LBRACKET_RBRACKET other = (Dims__LBRACKET_RBRACKET) o;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LBRACKET.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 366:  Dims ::= Dims [ ]
     *</b>
     */
    static public class Dims__Dims_LBRACKET_RBRACKET extends Ast implements IDims
    {
        private IDims _Dims;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IDims getDims() { return _Dims; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public Dims__Dims_LBRACKET_RBRACKET(IToken leftIToken, IToken rightIToken,
                                            IDims _Dims,
                                            AstToken _LBRACKET,
                                            AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._Dims = _Dims;
            ((Ast) _Dims).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Dims);
            list.add(_LBRACKET);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof Dims__Dims_LBRACKET_RBRACKET)) return false;
            if (! super.equals(o)) return false;
            Dims__Dims_LBRACKET_RBRACKET other = (Dims__Dims_LBRACKET_RBRACKET) o;
            if (! _Dims.equals(other._Dims)) return false;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Dims.hashCode());
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Dims.accept(v);
                _LBRACKET.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 367:  FieldAccess ::= Primary . identifier
     *</b>
     */
    static public class FieldAccess__Primary_DOT_identifier extends Ast implements IFieldAccess
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private identifier _identifier;

        public IPrimary getPrimary() { return _Primary; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public FieldAccess__Primary_DOT_identifier(IToken leftIToken, IToken rightIToken,
                                                   IPrimary _Primary,
                                                   AstToken _DOT,
                                                   identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Primary);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FieldAccess__Primary_DOT_identifier)) return false;
            if (! super.equals(o)) return false;
            FieldAccess__Primary_DOT_identifier other = (FieldAccess__Primary_DOT_identifier) o;
            if (! _Primary.equals(other._Primary)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Primary.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Primary.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 368:  FieldAccess ::= super . identifier
     *</b>
     */
    static public class FieldAccess__super_DOT_identifier extends Ast implements IFieldAccess
    {
        private AstToken _super;
        private AstToken _DOT;
        private identifier _identifier;

        public AstToken getsuper() { return _super; }
        public AstToken getDOT() { return _DOT; }
        public identifier getidentifier() { return _identifier; }

        public FieldAccess__super_DOT_identifier(IToken leftIToken, IToken rightIToken,
                                                 AstToken _super,
                                                 AstToken _DOT,
                                                 identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_super);
            list.add(_DOT);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FieldAccess__super_DOT_identifier)) return false;
            if (! super.equals(o)) return false;
            FieldAccess__super_DOT_identifier other = (FieldAccess__super_DOT_identifier) o;
            if (! _super.equals(other._super)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _super.accept(v);
                _DOT.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 369:  FieldAccess ::= ClassName . super . identifier
     *</b>
     */
    static public class FieldAccess__ClassName_DOT_super_DOT_identifier extends Ast implements IFieldAccess
    {
        private IClassName _ClassName;
        private AstToken _DOT;
        private AstToken _super;
        private AstToken _DOT4;
        private identifier _identifier;

        public IClassName getClassName() { return _ClassName; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getsuper() { return _super; }
        public AstToken getDOT4() { return _DOT4; }
        public identifier getidentifier() { return _identifier; }

        public FieldAccess__ClassName_DOT_super_DOT_identifier(IToken leftIToken, IToken rightIToken,
                                                               IClassName _ClassName,
                                                               AstToken _DOT,
                                                               AstToken _super,
                                                               AstToken _DOT4,
                                                               identifier _identifier)
        {
            super(leftIToken, rightIToken);

            this._ClassName = _ClassName;
            ((Ast) _ClassName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT4 = _DOT4;
            ((Ast) _DOT4).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassName);
            list.add(_DOT);
            list.add(_super);
            list.add(_DOT4);
            list.add(_identifier);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof FieldAccess__ClassName_DOT_super_DOT_identifier)) return false;
            if (! super.equals(o)) return false;
            FieldAccess__ClassName_DOT_super_DOT_identifier other = (FieldAccess__ClassName_DOT_super_DOT_identifier) o;
            if (! _ClassName.equals(other._ClassName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _super.equals(other._super)) return false;
            if (! _DOT4.equals(other._DOT4)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_DOT4.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ClassName.accept(v);
                _DOT.accept(v);
                _super.accept(v);
                _DOT4.accept(v);
                _identifier.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 370:  MethodInvocation ::= MethodName ( ArgumentListopt )
     *</b>
     */
    static public class MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN extends Ast implements IMethodInvocation
    {
        private IMethodName _MethodName;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public IMethodName getMethodName() { return _MethodName; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN(IToken leftIToken, IToken rightIToken,
                                                                          IMethodName _MethodName,
                                                                          AstToken _LPAREN,
                                                                          IArgumentListopt _ArgumentListopt,
                                                                          AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._MethodName = _MethodName;
            ((Ast) _MethodName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MethodName);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN)) return false;
            if (! super.equals(o)) return false;
            MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN other = (MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN) o;
            if (! _MethodName.equals(other._MethodName)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MethodName.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MethodName.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 371:  MethodInvocation ::= Primary . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    static public class MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN extends Ast implements IMethodInvocation
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public IPrimary getPrimary() { return _Primary; }
        public AstToken getDOT() { return _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN(IToken leftIToken, IToken rightIToken,
                                                                                                       IPrimary _Primary,
                                                                                                       AstToken _DOT,
                                                                                                       TypeArguments _TypeArgumentsopt,
                                                                                                       identifier _identifier,
                                                                                                       AstToken _LPAREN,
                                                                                                       IArgumentListopt _ArgumentListopt,
                                                                                                       AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_Primary);
            list.add(_DOT);
            list.add(_TypeArgumentsopt);
            list.add(_identifier);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)) return false;
            if (! super.equals(o)) return false;
            MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN other = (MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) o;
            if (! _Primary.equals(other._Primary)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_Primary.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _Primary.accept(v);
                _DOT.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _identifier.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 372:  MethodInvocation ::= super . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    static public class MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN extends Ast implements IMethodInvocation
    {
        private AstToken _super;
        private AstToken _DOT;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public AstToken getsuper() { return _super; }
        public AstToken getDOT() { return _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN(IToken leftIToken, IToken rightIToken,
                                                                                                     AstToken _super,
                                                                                                     AstToken _DOT,
                                                                                                     TypeArguments _TypeArgumentsopt,
                                                                                                     identifier _identifier,
                                                                                                     AstToken _LPAREN,
                                                                                                     IArgumentListopt _ArgumentListopt,
                                                                                                     AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_super);
            list.add(_DOT);
            list.add(_TypeArgumentsopt);
            list.add(_identifier);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)) return false;
            if (! super.equals(o)) return false;
            MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN other = (MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) o;
            if (! _super.equals(other._super)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _super.accept(v);
                _DOT.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _identifier.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 373:  MethodInvocation ::= ClassName . super . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    static public class MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN extends Ast implements IMethodInvocation
    {
        private IClassName _ClassName;
        private AstToken _DOT;
        private AstToken _super;
        private AstToken _DOT4;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public IClassName getClassName() { return _ClassName; }
        public AstToken getDOT() { return _DOT; }
        public AstToken getsuper() { return _super; }
        public AstToken getDOT4() { return _DOT4; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN(IToken leftIToken, IToken rightIToken,
                                                                                                                   IClassName _ClassName,
                                                                                                                   AstToken _DOT,
                                                                                                                   AstToken _super,
                                                                                                                   AstToken _DOT4,
                                                                                                                   TypeArguments _TypeArgumentsopt,
                                                                                                                   identifier _identifier,
                                                                                                                   AstToken _LPAREN,
                                                                                                                   IArgumentListopt _ArgumentListopt,
                                                                                                                   AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._ClassName = _ClassName;
            ((Ast) _ClassName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT4 = _DOT4;
            ((Ast) _DOT4).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ClassName);
            list.add(_DOT);
            list.add(_super);
            list.add(_DOT4);
            list.add(_TypeArgumentsopt);
            list.add(_identifier);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)) return false;
            if (! super.equals(o)) return false;
            MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN other = (MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) o;
            if (! _ClassName.equals(other._ClassName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _super.equals(other._super)) return false;
            if (! _DOT4.equals(other._DOT4)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else; // continue
            else if (! _TypeArgumentsopt.equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ClassName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_super.hashCode());
            hash = hash * 31 + (_DOT4.hashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ClassName.accept(v);
                _DOT.accept(v);
                _super.accept(v);
                _DOT4.accept(v);
                if (_TypeArgumentsopt != null) _TypeArgumentsopt.accept(v);
                _identifier.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 374:  MethodInvocation ::= TypeName . TypeArguments identifier ( ArgumentListopt )
     *</b>
     */
    static public class MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN extends Ast implements IMethodInvocation
    {
        private ITypeName _TypeName;
        private AstToken _DOT;
        private TypeArguments _TypeArguments;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public ITypeName getTypeName() { return _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public TypeArguments getTypeArguments() { return _TypeArguments; }
        public identifier getidentifier() { return _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }

        public MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN(IToken leftIToken, IToken rightIToken,
                                                                                                     ITypeName _TypeName,
                                                                                                     AstToken _DOT,
                                                                                                     TypeArguments _TypeArguments,
                                                                                                     identifier _identifier,
                                                                                                     AstToken _LPAREN,
                                                                                                     IArgumentListopt _ArgumentListopt,
                                                                                                     AstToken _RPAREN)
        {
            super(leftIToken, rightIToken);

            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArguments = _TypeArguments;
            ((Ast) _TypeArguments).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TypeName);
            list.add(_DOT);
            list.add(_TypeArguments);
            list.add(_identifier);
            list.add(_LPAREN);
            list.add(_ArgumentListopt);
            list.add(_RPAREN);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN)) return false;
            if (! super.equals(o)) return false;
            MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN other = (MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN) o;
            if (! _TypeName.equals(other._TypeName)) return false;
            if (! _DOT.equals(other._DOT)) return false;
            if (! _TypeArguments.equals(other._TypeArguments)) return false;
            if (! _identifier.equals(other._identifier)) return false;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else; // continue
            else if (! _ArgumentListopt.equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TypeName.hashCode());
            hash = hash * 31 + (_DOT.hashCode());
            hash = hash * 31 + (_TypeArguments.hashCode());
            hash = hash * 31 + (_identifier.hashCode());
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TypeName.accept(v);
                _DOT.accept(v);
                _TypeArguments.accept(v);
                _identifier.accept(v);
                _LPAREN.accept(v);
                if (_ArgumentListopt != null) _ArgumentListopt.accept(v);
                _RPAREN.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 375:  ArrayAccess ::= ExpressionName [ Expression ]
     *</b>
     */
    static public class ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET extends Ast implements IArrayAccess
    {
        private IExpressionName _ExpressionName;
        private AstToken _LBRACKET;
        private IExpression _Expression;
        private AstToken _RBRACKET;

        public IExpressionName getExpressionName() { return _ExpressionName; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET(IToken leftIToken, IToken rightIToken,
                                                                        IExpressionName _ExpressionName,
                                                                        AstToken _LBRACKET,
                                                                        IExpression _Expression,
                                                                        AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._ExpressionName = _ExpressionName;
            ((Ast) _ExpressionName).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ExpressionName);
            list.add(_LBRACKET);
            list.add(_Expression);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET)) return false;
            if (! super.equals(o)) return false;
            ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET other = (ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET) o;
            if (! _ExpressionName.equals(other._ExpressionName)) return false;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ExpressionName.hashCode());
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ExpressionName.accept(v);
                _LBRACKET.accept(v);
                _Expression.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 376:  ArrayAccess ::= PrimaryNoNewArray [ Expression ]
     *</b>
     */
    static public class ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET extends Ast implements IArrayAccess
    {
        private IPrimaryNoNewArray _PrimaryNoNewArray;
        private AstToken _LBRACKET;
        private IExpression _Expression;
        private AstToken _RBRACKET;

        public IPrimaryNoNewArray getPrimaryNoNewArray() { return _PrimaryNoNewArray; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public IExpression getExpression() { return _Expression; }
        public AstToken getRBRACKET() { return _RBRACKET; }

        public ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET(IToken leftIToken, IToken rightIToken,
                                                                           IPrimaryNoNewArray _PrimaryNoNewArray,
                                                                           AstToken _LBRACKET,
                                                                           IExpression _Expression,
                                                                           AstToken _RBRACKET)
        {
            super(leftIToken, rightIToken);

            this._PrimaryNoNewArray = _PrimaryNoNewArray;
            ((Ast) _PrimaryNoNewArray).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PrimaryNoNewArray);
            list.add(_LBRACKET);
            list.add(_Expression);
            list.add(_RBRACKET);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET)) return false;
            if (! super.equals(o)) return false;
            ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET other = (ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET) o;
            if (! _PrimaryNoNewArray.equals(other._PrimaryNoNewArray)) return false;
            if (! _LBRACKET.equals(other._LBRACKET)) return false;
            if (! _Expression.equals(other._Expression)) return false;
            if (! _RBRACKET.equals(other._RBRACKET)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PrimaryNoNewArray.hashCode());
            hash = hash * 31 + (_LBRACKET.hashCode());
            hash = hash * 31 + (_Expression.hashCode());
            hash = hash * 31 + (_RBRACKET.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PrimaryNoNewArray.accept(v);
                _LBRACKET.accept(v);
                _Expression.accept(v);
                _RBRACKET.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 385:  UnaryExpression ::= + UnaryExpression
     *</b>
     */
    static public class UnaryExpression__PLUS_UnaryExpression extends Ast implements IUnaryExpression
    {
        private AstToken _PLUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getPLUS() { return _PLUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public UnaryExpression__PLUS_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                     AstToken _PLUS,
                                                     IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._PLUS = _PLUS;
            ((Ast) _PLUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_PLUS);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof UnaryExpression__PLUS_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            UnaryExpression__PLUS_UnaryExpression other = (UnaryExpression__PLUS_UnaryExpression) o;
            if (! _PLUS.equals(other._PLUS)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_PLUS.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _PLUS.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 386:  UnaryExpression ::= - UnaryExpression
     *</b>
     */
    static public class UnaryExpression__MINUS_UnaryExpression extends Ast implements IUnaryExpression
    {
        private AstToken _MINUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getMINUS() { return _MINUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public UnaryExpression__MINUS_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                      AstToken _MINUS,
                                                      IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._MINUS = _MINUS;
            ((Ast) _MINUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MINUS);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof UnaryExpression__MINUS_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            UnaryExpression__MINUS_UnaryExpression other = (UnaryExpression__MINUS_UnaryExpression) o;
            if (! _MINUS.equals(other._MINUS)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MINUS.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MINUS.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 391:  UnaryExpressionNotPlusMinus ::= ~ UnaryExpression
     *</b>
     */
    static public class UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression extends Ast implements IUnaryExpressionNotPlusMinus
    {
        private AstToken _TWIDDLE;
        private IUnaryExpression _UnaryExpression;

        public AstToken getTWIDDLE() { return _TWIDDLE; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                                    AstToken _TWIDDLE,
                                                                    IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._TWIDDLE = _TWIDDLE;
            ((Ast) _TWIDDLE).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_TWIDDLE);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression other = (UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression) o;
            if (! _TWIDDLE.equals(other._TWIDDLE)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_TWIDDLE.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _TWIDDLE.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 392:  UnaryExpressionNotPlusMinus ::= ! UnaryExpression
     *</b>
     */
    static public class UnaryExpressionNotPlusMinus__NOT_UnaryExpression extends Ast implements IUnaryExpressionNotPlusMinus
    {
        private AstToken _NOT;
        private IUnaryExpression _UnaryExpression;

        public AstToken getNOT() { return _NOT; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public UnaryExpressionNotPlusMinus__NOT_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                                AstToken _NOT,
                                                                IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._NOT = _NOT;
            ((Ast) _NOT).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_NOT);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof UnaryExpressionNotPlusMinus__NOT_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            UnaryExpressionNotPlusMinus__NOT_UnaryExpression other = (UnaryExpressionNotPlusMinus__NOT_UnaryExpression) o;
            if (! _NOT.equals(other._NOT)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_NOT.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _NOT.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 394:  CastExpression ::= ( PrimitiveType Dimsopt ) UnaryExpression
     *</b>
     */
    static public class CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression extends Ast implements ICastExpression
    {
        private AstToken _LPAREN;
        private IPrimitiveType _PrimitiveType;
        private IDimsopt _Dimsopt;
        private AstToken _RPAREN;
        private IUnaryExpression _UnaryExpression;

        public AstToken getLPAREN() { return _LPAREN; }
        public IPrimitiveType getPrimitiveType() { return _PrimitiveType; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public IDimsopt getDimsopt() { return _Dimsopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                                                   AstToken _LPAREN,
                                                                                   IPrimitiveType _PrimitiveType,
                                                                                   IDimsopt _Dimsopt,
                                                                                   AstToken _RPAREN,
                                                                                   IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            ((Ast) _PrimitiveType).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt != null) ((Ast) _Dimsopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LPAREN);
            list.add(_PrimitiveType);
            list.add(_Dimsopt);
            list.add(_RPAREN);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression other = (CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression) o;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _PrimitiveType.equals(other._PrimitiveType)) return false;
            if (_Dimsopt == null)
                if (other._Dimsopt != null) return false;
                else; // continue
            else if (! _Dimsopt.equals(other._Dimsopt)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_PrimitiveType.hashCode());
            hash = hash * 31 + (_Dimsopt == null ? 0 : _Dimsopt.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LPAREN.accept(v);
                _PrimitiveType.accept(v);
                if (_Dimsopt != null) _Dimsopt.accept(v);
                _RPAREN.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 395:  CastExpression ::= ( ReferenceType ) UnaryExpressionNotPlusMinus
     *</b>
     */
    static public class CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus extends Ast implements ICastExpression
    {
        private AstToken _LPAREN;
        private IReferenceType _ReferenceType;
        private AstToken _RPAREN;
        private IUnaryExpressionNotPlusMinus _UnaryExpressionNotPlusMinus;

        public AstToken getLPAREN() { return _LPAREN; }
        public IReferenceType getReferenceType() { return _ReferenceType; }
        public AstToken getRPAREN() { return _RPAREN; }
        public IUnaryExpressionNotPlusMinus getUnaryExpressionNotPlusMinus() { return _UnaryExpressionNotPlusMinus; }

        public CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus(IToken leftIToken, IToken rightIToken,
                                                                                       AstToken _LPAREN,
                                                                                       IReferenceType _ReferenceType,
                                                                                       AstToken _RPAREN,
                                                                                       IUnaryExpressionNotPlusMinus _UnaryExpressionNotPlusMinus)
        {
            super(leftIToken, rightIToken);

            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._UnaryExpressionNotPlusMinus = _UnaryExpressionNotPlusMinus;
            ((Ast) _UnaryExpressionNotPlusMinus).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_LPAREN);
            list.add(_ReferenceType);
            list.add(_RPAREN);
            list.add(_UnaryExpressionNotPlusMinus);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus)) return false;
            if (! super.equals(o)) return false;
            CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus other = (CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus) o;
            if (! _LPAREN.equals(other._LPAREN)) return false;
            if (! _ReferenceType.equals(other._ReferenceType)) return false;
            if (! _RPAREN.equals(other._RPAREN)) return false;
            if (! _UnaryExpressionNotPlusMinus.equals(other._UnaryExpressionNotPlusMinus)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_LPAREN.hashCode());
            hash = hash * 31 + (_ReferenceType.hashCode());
            hash = hash * 31 + (_RPAREN.hashCode());
            hash = hash * 31 + (_UnaryExpressionNotPlusMinus.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _LPAREN.accept(v);
                _ReferenceType.accept(v);
                _RPAREN.accept(v);
                _UnaryExpressionNotPlusMinus.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 397:  MultiplicativeExpression ::= MultiplicativeExpression * UnaryExpression
     *</b>
     */
    static public class MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression extends Ast implements IMultiplicativeExpression
    {
        private IMultiplicativeExpression _MultiplicativeExpression;
        private AstToken _MULTIPLY;
        private IUnaryExpression _UnaryExpression;

        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public AstToken getMULTIPLY() { return _MULTIPLY; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                                                           IMultiplicativeExpression _MultiplicativeExpression,
                                                                                           AstToken _MULTIPLY,
                                                                                           IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            ((Ast) _MULTIPLY).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MultiplicativeExpression);
            list.add(_MULTIPLY);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression other = (MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression) o;
            if (! _MultiplicativeExpression.equals(other._MultiplicativeExpression)) return false;
            if (! _MULTIPLY.equals(other._MULTIPLY)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MultiplicativeExpression.hashCode());
            hash = hash * 31 + (_MULTIPLY.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MultiplicativeExpression.accept(v);
                _MULTIPLY.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 398:  MultiplicativeExpression ::= MultiplicativeExpression / UnaryExpression
     *</b>
     */
    static public class MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression extends Ast implements IMultiplicativeExpression
    {
        private IMultiplicativeExpression _MultiplicativeExpression;
        private AstToken _DIVIDE;
        private IUnaryExpression _UnaryExpression;

        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public AstToken getDIVIDE() { return _DIVIDE; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                                                         IMultiplicativeExpression _MultiplicativeExpression,
                                                                                         AstToken _DIVIDE,
                                                                                         IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            this._DIVIDE = _DIVIDE;
            ((Ast) _DIVIDE).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MultiplicativeExpression);
            list.add(_DIVIDE);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression other = (MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression) o;
            if (! _MultiplicativeExpression.equals(other._MultiplicativeExpression)) return false;
            if (! _DIVIDE.equals(other._DIVIDE)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MultiplicativeExpression.hashCode());
            hash = hash * 31 + (_DIVIDE.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MultiplicativeExpression.accept(v);
                _DIVIDE.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 399:  MultiplicativeExpression ::= MultiplicativeExpression % UnaryExpression
     *</b>
     */
    static public class MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression extends Ast implements IMultiplicativeExpression
    {
        private IMultiplicativeExpression _MultiplicativeExpression;
        private AstToken _REMAINDER;
        private IUnaryExpression _UnaryExpression;

        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public AstToken getREMAINDER() { return _REMAINDER; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }

        public MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression(IToken leftIToken, IToken rightIToken,
                                                                                            IMultiplicativeExpression _MultiplicativeExpression,
                                                                                            AstToken _REMAINDER,
                                                                                            IUnaryExpression _UnaryExpression)
        {
            super(leftIToken, rightIToken);

            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            this._REMAINDER = _REMAINDER;
            ((Ast) _REMAINDER).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_MultiplicativeExpression);
            list.add(_REMAINDER);
            list.add(_UnaryExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression)) return false;
            if (! super.equals(o)) return false;
            MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression other = (MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression) o;
            if (! _MultiplicativeExpression.equals(other._MultiplicativeExpression)) return false;
            if (! _REMAINDER.equals(other._REMAINDER)) return false;
            if (! _UnaryExpression.equals(other._UnaryExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_MultiplicativeExpression.hashCode());
            hash = hash * 31 + (_REMAINDER.hashCode());
            hash = hash * 31 + (_UnaryExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _MultiplicativeExpression.accept(v);
                _REMAINDER.accept(v);
                _UnaryExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 401:  AdditiveExpression ::= AdditiveExpression + MultiplicativeExpression
     *</b>
     */
    static public class AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression extends Ast implements IAdditiveExpression
    {
        private IAdditiveExpression _AdditiveExpression;
        private AstToken _PLUS;
        private IMultiplicativeExpression _MultiplicativeExpression;

        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public AstToken getPLUS() { return _PLUS; }
        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }

        public AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression(IToken leftIToken, IToken rightIToken,
                                                                                    IAdditiveExpression _AdditiveExpression,
                                                                                    AstToken _PLUS,
                                                                                    IMultiplicativeExpression _MultiplicativeExpression)
        {
            super(leftIToken, rightIToken);

            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            this._PLUS = _PLUS;
            ((Ast) _PLUS).setParent(this);
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AdditiveExpression);
            list.add(_PLUS);
            list.add(_MultiplicativeExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression)) return false;
            if (! super.equals(o)) return false;
            AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression other = (AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression) o;
            if (! _AdditiveExpression.equals(other._AdditiveExpression)) return false;
            if (! _PLUS.equals(other._PLUS)) return false;
            if (! _MultiplicativeExpression.equals(other._MultiplicativeExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AdditiveExpression.hashCode());
            hash = hash * 31 + (_PLUS.hashCode());
            hash = hash * 31 + (_MultiplicativeExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AdditiveExpression.accept(v);
                _PLUS.accept(v);
                _MultiplicativeExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 402:  AdditiveExpression ::= AdditiveExpression - MultiplicativeExpression
     *</b>
     */
    static public class AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression extends Ast implements IAdditiveExpression
    {
        private IAdditiveExpression _AdditiveExpression;
        private AstToken _MINUS;
        private IMultiplicativeExpression _MultiplicativeExpression;

        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public AstToken getMINUS() { return _MINUS; }
        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }

        public AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression(IToken leftIToken, IToken rightIToken,
                                                                                     IAdditiveExpression _AdditiveExpression,
                                                                                     AstToken _MINUS,
                                                                                     IMultiplicativeExpression _MultiplicativeExpression)
        {
            super(leftIToken, rightIToken);

            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            this._MINUS = _MINUS;
            ((Ast) _MINUS).setParent(this);
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_AdditiveExpression);
            list.add(_MINUS);
            list.add(_MultiplicativeExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression)) return false;
            if (! super.equals(o)) return false;
            AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression other = (AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression) o;
            if (! _AdditiveExpression.equals(other._AdditiveExpression)) return false;
            if (! _MINUS.equals(other._MINUS)) return false;
            if (! _MultiplicativeExpression.equals(other._MultiplicativeExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_AdditiveExpression.hashCode());
            hash = hash * 31 + (_MINUS.hashCode());
            hash = hash * 31 + (_MultiplicativeExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _AdditiveExpression.accept(v);
                _MINUS.accept(v);
                _MultiplicativeExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 404:  ShiftExpression ::= ShiftExpression << AdditiveExpression
     *</b>
     */
    static public class ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression extends Ast implements IShiftExpression
    {
        private IShiftExpression _ShiftExpression;
        private AstToken _LEFT_SHIFT;
        private IAdditiveExpression _AdditiveExpression;

        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public AstToken getLEFT_SHIFT() { return _LEFT_SHIFT; }
        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }

        public ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression(IToken leftIToken, IToken rightIToken,
                                                                              IShiftExpression _ShiftExpression,
                                                                              AstToken _LEFT_SHIFT,
                                                                              IAdditiveExpression _AdditiveExpression)
        {
            super(leftIToken, rightIToken);

            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            this._LEFT_SHIFT = _LEFT_SHIFT;
            ((Ast) _LEFT_SHIFT).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ShiftExpression);
            list.add(_LEFT_SHIFT);
            list.add(_AdditiveExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression)) return false;
            if (! super.equals(o)) return false;
            ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression other = (ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression) o;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            if (! _LEFT_SHIFT.equals(other._LEFT_SHIFT)) return false;
            if (! _AdditiveExpression.equals(other._AdditiveExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ShiftExpression.hashCode());
            hash = hash * 31 + (_LEFT_SHIFT.hashCode());
            hash = hash * 31 + (_AdditiveExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ShiftExpression.accept(v);
                _LEFT_SHIFT.accept(v);
                _AdditiveExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 405:  ShiftExpression ::= ShiftExpression > > AdditiveExpression
     *</b>
     */
    static public class ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression extends Ast implements IShiftExpression
    {
        private IShiftExpression _ShiftExpression;
        private AstToken _GREATER;
        private AstToken _GREATER3;
        private IAdditiveExpression _AdditiveExpression;

        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public AstToken getGREATER3() { return _GREATER3; }
        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }

        public ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression(IToken leftIToken, IToken rightIToken,
                                                                                   IShiftExpression _ShiftExpression,
                                                                                   AstToken _GREATER,
                                                                                   AstToken _GREATER3,
                                                                                   IAdditiveExpression _AdditiveExpression)
        {
            super(leftIToken, rightIToken);

            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER3 = _GREATER3;
            ((Ast) _GREATER3).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ShiftExpression);
            list.add(_GREATER);
            list.add(_GREATER3);
            list.add(_AdditiveExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression)) return false;
            if (! super.equals(o)) return false;
            ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression other = (ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression) o;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            if (! _GREATER.equals(other._GREATER)) return false;
            if (! _GREATER3.equals(other._GREATER3)) return false;
            if (! _AdditiveExpression.equals(other._AdditiveExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ShiftExpression.hashCode());
            hash = hash * 31 + (_GREATER.hashCode());
            hash = hash * 31 + (_GREATER3.hashCode());
            hash = hash * 31 + (_AdditiveExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ShiftExpression.accept(v);
                _GREATER.accept(v);
                _GREATER3.accept(v);
                _AdditiveExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 406:  ShiftExpression ::= ShiftExpression > > > AdditiveExpression
     *</b>
     */
    static public class ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression extends Ast implements IShiftExpression
    {
        private IShiftExpression _ShiftExpression;
        private AstToken _GREATER;
        private AstToken _GREATER3;
        private AstToken _GREATER4;
        private IAdditiveExpression _AdditiveExpression;

        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public AstToken getGREATER3() { return _GREATER3; }
        public AstToken getGREATER4() { return _GREATER4; }
        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }

        public ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression(IToken leftIToken, IToken rightIToken,
                                                                                           IShiftExpression _ShiftExpression,
                                                                                           AstToken _GREATER,
                                                                                           AstToken _GREATER3,
                                                                                           AstToken _GREATER4,
                                                                                           IAdditiveExpression _AdditiveExpression)
        {
            super(leftIToken, rightIToken);

            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER3 = _GREATER3;
            ((Ast) _GREATER3).setParent(this);
            this._GREATER4 = _GREATER4;
            ((Ast) _GREATER4).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_ShiftExpression);
            list.add(_GREATER);
            list.add(_GREATER3);
            list.add(_GREATER4);
            list.add(_AdditiveExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression)) return false;
            if (! super.equals(o)) return false;
            ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression other = (ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression) o;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            if (! _GREATER.equals(other._GREATER)) return false;
            if (! _GREATER3.equals(other._GREATER3)) return false;
            if (! _GREATER4.equals(other._GREATER4)) return false;
            if (! _AdditiveExpression.equals(other._AdditiveExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_ShiftExpression.hashCode());
            hash = hash * 31 + (_GREATER.hashCode());
            hash = hash * 31 + (_GREATER3.hashCode());
            hash = hash * 31 + (_GREATER4.hashCode());
            hash = hash * 31 + (_AdditiveExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _ShiftExpression.accept(v);
                _GREATER.accept(v);
                _GREATER3.accept(v);
                _GREATER4.accept(v);
                _AdditiveExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 408:  RelationalExpression ::= RelationalExpression < ShiftExpression
     *</b>
     */
    static public class RelationalExpression__RelationalExpression_LESS_ShiftExpression extends Ast implements IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _LESS;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public AstToken getLESS() { return _LESS; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }

        public RelationalExpression__RelationalExpression_LESS_ShiftExpression(IToken leftIToken, IToken rightIToken,
                                                                               IRelationalExpression _RelationalExpression,
                                                                               AstToken _LESS,
                                                                               IShiftExpression _ShiftExpression)
        {
            super(leftIToken, rightIToken);

            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._LESS = _LESS;
            ((Ast) _LESS).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_RelationalExpression);
            list.add(_LESS);
            list.add(_ShiftExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof RelationalExpression__RelationalExpression_LESS_ShiftExpression)) return false;
            if (! super.equals(o)) return false;
            RelationalExpression__RelationalExpression_LESS_ShiftExpression other = (RelationalExpression__RelationalExpression_LESS_ShiftExpression) o;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            if (! _LESS.equals(other._LESS)) return false;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_RelationalExpression.hashCode());
            hash = hash * 31 + (_LESS.hashCode());
            hash = hash * 31 + (_ShiftExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _RelationalExpression.accept(v);
                _LESS.accept(v);
                _ShiftExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 409:  RelationalExpression ::= RelationalExpression > ShiftExpression
     *</b>
     */
    static public class RelationalExpression__RelationalExpression_GREATER_ShiftExpression extends Ast implements IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _GREATER;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }

        public RelationalExpression__RelationalExpression_GREATER_ShiftExpression(IToken leftIToken, IToken rightIToken,
                                                                                  IRelationalExpression _RelationalExpression,
                                                                                  AstToken _GREATER,
                                                                                  IShiftExpression _ShiftExpression)
        {
            super(leftIToken, rightIToken);

            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_RelationalExpression);
            list.add(_GREATER);
            list.add(_ShiftExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof RelationalExpression__RelationalExpression_GREATER_ShiftExpression)) return false;
            if (! super.equals(o)) return false;
            RelationalExpression__RelationalExpression_GREATER_ShiftExpression other = (RelationalExpression__RelationalExpression_GREATER_ShiftExpression) o;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            if (! _GREATER.equals(other._GREATER)) return false;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_RelationalExpression.hashCode());
            hash = hash * 31 + (_GREATER.hashCode());
            hash = hash * 31 + (_ShiftExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _RelationalExpression.accept(v);
                _GREATER.accept(v);
                _ShiftExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 410:  RelationalExpression ::= RelationalExpression <= ShiftExpression
     *</b>
     */
    static public class RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression extends Ast implements IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _LESS_EQUAL;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public AstToken getLESS_EQUAL() { return _LESS_EQUAL; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }

        public RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression(IToken leftIToken, IToken rightIToken,
                                                                                     IRelationalExpression _RelationalExpression,
                                                                                     AstToken _LESS_EQUAL,
                                                                                     IShiftExpression _ShiftExpression)
        {
            super(leftIToken, rightIToken);

            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._LESS_EQUAL = _LESS_EQUAL;
            ((Ast) _LESS_EQUAL).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_RelationalExpression);
            list.add(_LESS_EQUAL);
            list.add(_ShiftExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression)) return false;
            if (! super.equals(o)) return false;
            RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression other = (RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression) o;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            if (! _LESS_EQUAL.equals(other._LESS_EQUAL)) return false;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_RelationalExpression.hashCode());
            hash = hash * 31 + (_LESS_EQUAL.hashCode());
            hash = hash * 31 + (_ShiftExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _RelationalExpression.accept(v);
                _LESS_EQUAL.accept(v);
                _ShiftExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 411:  RelationalExpression ::= RelationalExpression > = ShiftExpression
     *</b>
     */
    static public class RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression extends Ast implements IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _GREATER;
        private AstToken _EQUAL;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public AstToken getEQUAL() { return _EQUAL; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }

        public RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression(IToken leftIToken, IToken rightIToken,
                                                                                        IRelationalExpression _RelationalExpression,
                                                                                        AstToken _GREATER,
                                                                                        AstToken _EQUAL,
                                                                                        IShiftExpression _ShiftExpression)
        {
            super(leftIToken, rightIToken);

            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_RelationalExpression);
            list.add(_GREATER);
            list.add(_EQUAL);
            list.add(_ShiftExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression)) return false;
            if (! super.equals(o)) return false;
            RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression other = (RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression) o;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            if (! _GREATER.equals(other._GREATER)) return false;
            if (! _EQUAL.equals(other._EQUAL)) return false;
            if (! _ShiftExpression.equals(other._ShiftExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_RelationalExpression.hashCode());
            hash = hash * 31 + (_GREATER.hashCode());
            hash = hash * 31 + (_EQUAL.hashCode());
            hash = hash * 31 + (_ShiftExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _RelationalExpression.accept(v);
                _GREATER.accept(v);
                _EQUAL.accept(v);
                _ShiftExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 412:  RelationalExpression ::= RelationalExpression instanceof ReferenceType
     *</b>
     */
    static public class RelationalExpression__RelationalExpression_instanceof_ReferenceType extends Ast implements IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _instanceof;
        private IReferenceType _ReferenceType;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public AstToken getinstanceof() { return _instanceof; }
        public IReferenceType getReferenceType() { return _ReferenceType; }

        public RelationalExpression__RelationalExpression_instanceof_ReferenceType(IToken leftIToken, IToken rightIToken,
                                                                                   IRelationalExpression _RelationalExpression,
                                                                                   AstToken _instanceof,
                                                                                   IReferenceType _ReferenceType)
        {
            super(leftIToken, rightIToken);

            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._instanceof = _instanceof;
            ((Ast) _instanceof).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_RelationalExpression);
            list.add(_instanceof);
            list.add(_ReferenceType);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof RelationalExpression__RelationalExpression_instanceof_ReferenceType)) return false;
            if (! super.equals(o)) return false;
            RelationalExpression__RelationalExpression_instanceof_ReferenceType other = (RelationalExpression__RelationalExpression_instanceof_ReferenceType) o;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            if (! _instanceof.equals(other._instanceof)) return false;
            if (! _ReferenceType.equals(other._ReferenceType)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_RelationalExpression.hashCode());
            hash = hash * 31 + (_instanceof.hashCode());
            hash = hash * 31 + (_ReferenceType.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _RelationalExpression.accept(v);
                _instanceof.accept(v);
                _ReferenceType.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 414:  EqualityExpression ::= EqualityExpression == RelationalExpression
     *</b>
     */
    static public class EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression extends Ast implements IEqualityExpression
    {
        private IEqualityExpression _EqualityExpression;
        private AstToken _EQUAL_EQUAL;
        private IRelationalExpression _RelationalExpression;

        public IEqualityExpression getEqualityExpression() { return _EqualityExpression; }
        public AstToken getEQUAL_EQUAL() { return _EQUAL_EQUAL; }
        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }

        public EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression(IToken leftIToken, IToken rightIToken,
                                                                                       IEqualityExpression _EqualityExpression,
                                                                                       AstToken _EQUAL_EQUAL,
                                                                                       IRelationalExpression _RelationalExpression)
        {
            super(leftIToken, rightIToken);

            this._EqualityExpression = _EqualityExpression;
            ((Ast) _EqualityExpression).setParent(this);
            this._EQUAL_EQUAL = _EQUAL_EQUAL;
            ((Ast) _EQUAL_EQUAL).setParent(this);
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_EqualityExpression);
            list.add(_EQUAL_EQUAL);
            list.add(_RelationalExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression)) return false;
            if (! super.equals(o)) return false;
            EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression other = (EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression) o;
            if (! _EqualityExpression.equals(other._EqualityExpression)) return false;
            if (! _EQUAL_EQUAL.equals(other._EQUAL_EQUAL)) return false;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_EqualityExpression.hashCode());
            hash = hash * 31 + (_EQUAL_EQUAL.hashCode());
            hash = hash * 31 + (_RelationalExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _EqualityExpression.accept(v);
                _EQUAL_EQUAL.accept(v);
                _RelationalExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 415:  EqualityExpression ::= EqualityExpression != RelationalExpression
     *</b>
     */
    static public class EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression extends Ast implements IEqualityExpression
    {
        private IEqualityExpression _EqualityExpression;
        private AstToken _NOT_EQUAL;
        private IRelationalExpression _RelationalExpression;

        public IEqualityExpression getEqualityExpression() { return _EqualityExpression; }
        public AstToken getNOT_EQUAL() { return _NOT_EQUAL; }
        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }

        public EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression(IToken leftIToken, IToken rightIToken,
                                                                                     IEqualityExpression _EqualityExpression,
                                                                                     AstToken _NOT_EQUAL,
                                                                                     IRelationalExpression _RelationalExpression)
        {
            super(leftIToken, rightIToken);

            this._EqualityExpression = _EqualityExpression;
            ((Ast) _EqualityExpression).setParent(this);
            this._NOT_EQUAL = _NOT_EQUAL;
            ((Ast) _NOT_EQUAL).setParent(this);
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_EqualityExpression);
            list.add(_NOT_EQUAL);
            list.add(_RelationalExpression);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression)) return false;
            if (! super.equals(o)) return false;
            EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression other = (EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression) o;
            if (! _EqualityExpression.equals(other._EqualityExpression)) return false;
            if (! _NOT_EQUAL.equals(other._NOT_EQUAL)) return false;
            if (! _RelationalExpression.equals(other._RelationalExpression)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_EqualityExpression.hashCode());
            hash = hash * 31 + (_NOT_EQUAL.hashCode());
            hash = hash * 31 + (_RelationalExpression.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _EqualityExpression.accept(v);
                _NOT_EQUAL.accept(v);
                _RelationalExpression.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 434:  AssignmentOperator ::= =
     *</b>
     */
    static public class AssignmentOperator__EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getEQUAL() { return leftIToken; }

        public AssignmentOperator__EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 435:  AssignmentOperator ::= *=
     *</b>
     */
    static public class AssignmentOperator__MULTIPLY_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getMULTIPLY_EQUAL() { return leftIToken; }

        public AssignmentOperator__MULTIPLY_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 436:  AssignmentOperator ::= /=
     *</b>
     */
    static public class AssignmentOperator__DIVIDE_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getDIVIDE_EQUAL() { return leftIToken; }

        public AssignmentOperator__DIVIDE_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 437:  AssignmentOperator ::= %=
     *</b>
     */
    static public class AssignmentOperator__REMAINDER_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getREMAINDER_EQUAL() { return leftIToken; }

        public AssignmentOperator__REMAINDER_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 438:  AssignmentOperator ::= +=
     *</b>
     */
    static public class AssignmentOperator__PLUS_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getPLUS_EQUAL() { return leftIToken; }

        public AssignmentOperator__PLUS_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 439:  AssignmentOperator ::= -=
     *</b>
     */
    static public class AssignmentOperator__MINUS_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getMINUS_EQUAL() { return leftIToken; }

        public AssignmentOperator__MINUS_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 440:  AssignmentOperator ::= <<=
     *</b>
     */
    static public class AssignmentOperator__LEFT_SHIFT_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getLEFT_SHIFT_EQUAL() { return leftIToken; }

        public AssignmentOperator__LEFT_SHIFT_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 441:  AssignmentOperator ::= > > =
     *</b>
     */
    static public class AssignmentOperator__GREATER_GREATER_EQUAL extends Ast implements IAssignmentOperator
    {
        private AstToken _GREATER;
        private AstToken _GREATER2;
        private AstToken _EQUAL;

        public AstToken getGREATER() { return _GREATER; }
        public AstToken getGREATER2() { return _GREATER2; }
        public AstToken getEQUAL() { return _EQUAL; }

        public AssignmentOperator__GREATER_GREATER_EQUAL(IToken leftIToken, IToken rightIToken,
                                                         AstToken _GREATER,
                                                         AstToken _GREATER2,
                                                         AstToken _EQUAL)
        {
            super(leftIToken, rightIToken);

            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER2 = _GREATER2;
            ((Ast) _GREATER2).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_GREATER);
            list.add(_GREATER2);
            list.add(_EQUAL);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AssignmentOperator__GREATER_GREATER_EQUAL)) return false;
            if (! super.equals(o)) return false;
            AssignmentOperator__GREATER_GREATER_EQUAL other = (AssignmentOperator__GREATER_GREATER_EQUAL) o;
            if (! _GREATER.equals(other._GREATER)) return false;
            if (! _GREATER2.equals(other._GREATER2)) return false;
            if (! _EQUAL.equals(other._EQUAL)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_GREATER.hashCode());
            hash = hash * 31 + (_GREATER2.hashCode());
            hash = hash * 31 + (_EQUAL.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _GREATER.accept(v);
                _GREATER2.accept(v);
                _EQUAL.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 442:  AssignmentOperator ::= > > > =
     *</b>
     */
    static public class AssignmentOperator__GREATER_GREATER_GREATER_EQUAL extends Ast implements IAssignmentOperator
    {
        private AstToken _GREATER;
        private AstToken _GREATER2;
        private AstToken _GREATER3;
        private AstToken _EQUAL;

        public AstToken getGREATER() { return _GREATER; }
        public AstToken getGREATER2() { return _GREATER2; }
        public AstToken getGREATER3() { return _GREATER3; }
        public AstToken getEQUAL() { return _EQUAL; }

        public AssignmentOperator__GREATER_GREATER_GREATER_EQUAL(IToken leftIToken, IToken rightIToken,
                                                                 AstToken _GREATER,
                                                                 AstToken _GREATER2,
                                                                 AstToken _GREATER3,
                                                                 AstToken _EQUAL)
        {
            super(leftIToken, rightIToken);

            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER2 = _GREATER2;
            ((Ast) _GREATER2).setParent(this);
            this._GREATER3 = _GREATER3;
            ((Ast) _GREATER3).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public java.util.ArrayList getAllChildren()
        {
            java.util.ArrayList list = new java.util.ArrayList();
            list.add(_GREATER);
            list.add(_GREATER2);
            list.add(_GREATER3);
            list.add(_EQUAL);
            return list;
        }

        public boolean equals(Object o)
        {
            if (o == this) return true;
            if (! (o instanceof AssignmentOperator__GREATER_GREATER_GREATER_EQUAL)) return false;
            if (! super.equals(o)) return false;
            AssignmentOperator__GREATER_GREATER_GREATER_EQUAL other = (AssignmentOperator__GREATER_GREATER_GREATER_EQUAL) o;
            if (! _GREATER.equals(other._GREATER)) return false;
            if (! _GREATER2.equals(other._GREATER2)) return false;
            if (! _GREATER3.equals(other._GREATER3)) return false;
            if (! _EQUAL.equals(other._EQUAL)) return false;
            return true;
        }

        public int hashCode()
        {
            int hash = super.hashCode();
            hash = hash * 31 + (_GREATER.hashCode());
            hash = hash * 31 + (_GREATER2.hashCode());
            hash = hash * 31 + (_GREATER3.hashCode());
            hash = hash * 31 + (_EQUAL.hashCode());
            return hash;
        }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            boolean checkChildren = v.visit(this);
            if (checkChildren)
            {
                _GREATER.accept(v);
                _GREATER2.accept(v);
                _GREATER3.accept(v);
                _EQUAL.accept(v);
            }
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 443:  AssignmentOperator ::= &=
     *</b>
     */
    static public class AssignmentOperator__AND_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getAND_EQUAL() { return leftIToken; }

        public AssignmentOperator__AND_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 444:  AssignmentOperator ::= ^=
     *</b>
     */
    static public class AssignmentOperator__XOR_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getXOR_EQUAL() { return leftIToken; }

        public AssignmentOperator__XOR_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    /**
     *<b>
     *<li>Rule 445:  AssignmentOperator ::= |=
     *</b>
     */
    static public class AssignmentOperator__OR_EQUAL extends AstToken implements IAssignmentOperator
    {
        public IToken getOR_EQUAL() { return leftIToken; }

        public AssignmentOperator__OR_EQUAL(IToken token) { super(token); initialize(); }

        public void accept(IAstVisitor v)
        {
            if (! v.preVisit(this)) return;
            enter((Visitor) v);
            v.postVisit(this);
        }

        public void enter(Visitor v)
        {
            v.visit(this);
            v.endVisit(this);
        }
    }

    public interface Visitor extends IAstVisitor
    {
        boolean visit(Ast n);
        void endVisit(Ast n);

        boolean visit(AstToken n);
        void endVisit(AstToken n);

        boolean visit(identifier n);
        void endVisit(identifier n);

        boolean visit(PrimitiveType n);
        void endVisit(PrimitiveType n);

        boolean visit(ClassType n);
        void endVisit(ClassType n);

        boolean visit(InterfaceType n);
        void endVisit(InterfaceType n);

        boolean visit(TypeName n);
        void endVisit(TypeName n);

        boolean visit(ArrayType n);
        void endVisit(ArrayType n);

        boolean visit(TypeParameter n);
        void endVisit(TypeParameter n);

        boolean visit(TypeBound n);
        void endVisit(TypeBound n);

        boolean visit(AdditionalBoundList n);
        void endVisit(AdditionalBoundList n);

        boolean visit(AdditionalBound n);
        void endVisit(AdditionalBound n);

        boolean visit(TypeArguments n);
        void endVisit(TypeArguments n);

        boolean visit(ActualTypeArgumentList n);
        void endVisit(ActualTypeArgumentList n);

        boolean visit(Wildcard n);
        void endVisit(Wildcard n);

        boolean visit(PackageName n);
        void endVisit(PackageName n);

        boolean visit(ExpressionName n);
        void endVisit(ExpressionName n);

        boolean visit(MethodName n);
        void endVisit(MethodName n);

        boolean visit(PackageOrTypeName n);
        void endVisit(PackageOrTypeName n);

        boolean visit(AmbiguousName n);
        void endVisit(AmbiguousName n);

        boolean visit(CompilationUnit n);
        void endVisit(CompilationUnit n);

        boolean visit(ImportDeclarations n);
        void endVisit(ImportDeclarations n);

        boolean visit(TypeDeclarations n);
        void endVisit(TypeDeclarations n);

        boolean visit(PackageDeclaration n);
        void endVisit(PackageDeclaration n);

        boolean visit(SingleTypeImportDeclaration n);
        void endVisit(SingleTypeImportDeclaration n);

        boolean visit(TypeImportOnDemandDeclaration n);
        void endVisit(TypeImportOnDemandDeclaration n);

        boolean visit(SingleStaticImportDeclaration n);
        void endVisit(SingleStaticImportDeclaration n);

        boolean visit(StaticImportOnDemandDeclaration n);
        void endVisit(StaticImportOnDemandDeclaration n);

        boolean visit(TypeDeclaration n);
        void endVisit(TypeDeclaration n);

        boolean visit(NormalClassDeclaration n);
        void endVisit(NormalClassDeclaration n);

        boolean visit(ClassModifiers n);
        void endVisit(ClassModifiers n);

        boolean visit(TypeParameters n);
        void endVisit(TypeParameters n);

        boolean visit(TypeParameterList n);
        void endVisit(TypeParameterList n);

        boolean visit(Super n);
        void endVisit(Super n);

        boolean visit(Interfaces n);
        void endVisit(Interfaces n);

        boolean visit(InterfaceTypeList n);
        void endVisit(InterfaceTypeList n);

        boolean visit(ClassBody n);
        void endVisit(ClassBody n);

        boolean visit(ClassBodyDeclarations n);
        void endVisit(ClassBodyDeclarations n);

        boolean visit(ClassMemberDeclaration n);
        void endVisit(ClassMemberDeclaration n);

        boolean visit(FieldDeclaration n);
        void endVisit(FieldDeclaration n);

        boolean visit(VariableDeclarators n);
        void endVisit(VariableDeclarators n);

        boolean visit(VariableDeclarator n);
        void endVisit(VariableDeclarator n);

        boolean visit(VariableDeclaratorId n);
        void endVisit(VariableDeclaratorId n);

        boolean visit(FieldModifiers n);
        void endVisit(FieldModifiers n);

        boolean visit(MethodDeclaration n);
        void endVisit(MethodDeclaration n);

        boolean visit(MethodHeader n);
        void endVisit(MethodHeader n);

        boolean visit(ResultType n);
        void endVisit(ResultType n);

        boolean visit(FormalParameterList n);
        void endVisit(FormalParameterList n);

        boolean visit(FormalParameters n);
        void endVisit(FormalParameters n);

        boolean visit(FormalParameter n);
        void endVisit(FormalParameter n);

        boolean visit(VariableModifiers n);
        void endVisit(VariableModifiers n);

        boolean visit(VariableModifier n);
        void endVisit(VariableModifier n);

        boolean visit(LastFormalParameter n);
        void endVisit(LastFormalParameter n);

        boolean visit(MethodModifiers n);
        void endVisit(MethodModifiers n);

        boolean visit(Throws n);
        void endVisit(Throws n);

        boolean visit(ExceptionTypeList n);
        void endVisit(ExceptionTypeList n);

        boolean visit(MethodBody n);
        void endVisit(MethodBody n);

        boolean visit(StaticInitializer n);
        void endVisit(StaticInitializer n);

        boolean visit(ConstructorDeclaration n);
        void endVisit(ConstructorDeclaration n);

        boolean visit(ConstructorDeclarator n);
        void endVisit(ConstructorDeclarator n);

        boolean visit(ConstructorModifiers n);
        void endVisit(ConstructorModifiers n);

        boolean visit(ConstructorBody n);
        void endVisit(ConstructorBody n);

        boolean visit(EnumDeclaration n);
        void endVisit(EnumDeclaration n);

        boolean visit(EnumBody n);
        void endVisit(EnumBody n);

        boolean visit(EnumConstants n);
        void endVisit(EnumConstants n);

        boolean visit(EnumConstant n);
        void endVisit(EnumConstant n);

        boolean visit(Arguments n);
        void endVisit(Arguments n);

        boolean visit(EnumBodyDeclarations n);
        void endVisit(EnumBodyDeclarations n);

        boolean visit(NormalInterfaceDeclaration n);
        void endVisit(NormalInterfaceDeclaration n);

        boolean visit(InterfaceModifiers n);
        void endVisit(InterfaceModifiers n);

        boolean visit(InterfaceBody n);
        void endVisit(InterfaceBody n);

        boolean visit(InterfaceMemberDeclarations n);
        void endVisit(InterfaceMemberDeclarations n);

        boolean visit(InterfaceMemberDeclaration n);
        void endVisit(InterfaceMemberDeclaration n);

        boolean visit(ConstantDeclaration n);
        void endVisit(ConstantDeclaration n);

        boolean visit(ConstantModifiers n);
        void endVisit(ConstantModifiers n);

        boolean visit(AbstractMethodDeclaration n);
        void endVisit(AbstractMethodDeclaration n);

        boolean visit(AbstractMethodModifiers n);
        void endVisit(AbstractMethodModifiers n);

        boolean visit(AnnotationTypeDeclaration n);
        void endVisit(AnnotationTypeDeclaration n);

        boolean visit(AnnotationTypeBody n);
        void endVisit(AnnotationTypeBody n);

        boolean visit(AnnotationTypeElementDeclarations n);
        void endVisit(AnnotationTypeElementDeclarations n);

        boolean visit(DefaultValue n);
        void endVisit(DefaultValue n);

        boolean visit(Annotations n);
        void endVisit(Annotations n);

        boolean visit(NormalAnnotation n);
        void endVisit(NormalAnnotation n);

        boolean visit(ElementValuePairs n);
        void endVisit(ElementValuePairs n);

        boolean visit(ElementValuePair n);
        void endVisit(ElementValuePair n);

        boolean visit(ElementValueArrayInitializer n);
        void endVisit(ElementValueArrayInitializer n);

        boolean visit(ElementValues n);
        void endVisit(ElementValues n);

        boolean visit(MarkerAnnotation n);
        void endVisit(MarkerAnnotation n);

        boolean visit(SingleElementAnnotation n);
        void endVisit(SingleElementAnnotation n);

        boolean visit(ArrayInitializer n);
        void endVisit(ArrayInitializer n);

        boolean visit(VariableInitializers n);
        void endVisit(VariableInitializers n);

        boolean visit(Block n);
        void endVisit(Block n);

        boolean visit(BlockStatements n);
        void endVisit(BlockStatements n);

        boolean visit(LocalVariableDeclarationStatement n);
        void endVisit(LocalVariableDeclarationStatement n);

        boolean visit(LocalVariableDeclaration n);
        void endVisit(LocalVariableDeclaration n);

        boolean visit(IfThenStatement n);
        void endVisit(IfThenStatement n);

        boolean visit(IfThenElseStatement n);
        void endVisit(IfThenElseStatement n);

        boolean visit(IfThenElseStatementNoShortIf n);
        void endVisit(IfThenElseStatementNoShortIf n);

        boolean visit(EmptyStatement n);
        void endVisit(EmptyStatement n);

        boolean visit(LabeledStatement n);
        void endVisit(LabeledStatement n);

        boolean visit(LabeledStatementNoShortIf n);
        void endVisit(LabeledStatementNoShortIf n);

        boolean visit(ExpressionStatement n);
        void endVisit(ExpressionStatement n);

        boolean visit(SwitchStatement n);
        void endVisit(SwitchStatement n);

        boolean visit(SwitchBlock n);
        void endVisit(SwitchBlock n);

        boolean visit(SwitchBlockStatementGroups n);
        void endVisit(SwitchBlockStatementGroups n);

        boolean visit(SwitchBlockStatementGroup n);
        void endVisit(SwitchBlockStatementGroup n);

        boolean visit(SwitchLabels n);
        void endVisit(SwitchLabels n);

        boolean visit(WhileStatement n);
        void endVisit(WhileStatement n);

        boolean visit(WhileStatementNoShortIf n);
        void endVisit(WhileStatementNoShortIf n);

        boolean visit(DoStatement n);
        void endVisit(DoStatement n);

        boolean visit(BasicForStatement n);
        void endVisit(BasicForStatement n);

        boolean visit(ForStatementNoShortIf n);
        void endVisit(ForStatementNoShortIf n);

        boolean visit(StatementExpressionList n);
        void endVisit(StatementExpressionList n);

        boolean visit(EnhancedForStatement n);
        void endVisit(EnhancedForStatement n);

        boolean visit(BreakStatement n);
        void endVisit(BreakStatement n);

        boolean visit(ContinueStatement n);
        void endVisit(ContinueStatement n);

        boolean visit(ReturnStatement n);
        void endVisit(ReturnStatement n);

        boolean visit(ThrowStatement n);
        void endVisit(ThrowStatement n);

        boolean visit(SynchronizedStatement n);
        void endVisit(SynchronizedStatement n);

        boolean visit(Catches n);
        void endVisit(Catches n);

        boolean visit(CatchClause n);
        void endVisit(CatchClause n);

        boolean visit(Finally n);
        void endVisit(Finally n);

        boolean visit(ArgumentList n);
        void endVisit(ArgumentList n);

        boolean visit(DimExprs n);
        void endVisit(DimExprs n);

        boolean visit(DimExpr n);
        void endVisit(DimExpr n);

        boolean visit(PostIncrementExpression n);
        void endVisit(PostIncrementExpression n);

        boolean visit(PostDecrementExpression n);
        void endVisit(PostDecrementExpression n);

        boolean visit(PreIncrementExpression n);
        void endVisit(PreIncrementExpression n);

        boolean visit(PreDecrementExpression n);
        void endVisit(PreDecrementExpression n);

        boolean visit(AndExpression n);
        void endVisit(AndExpression n);

        boolean visit(ExclusiveOrExpression n);
        void endVisit(ExclusiveOrExpression n);

        boolean visit(InclusiveOrExpression n);
        void endVisit(InclusiveOrExpression n);

        boolean visit(ConditionalAndExpression n);
        void endVisit(ConditionalAndExpression n);

        boolean visit(ConditionalOrExpression n);
        void endVisit(ConditionalOrExpression n);

        boolean visit(ConditionalExpression n);
        void endVisit(ConditionalExpression n);

        boolean visit(Assignment n);
        void endVisit(Assignment n);

        boolean visit(Commaopt n);
        void endVisit(Commaopt n);

        boolean visit(Ellipsisopt n);
        void endVisit(Ellipsisopt n);

        boolean visit(LPGUserAction__BeginAction_BlockStatementsopt_EndAction n);
        void endVisit(LPGUserAction__BeginAction_BlockStatementsopt_EndAction n);

        boolean visit(LPGUserAction__BeginJava_BlockStatementsopt_EndJava n);
        void endVisit(LPGUserAction__BeginJava_BlockStatementsopt_EndJava n);

        boolean visit(LPGUserAction__NoAction n);
        void endVisit(LPGUserAction__NoAction n);

        boolean visit(LPGUserAction__NullAction n);
        void endVisit(LPGUserAction__NullAction n);

        boolean visit(LPGUserAction__BadAction n);
        void endVisit(LPGUserAction__BadAction n);

        boolean visit(IntegralType__byte n);
        void endVisit(IntegralType__byte n);

        boolean visit(IntegralType__short n);
        void endVisit(IntegralType__short n);

        boolean visit(IntegralType__int n);
        void endVisit(IntegralType__int n);

        boolean visit(IntegralType__long n);
        void endVisit(IntegralType__long n);

        boolean visit(IntegralType__char n);
        void endVisit(IntegralType__char n);

        boolean visit(FloatingPointType__float n);
        void endVisit(FloatingPointType__float n);

        boolean visit(FloatingPointType__double n);
        void endVisit(FloatingPointType__double n);

        boolean visit(WildcardBounds__extends_ReferenceType n);
        void endVisit(WildcardBounds__extends_ReferenceType n);

        boolean visit(WildcardBounds__super_ReferenceType n);
        void endVisit(WildcardBounds__super_ReferenceType n);

        boolean visit(ClassModifier__public n);
        void endVisit(ClassModifier__public n);

        boolean visit(ClassModifier__protected n);
        void endVisit(ClassModifier__protected n);

        boolean visit(ClassModifier__private n);
        void endVisit(ClassModifier__private n);

        boolean visit(ClassModifier__abstract n);
        void endVisit(ClassModifier__abstract n);

        boolean visit(ClassModifier__static n);
        void endVisit(ClassModifier__static n);

        boolean visit(ClassModifier__final n);
        void endVisit(ClassModifier__final n);

        boolean visit(ClassModifier__strictfp n);
        void endVisit(ClassModifier__strictfp n);

        boolean visit(FieldModifier__public n);
        void endVisit(FieldModifier__public n);

        boolean visit(FieldModifier__protected n);
        void endVisit(FieldModifier__protected n);

        boolean visit(FieldModifier__private n);
        void endVisit(FieldModifier__private n);

        boolean visit(FieldModifier__static n);
        void endVisit(FieldModifier__static n);

        boolean visit(FieldModifier__final n);
        void endVisit(FieldModifier__final n);

        boolean visit(FieldModifier__transient n);
        void endVisit(FieldModifier__transient n);

        boolean visit(FieldModifier__volatile n);
        void endVisit(FieldModifier__volatile n);

        boolean visit(MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN n);
        void endVisit(MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN n);

        boolean visit(MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET n);
        void endVisit(MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET n);

        boolean visit(MethodModifier__public n);
        void endVisit(MethodModifier__public n);

        boolean visit(MethodModifier__protected n);
        void endVisit(MethodModifier__protected n);

        boolean visit(MethodModifier__private n);
        void endVisit(MethodModifier__private n);

        boolean visit(MethodModifier__abstract n);
        void endVisit(MethodModifier__abstract n);

        boolean visit(MethodModifier__static n);
        void endVisit(MethodModifier__static n);

        boolean visit(MethodModifier__final n);
        void endVisit(MethodModifier__final n);

        boolean visit(MethodModifier__synchronized n);
        void endVisit(MethodModifier__synchronized n);

        boolean visit(MethodModifier__native n);
        void endVisit(MethodModifier__native n);

        boolean visit(MethodModifier__strictfp n);
        void endVisit(MethodModifier__strictfp n);

        boolean visit(ConstructorModifier__public n);
        void endVisit(ConstructorModifier__public n);

        boolean visit(ConstructorModifier__protected n);
        void endVisit(ConstructorModifier__protected n);

        boolean visit(ConstructorModifier__private n);
        void endVisit(ConstructorModifier__private n);

        boolean visit(ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n);
        void endVisit(ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n);

        boolean visit(ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n);
        void endVisit(ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n);

        boolean visit(ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n);
        void endVisit(ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n);

        boolean visit(InterfaceModifier__public n);
        void endVisit(InterfaceModifier__public n);

        boolean visit(InterfaceModifier__protected n);
        void endVisit(InterfaceModifier__protected n);

        boolean visit(InterfaceModifier__private n);
        void endVisit(InterfaceModifier__private n);

        boolean visit(InterfaceModifier__abstract n);
        void endVisit(InterfaceModifier__abstract n);

        boolean visit(InterfaceModifier__static n);
        void endVisit(InterfaceModifier__static n);

        boolean visit(InterfaceModifier__strictfp n);
        void endVisit(InterfaceModifier__strictfp n);

        boolean visit(ExtendsInterfaces__extends_InterfaceType n);
        void endVisit(ExtendsInterfaces__extends_InterfaceType n);

        boolean visit(ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType n);
        void endVisit(ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType n);

        boolean visit(ConstantModifier__public n);
        void endVisit(ConstantModifier__public n);

        boolean visit(ConstantModifier__static n);
        void endVisit(ConstantModifier__static n);

        boolean visit(ConstantModifier__final n);
        void endVisit(ConstantModifier__final n);

        boolean visit(AbstractMethodModifier__public n);
        void endVisit(AbstractMethodModifier__public n);

        boolean visit(AbstractMethodModifier__abstract n);
        void endVisit(AbstractMethodModifier__abstract n);

        boolean visit(AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON n);
        void endVisit(AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON n);

        boolean visit(AnnotationTypeElementDeclaration__SEMICOLON n);
        void endVisit(AnnotationTypeElementDeclaration__SEMICOLON n);

        boolean visit(AssertStatement__assert_Expression_SEMICOLON n);
        void endVisit(AssertStatement__assert_Expression_SEMICOLON n);

        boolean visit(AssertStatement__assert_Expression_COLON_Expression_SEMICOLON n);
        void endVisit(AssertStatement__assert_Expression_COLON_Expression_SEMICOLON n);

        boolean visit(SwitchLabel__case_ConstantExpression_COLON n);
        void endVisit(SwitchLabel__case_ConstantExpression_COLON n);

        boolean visit(SwitchLabel__case_EnumConstant_COLON n);
        void endVisit(SwitchLabel__case_EnumConstant_COLON n);

        boolean visit(SwitchLabel__default_COLON n);
        void endVisit(SwitchLabel__default_COLON n);

        boolean visit(TryStatement__try_Block_Catches n);
        void endVisit(TryStatement__try_Block_Catches n);

        boolean visit(TryStatement__try_Block_Catchesopt_Finally n);
        void endVisit(TryStatement__try_Block_Catchesopt_Finally n);

        boolean visit(PrimaryNoNewArray__Type_DOT_class n);
        void endVisit(PrimaryNoNewArray__Type_DOT_class n);

        boolean visit(PrimaryNoNewArray__void_DOT_class n);
        void endVisit(PrimaryNoNewArray__void_DOT_class n);

        boolean visit(PrimaryNoNewArray__this n);
        void endVisit(PrimaryNoNewArray__this n);

        boolean visit(PrimaryNoNewArray__ClassName_DOT_this n);
        void endVisit(PrimaryNoNewArray__ClassName_DOT_this n);

        boolean visit(PrimaryNoNewArray__LPAREN_Expression_RPAREN n);
        void endVisit(PrimaryNoNewArray__LPAREN_Expression_RPAREN n);

        boolean visit(Literal__IntegerLiteral n);
        void endVisit(Literal__IntegerLiteral n);

        boolean visit(Literal__LongLiteral n);
        void endVisit(Literal__LongLiteral n);

        boolean visit(Literal__FloatingPointLiteral n);
        void endVisit(Literal__FloatingPointLiteral n);

        boolean visit(Literal__DoubleLiteral n);
        void endVisit(Literal__DoubleLiteral n);

        boolean visit(Literal__CharacterLiteral n);
        void endVisit(Literal__CharacterLiteral n);

        boolean visit(Literal__StringLiteral n);
        void endVisit(Literal__StringLiteral n);

        boolean visit(Literal__null n);
        void endVisit(Literal__null n);

        boolean visit(BooleanLiteral__true n);
        void endVisit(BooleanLiteral__true n);

        boolean visit(BooleanLiteral__false n);
        void endVisit(BooleanLiteral__false n);

        boolean visit(ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n);
        void endVisit(ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n);

        boolean visit(ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n);
        void endVisit(ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n);

        boolean visit(ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt n);
        void endVisit(ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt n);

        boolean visit(ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt n);
        void endVisit(ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt n);

        boolean visit(ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer n);
        void endVisit(ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer n);

        boolean visit(ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer n);
        void endVisit(ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer n);

        boolean visit(Dims__LBRACKET_RBRACKET n);
        void endVisit(Dims__LBRACKET_RBRACKET n);

        boolean visit(Dims__Dims_LBRACKET_RBRACKET n);
        void endVisit(Dims__Dims_LBRACKET_RBRACKET n);

        boolean visit(FieldAccess__Primary_DOT_identifier n);
        void endVisit(FieldAccess__Primary_DOT_identifier n);

        boolean visit(FieldAccess__super_DOT_identifier n);
        void endVisit(FieldAccess__super_DOT_identifier n);

        boolean visit(FieldAccess__ClassName_DOT_super_DOT_identifier n);
        void endVisit(FieldAccess__ClassName_DOT_super_DOT_identifier n);

        boolean visit(MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN n);
        void endVisit(MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN n);

        boolean visit(MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n);
        void endVisit(MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n);

        boolean visit(MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n);
        void endVisit(MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n);

        boolean visit(MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n);
        void endVisit(MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n);

        boolean visit(MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN n);
        void endVisit(MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN n);

        boolean visit(ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET n);
        void endVisit(ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET n);

        boolean visit(ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET n);
        void endVisit(ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET n);

        boolean visit(UnaryExpression__PLUS_UnaryExpression n);
        void endVisit(UnaryExpression__PLUS_UnaryExpression n);

        boolean visit(UnaryExpression__MINUS_UnaryExpression n);
        void endVisit(UnaryExpression__MINUS_UnaryExpression n);

        boolean visit(UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression n);
        void endVisit(UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression n);

        boolean visit(UnaryExpressionNotPlusMinus__NOT_UnaryExpression n);
        void endVisit(UnaryExpressionNotPlusMinus__NOT_UnaryExpression n);

        boolean visit(CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression n);
        void endVisit(CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression n);

        boolean visit(CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus n);
        void endVisit(CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus n);

        boolean visit(MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression n);
        void endVisit(MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression n);

        boolean visit(MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression n);
        void endVisit(MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression n);

        boolean visit(MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression n);
        void endVisit(MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression n);

        boolean visit(AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression n);
        void endVisit(AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression n);

        boolean visit(AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression n);
        void endVisit(AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression n);

        boolean visit(ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression n);
        void endVisit(ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression n);

        boolean visit(ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression n);
        void endVisit(ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression n);

        boolean visit(ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression n);
        void endVisit(ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression n);

        boolean visit(RelationalExpression__RelationalExpression_LESS_ShiftExpression n);
        void endVisit(RelationalExpression__RelationalExpression_LESS_ShiftExpression n);

        boolean visit(RelationalExpression__RelationalExpression_GREATER_ShiftExpression n);
        void endVisit(RelationalExpression__RelationalExpression_GREATER_ShiftExpression n);

        boolean visit(RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression n);
        void endVisit(RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression n);

        boolean visit(RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression n);
        void endVisit(RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression n);

        boolean visit(RelationalExpression__RelationalExpression_instanceof_ReferenceType n);
        void endVisit(RelationalExpression__RelationalExpression_instanceof_ReferenceType n);

        boolean visit(EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression n);
        void endVisit(EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression n);

        boolean visit(EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression n);
        void endVisit(EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression n);

        boolean visit(AssignmentOperator__EQUAL n);
        void endVisit(AssignmentOperator__EQUAL n);

        boolean visit(AssignmentOperator__MULTIPLY_EQUAL n);
        void endVisit(AssignmentOperator__MULTIPLY_EQUAL n);

        boolean visit(AssignmentOperator__DIVIDE_EQUAL n);
        void endVisit(AssignmentOperator__DIVIDE_EQUAL n);

        boolean visit(AssignmentOperator__REMAINDER_EQUAL n);
        void endVisit(AssignmentOperator__REMAINDER_EQUAL n);

        boolean visit(AssignmentOperator__PLUS_EQUAL n);
        void endVisit(AssignmentOperator__PLUS_EQUAL n);

        boolean visit(AssignmentOperator__MINUS_EQUAL n);
        void endVisit(AssignmentOperator__MINUS_EQUAL n);

        boolean visit(AssignmentOperator__LEFT_SHIFT_EQUAL n);
        void endVisit(AssignmentOperator__LEFT_SHIFT_EQUAL n);

        boolean visit(AssignmentOperator__GREATER_GREATER_EQUAL n);
        void endVisit(AssignmentOperator__GREATER_GREATER_EQUAL n);

        boolean visit(AssignmentOperator__GREATER_GREATER_GREATER_EQUAL n);
        void endVisit(AssignmentOperator__GREATER_GREATER_GREATER_EQUAL n);

        boolean visit(AssignmentOperator__AND_EQUAL n);
        void endVisit(AssignmentOperator__AND_EQUAL n);

        boolean visit(AssignmentOperator__XOR_EQUAL n);
        void endVisit(AssignmentOperator__XOR_EQUAL n);

        boolean visit(AssignmentOperator__OR_EQUAL n);
        void endVisit(AssignmentOperator__OR_EQUAL n);

    }

    static public abstract class AbstractVisitor implements Visitor
    {
        public abstract void unimplementedVisitor(String s);

        public boolean preVisit(IAst element) { return true; }

        public void postVisit(IAst element) {}

        public boolean visit(AstToken n) { unimplementedVisitor("visit(AstToken)"); return true; }
        public void endVisit(AstToken n) { unimplementedVisitor("endVisit(AstToken)"); }

        public boolean visit(identifier n) { unimplementedVisitor("visit(identifier)"); return true; }
        public void endVisit(identifier n) { unimplementedVisitor("endVisit(identifier)"); }

        public boolean visit(PrimitiveType n) { unimplementedVisitor("visit(PrimitiveType)"); return true; }
        public void endVisit(PrimitiveType n) { unimplementedVisitor("endVisit(PrimitiveType)"); }

        public boolean visit(ClassType n) { unimplementedVisitor("visit(ClassType)"); return true; }
        public void endVisit(ClassType n) { unimplementedVisitor("endVisit(ClassType)"); }

        public boolean visit(InterfaceType n) { unimplementedVisitor("visit(InterfaceType)"); return true; }
        public void endVisit(InterfaceType n) { unimplementedVisitor("endVisit(InterfaceType)"); }

        public boolean visit(TypeName n) { unimplementedVisitor("visit(TypeName)"); return true; }
        public void endVisit(TypeName n) { unimplementedVisitor("endVisit(TypeName)"); }

        public boolean visit(ArrayType n) { unimplementedVisitor("visit(ArrayType)"); return true; }
        public void endVisit(ArrayType n) { unimplementedVisitor("endVisit(ArrayType)"); }

        public boolean visit(TypeParameter n) { unimplementedVisitor("visit(TypeParameter)"); return true; }
        public void endVisit(TypeParameter n) { unimplementedVisitor("endVisit(TypeParameter)"); }

        public boolean visit(TypeBound n) { unimplementedVisitor("visit(TypeBound)"); return true; }
        public void endVisit(TypeBound n) { unimplementedVisitor("endVisit(TypeBound)"); }

        public boolean visit(AdditionalBoundList n) { unimplementedVisitor("visit(AdditionalBoundList)"); return true; }
        public void endVisit(AdditionalBoundList n) { unimplementedVisitor("endVisit(AdditionalBoundList)"); }

        public boolean visit(AdditionalBound n) { unimplementedVisitor("visit(AdditionalBound)"); return true; }
        public void endVisit(AdditionalBound n) { unimplementedVisitor("endVisit(AdditionalBound)"); }

        public boolean visit(TypeArguments n) { unimplementedVisitor("visit(TypeArguments)"); return true; }
        public void endVisit(TypeArguments n) { unimplementedVisitor("endVisit(TypeArguments)"); }

        public boolean visit(ActualTypeArgumentList n) { unimplementedVisitor("visit(ActualTypeArgumentList)"); return true; }
        public void endVisit(ActualTypeArgumentList n) { unimplementedVisitor("endVisit(ActualTypeArgumentList)"); }

        public boolean visit(Wildcard n) { unimplementedVisitor("visit(Wildcard)"); return true; }
        public void endVisit(Wildcard n) { unimplementedVisitor("endVisit(Wildcard)"); }

        public boolean visit(PackageName n) { unimplementedVisitor("visit(PackageName)"); return true; }
        public void endVisit(PackageName n) { unimplementedVisitor("endVisit(PackageName)"); }

        public boolean visit(ExpressionName n) { unimplementedVisitor("visit(ExpressionName)"); return true; }
        public void endVisit(ExpressionName n) { unimplementedVisitor("endVisit(ExpressionName)"); }

        public boolean visit(MethodName n) { unimplementedVisitor("visit(MethodName)"); return true; }
        public void endVisit(MethodName n) { unimplementedVisitor("endVisit(MethodName)"); }

        public boolean visit(PackageOrTypeName n) { unimplementedVisitor("visit(PackageOrTypeName)"); return true; }
        public void endVisit(PackageOrTypeName n) { unimplementedVisitor("endVisit(PackageOrTypeName)"); }

        public boolean visit(AmbiguousName n) { unimplementedVisitor("visit(AmbiguousName)"); return true; }
        public void endVisit(AmbiguousName n) { unimplementedVisitor("endVisit(AmbiguousName)"); }

        public boolean visit(CompilationUnit n) { unimplementedVisitor("visit(CompilationUnit)"); return true; }
        public void endVisit(CompilationUnit n) { unimplementedVisitor("endVisit(CompilationUnit)"); }

        public boolean visit(ImportDeclarations n) { unimplementedVisitor("visit(ImportDeclarations)"); return true; }
        public void endVisit(ImportDeclarations n) { unimplementedVisitor("endVisit(ImportDeclarations)"); }

        public boolean visit(TypeDeclarations n) { unimplementedVisitor("visit(TypeDeclarations)"); return true; }
        public void endVisit(TypeDeclarations n) { unimplementedVisitor("endVisit(TypeDeclarations)"); }

        public boolean visit(PackageDeclaration n) { unimplementedVisitor("visit(PackageDeclaration)"); return true; }
        public void endVisit(PackageDeclaration n) { unimplementedVisitor("endVisit(PackageDeclaration)"); }

        public boolean visit(SingleTypeImportDeclaration n) { unimplementedVisitor("visit(SingleTypeImportDeclaration)"); return true; }
        public void endVisit(SingleTypeImportDeclaration n) { unimplementedVisitor("endVisit(SingleTypeImportDeclaration)"); }

        public boolean visit(TypeImportOnDemandDeclaration n) { unimplementedVisitor("visit(TypeImportOnDemandDeclaration)"); return true; }
        public void endVisit(TypeImportOnDemandDeclaration n) { unimplementedVisitor("endVisit(TypeImportOnDemandDeclaration)"); }

        public boolean visit(SingleStaticImportDeclaration n) { unimplementedVisitor("visit(SingleStaticImportDeclaration)"); return true; }
        public void endVisit(SingleStaticImportDeclaration n) { unimplementedVisitor("endVisit(SingleStaticImportDeclaration)"); }

        public boolean visit(StaticImportOnDemandDeclaration n) { unimplementedVisitor("visit(StaticImportOnDemandDeclaration)"); return true; }
        public void endVisit(StaticImportOnDemandDeclaration n) { unimplementedVisitor("endVisit(StaticImportOnDemandDeclaration)"); }

        public boolean visit(TypeDeclaration n) { unimplementedVisitor("visit(TypeDeclaration)"); return true; }
        public void endVisit(TypeDeclaration n) { unimplementedVisitor("endVisit(TypeDeclaration)"); }

        public boolean visit(NormalClassDeclaration n) { unimplementedVisitor("visit(NormalClassDeclaration)"); return true; }
        public void endVisit(NormalClassDeclaration n) { unimplementedVisitor("endVisit(NormalClassDeclaration)"); }

        public boolean visit(ClassModifiers n) { unimplementedVisitor("visit(ClassModifiers)"); return true; }
        public void endVisit(ClassModifiers n) { unimplementedVisitor("endVisit(ClassModifiers)"); }

        public boolean visit(TypeParameters n) { unimplementedVisitor("visit(TypeParameters)"); return true; }
        public void endVisit(TypeParameters n) { unimplementedVisitor("endVisit(TypeParameters)"); }

        public boolean visit(TypeParameterList n) { unimplementedVisitor("visit(TypeParameterList)"); return true; }
        public void endVisit(TypeParameterList n) { unimplementedVisitor("endVisit(TypeParameterList)"); }

        public boolean visit(Super n) { unimplementedVisitor("visit(Super)"); return true; }
        public void endVisit(Super n) { unimplementedVisitor("endVisit(Super)"); }

        public boolean visit(Interfaces n) { unimplementedVisitor("visit(Interfaces)"); return true; }
        public void endVisit(Interfaces n) { unimplementedVisitor("endVisit(Interfaces)"); }

        public boolean visit(InterfaceTypeList n) { unimplementedVisitor("visit(InterfaceTypeList)"); return true; }
        public void endVisit(InterfaceTypeList n) { unimplementedVisitor("endVisit(InterfaceTypeList)"); }

        public boolean visit(ClassBody n) { unimplementedVisitor("visit(ClassBody)"); return true; }
        public void endVisit(ClassBody n) { unimplementedVisitor("endVisit(ClassBody)"); }

        public boolean visit(ClassBodyDeclarations n) { unimplementedVisitor("visit(ClassBodyDeclarations)"); return true; }
        public void endVisit(ClassBodyDeclarations n) { unimplementedVisitor("endVisit(ClassBodyDeclarations)"); }

        public boolean visit(ClassMemberDeclaration n) { unimplementedVisitor("visit(ClassMemberDeclaration)"); return true; }
        public void endVisit(ClassMemberDeclaration n) { unimplementedVisitor("endVisit(ClassMemberDeclaration)"); }

        public boolean visit(FieldDeclaration n) { unimplementedVisitor("visit(FieldDeclaration)"); return true; }
        public void endVisit(FieldDeclaration n) { unimplementedVisitor("endVisit(FieldDeclaration)"); }

        public boolean visit(VariableDeclarators n) { unimplementedVisitor("visit(VariableDeclarators)"); return true; }
        public void endVisit(VariableDeclarators n) { unimplementedVisitor("endVisit(VariableDeclarators)"); }

        public boolean visit(VariableDeclarator n) { unimplementedVisitor("visit(VariableDeclarator)"); return true; }
        public void endVisit(VariableDeclarator n) { unimplementedVisitor("endVisit(VariableDeclarator)"); }

        public boolean visit(VariableDeclaratorId n) { unimplementedVisitor("visit(VariableDeclaratorId)"); return true; }
        public void endVisit(VariableDeclaratorId n) { unimplementedVisitor("endVisit(VariableDeclaratorId)"); }

        public boolean visit(FieldModifiers n) { unimplementedVisitor("visit(FieldModifiers)"); return true; }
        public void endVisit(FieldModifiers n) { unimplementedVisitor("endVisit(FieldModifiers)"); }

        public boolean visit(MethodDeclaration n) { unimplementedVisitor("visit(MethodDeclaration)"); return true; }
        public void endVisit(MethodDeclaration n) { unimplementedVisitor("endVisit(MethodDeclaration)"); }

        public boolean visit(MethodHeader n) { unimplementedVisitor("visit(MethodHeader)"); return true; }
        public void endVisit(MethodHeader n) { unimplementedVisitor("endVisit(MethodHeader)"); }

        public boolean visit(ResultType n) { unimplementedVisitor("visit(ResultType)"); return true; }
        public void endVisit(ResultType n) { unimplementedVisitor("endVisit(ResultType)"); }

        public boolean visit(FormalParameterList n) { unimplementedVisitor("visit(FormalParameterList)"); return true; }
        public void endVisit(FormalParameterList n) { unimplementedVisitor("endVisit(FormalParameterList)"); }

        public boolean visit(FormalParameters n) { unimplementedVisitor("visit(FormalParameters)"); return true; }
        public void endVisit(FormalParameters n) { unimplementedVisitor("endVisit(FormalParameters)"); }

        public boolean visit(FormalParameter n) { unimplementedVisitor("visit(FormalParameter)"); return true; }
        public void endVisit(FormalParameter n) { unimplementedVisitor("endVisit(FormalParameter)"); }

        public boolean visit(VariableModifiers n) { unimplementedVisitor("visit(VariableModifiers)"); return true; }
        public void endVisit(VariableModifiers n) { unimplementedVisitor("endVisit(VariableModifiers)"); }

        public boolean visit(VariableModifier n) { unimplementedVisitor("visit(VariableModifier)"); return true; }
        public void endVisit(VariableModifier n) { unimplementedVisitor("endVisit(VariableModifier)"); }

        public boolean visit(LastFormalParameter n) { unimplementedVisitor("visit(LastFormalParameter)"); return true; }
        public void endVisit(LastFormalParameter n) { unimplementedVisitor("endVisit(LastFormalParameter)"); }

        public boolean visit(MethodModifiers n) { unimplementedVisitor("visit(MethodModifiers)"); return true; }
        public void endVisit(MethodModifiers n) { unimplementedVisitor("endVisit(MethodModifiers)"); }

        public boolean visit(Throws n) { unimplementedVisitor("visit(Throws)"); return true; }
        public void endVisit(Throws n) { unimplementedVisitor("endVisit(Throws)"); }

        public boolean visit(ExceptionTypeList n) { unimplementedVisitor("visit(ExceptionTypeList)"); return true; }
        public void endVisit(ExceptionTypeList n) { unimplementedVisitor("endVisit(ExceptionTypeList)"); }

        public boolean visit(MethodBody n) { unimplementedVisitor("visit(MethodBody)"); return true; }
        public void endVisit(MethodBody n) { unimplementedVisitor("endVisit(MethodBody)"); }

        public boolean visit(StaticInitializer n) { unimplementedVisitor("visit(StaticInitializer)"); return true; }
        public void endVisit(StaticInitializer n) { unimplementedVisitor("endVisit(StaticInitializer)"); }

        public boolean visit(ConstructorDeclaration n) { unimplementedVisitor("visit(ConstructorDeclaration)"); return true; }
        public void endVisit(ConstructorDeclaration n) { unimplementedVisitor("endVisit(ConstructorDeclaration)"); }

        public boolean visit(ConstructorDeclarator n) { unimplementedVisitor("visit(ConstructorDeclarator)"); return true; }
        public void endVisit(ConstructorDeclarator n) { unimplementedVisitor("endVisit(ConstructorDeclarator)"); }

        public boolean visit(ConstructorModifiers n) { unimplementedVisitor("visit(ConstructorModifiers)"); return true; }
        public void endVisit(ConstructorModifiers n) { unimplementedVisitor("endVisit(ConstructorModifiers)"); }

        public boolean visit(ConstructorBody n) { unimplementedVisitor("visit(ConstructorBody)"); return true; }
        public void endVisit(ConstructorBody n) { unimplementedVisitor("endVisit(ConstructorBody)"); }

        public boolean visit(EnumDeclaration n) { unimplementedVisitor("visit(EnumDeclaration)"); return true; }
        public void endVisit(EnumDeclaration n) { unimplementedVisitor("endVisit(EnumDeclaration)"); }

        public boolean visit(EnumBody n) { unimplementedVisitor("visit(EnumBody)"); return true; }
        public void endVisit(EnumBody n) { unimplementedVisitor("endVisit(EnumBody)"); }

        public boolean visit(EnumConstants n) { unimplementedVisitor("visit(EnumConstants)"); return true; }
        public void endVisit(EnumConstants n) { unimplementedVisitor("endVisit(EnumConstants)"); }

        public boolean visit(EnumConstant n) { unimplementedVisitor("visit(EnumConstant)"); return true; }
        public void endVisit(EnumConstant n) { unimplementedVisitor("endVisit(EnumConstant)"); }

        public boolean visit(Arguments n) { unimplementedVisitor("visit(Arguments)"); return true; }
        public void endVisit(Arguments n) { unimplementedVisitor("endVisit(Arguments)"); }

        public boolean visit(EnumBodyDeclarations n) { unimplementedVisitor("visit(EnumBodyDeclarations)"); return true; }
        public void endVisit(EnumBodyDeclarations n) { unimplementedVisitor("endVisit(EnumBodyDeclarations)"); }

        public boolean visit(NormalInterfaceDeclaration n) { unimplementedVisitor("visit(NormalInterfaceDeclaration)"); return true; }
        public void endVisit(NormalInterfaceDeclaration n) { unimplementedVisitor("endVisit(NormalInterfaceDeclaration)"); }

        public boolean visit(InterfaceModifiers n) { unimplementedVisitor("visit(InterfaceModifiers)"); return true; }
        public void endVisit(InterfaceModifiers n) { unimplementedVisitor("endVisit(InterfaceModifiers)"); }

        public boolean visit(InterfaceBody n) { unimplementedVisitor("visit(InterfaceBody)"); return true; }
        public void endVisit(InterfaceBody n) { unimplementedVisitor("endVisit(InterfaceBody)"); }

        public boolean visit(InterfaceMemberDeclarations n) { unimplementedVisitor("visit(InterfaceMemberDeclarations)"); return true; }
        public void endVisit(InterfaceMemberDeclarations n) { unimplementedVisitor("endVisit(InterfaceMemberDeclarations)"); }

        public boolean visit(InterfaceMemberDeclaration n) { unimplementedVisitor("visit(InterfaceMemberDeclaration)"); return true; }
        public void endVisit(InterfaceMemberDeclaration n) { unimplementedVisitor("endVisit(InterfaceMemberDeclaration)"); }

        public boolean visit(ConstantDeclaration n) { unimplementedVisitor("visit(ConstantDeclaration)"); return true; }
        public void endVisit(ConstantDeclaration n) { unimplementedVisitor("endVisit(ConstantDeclaration)"); }

        public boolean visit(ConstantModifiers n) { unimplementedVisitor("visit(ConstantModifiers)"); return true; }
        public void endVisit(ConstantModifiers n) { unimplementedVisitor("endVisit(ConstantModifiers)"); }

        public boolean visit(AbstractMethodDeclaration n) { unimplementedVisitor("visit(AbstractMethodDeclaration)"); return true; }
        public void endVisit(AbstractMethodDeclaration n) { unimplementedVisitor("endVisit(AbstractMethodDeclaration)"); }

        public boolean visit(AbstractMethodModifiers n) { unimplementedVisitor("visit(AbstractMethodModifiers)"); return true; }
        public void endVisit(AbstractMethodModifiers n) { unimplementedVisitor("endVisit(AbstractMethodModifiers)"); }

        public boolean visit(AnnotationTypeDeclaration n) { unimplementedVisitor("visit(AnnotationTypeDeclaration)"); return true; }
        public void endVisit(AnnotationTypeDeclaration n) { unimplementedVisitor("endVisit(AnnotationTypeDeclaration)"); }

        public boolean visit(AnnotationTypeBody n) { unimplementedVisitor("visit(AnnotationTypeBody)"); return true; }
        public void endVisit(AnnotationTypeBody n) { unimplementedVisitor("endVisit(AnnotationTypeBody)"); }

        public boolean visit(AnnotationTypeElementDeclarations n) { unimplementedVisitor("visit(AnnotationTypeElementDeclarations)"); return true; }
        public void endVisit(AnnotationTypeElementDeclarations n) { unimplementedVisitor("endVisit(AnnotationTypeElementDeclarations)"); }

        public boolean visit(DefaultValue n) { unimplementedVisitor("visit(DefaultValue)"); return true; }
        public void endVisit(DefaultValue n) { unimplementedVisitor("endVisit(DefaultValue)"); }

        public boolean visit(Annotations n) { unimplementedVisitor("visit(Annotations)"); return true; }
        public void endVisit(Annotations n) { unimplementedVisitor("endVisit(Annotations)"); }

        public boolean visit(NormalAnnotation n) { unimplementedVisitor("visit(NormalAnnotation)"); return true; }
        public void endVisit(NormalAnnotation n) { unimplementedVisitor("endVisit(NormalAnnotation)"); }

        public boolean visit(ElementValuePairs n) { unimplementedVisitor("visit(ElementValuePairs)"); return true; }
        public void endVisit(ElementValuePairs n) { unimplementedVisitor("endVisit(ElementValuePairs)"); }

        public boolean visit(ElementValuePair n) { unimplementedVisitor("visit(ElementValuePair)"); return true; }
        public void endVisit(ElementValuePair n) { unimplementedVisitor("endVisit(ElementValuePair)"); }

        public boolean visit(ElementValueArrayInitializer n) { unimplementedVisitor("visit(ElementValueArrayInitializer)"); return true; }
        public void endVisit(ElementValueArrayInitializer n) { unimplementedVisitor("endVisit(ElementValueArrayInitializer)"); }

        public boolean visit(ElementValues n) { unimplementedVisitor("visit(ElementValues)"); return true; }
        public void endVisit(ElementValues n) { unimplementedVisitor("endVisit(ElementValues)"); }

        public boolean visit(MarkerAnnotation n) { unimplementedVisitor("visit(MarkerAnnotation)"); return true; }
        public void endVisit(MarkerAnnotation n) { unimplementedVisitor("endVisit(MarkerAnnotation)"); }

        public boolean visit(SingleElementAnnotation n) { unimplementedVisitor("visit(SingleElementAnnotation)"); return true; }
        public void endVisit(SingleElementAnnotation n) { unimplementedVisitor("endVisit(SingleElementAnnotation)"); }

        public boolean visit(ArrayInitializer n) { unimplementedVisitor("visit(ArrayInitializer)"); return true; }
        public void endVisit(ArrayInitializer n) { unimplementedVisitor("endVisit(ArrayInitializer)"); }

        public boolean visit(VariableInitializers n) { unimplementedVisitor("visit(VariableInitializers)"); return true; }
        public void endVisit(VariableInitializers n) { unimplementedVisitor("endVisit(VariableInitializers)"); }

        public boolean visit(Block n) { unimplementedVisitor("visit(Block)"); return true; }
        public void endVisit(Block n) { unimplementedVisitor("endVisit(Block)"); }

        public boolean visit(BlockStatements n) { unimplementedVisitor("visit(BlockStatements)"); return true; }
        public void endVisit(BlockStatements n) { unimplementedVisitor("endVisit(BlockStatements)"); }

        public boolean visit(LocalVariableDeclarationStatement n) { unimplementedVisitor("visit(LocalVariableDeclarationStatement)"); return true; }
        public void endVisit(LocalVariableDeclarationStatement n) { unimplementedVisitor("endVisit(LocalVariableDeclarationStatement)"); }

        public boolean visit(LocalVariableDeclaration n) { unimplementedVisitor("visit(LocalVariableDeclaration)"); return true; }
        public void endVisit(LocalVariableDeclaration n) { unimplementedVisitor("endVisit(LocalVariableDeclaration)"); }

        public boolean visit(IfThenStatement n) { unimplementedVisitor("visit(IfThenStatement)"); return true; }
        public void endVisit(IfThenStatement n) { unimplementedVisitor("endVisit(IfThenStatement)"); }

        public boolean visit(IfThenElseStatement n) { unimplementedVisitor("visit(IfThenElseStatement)"); return true; }
        public void endVisit(IfThenElseStatement n) { unimplementedVisitor("endVisit(IfThenElseStatement)"); }

        public boolean visit(IfThenElseStatementNoShortIf n) { unimplementedVisitor("visit(IfThenElseStatementNoShortIf)"); return true; }
        public void endVisit(IfThenElseStatementNoShortIf n) { unimplementedVisitor("endVisit(IfThenElseStatementNoShortIf)"); }

        public boolean visit(EmptyStatement n) { unimplementedVisitor("visit(EmptyStatement)"); return true; }
        public void endVisit(EmptyStatement n) { unimplementedVisitor("endVisit(EmptyStatement)"); }

        public boolean visit(LabeledStatement n) { unimplementedVisitor("visit(LabeledStatement)"); return true; }
        public void endVisit(LabeledStatement n) { unimplementedVisitor("endVisit(LabeledStatement)"); }

        public boolean visit(LabeledStatementNoShortIf n) { unimplementedVisitor("visit(LabeledStatementNoShortIf)"); return true; }
        public void endVisit(LabeledStatementNoShortIf n) { unimplementedVisitor("endVisit(LabeledStatementNoShortIf)"); }

        public boolean visit(ExpressionStatement n) { unimplementedVisitor("visit(ExpressionStatement)"); return true; }
        public void endVisit(ExpressionStatement n) { unimplementedVisitor("endVisit(ExpressionStatement)"); }

        public boolean visit(SwitchStatement n) { unimplementedVisitor("visit(SwitchStatement)"); return true; }
        public void endVisit(SwitchStatement n) { unimplementedVisitor("endVisit(SwitchStatement)"); }

        public boolean visit(SwitchBlock n) { unimplementedVisitor("visit(SwitchBlock)"); return true; }
        public void endVisit(SwitchBlock n) { unimplementedVisitor("endVisit(SwitchBlock)"); }

        public boolean visit(SwitchBlockStatementGroups n) { unimplementedVisitor("visit(SwitchBlockStatementGroups)"); return true; }
        public void endVisit(SwitchBlockStatementGroups n) { unimplementedVisitor("endVisit(SwitchBlockStatementGroups)"); }

        public boolean visit(SwitchBlockStatementGroup n) { unimplementedVisitor("visit(SwitchBlockStatementGroup)"); return true; }
        public void endVisit(SwitchBlockStatementGroup n) { unimplementedVisitor("endVisit(SwitchBlockStatementGroup)"); }

        public boolean visit(SwitchLabels n) { unimplementedVisitor("visit(SwitchLabels)"); return true; }
        public void endVisit(SwitchLabels n) { unimplementedVisitor("endVisit(SwitchLabels)"); }

        public boolean visit(WhileStatement n) { unimplementedVisitor("visit(WhileStatement)"); return true; }
        public void endVisit(WhileStatement n) { unimplementedVisitor("endVisit(WhileStatement)"); }

        public boolean visit(WhileStatementNoShortIf n) { unimplementedVisitor("visit(WhileStatementNoShortIf)"); return true; }
        public void endVisit(WhileStatementNoShortIf n) { unimplementedVisitor("endVisit(WhileStatementNoShortIf)"); }

        public boolean visit(DoStatement n) { unimplementedVisitor("visit(DoStatement)"); return true; }
        public void endVisit(DoStatement n) { unimplementedVisitor("endVisit(DoStatement)"); }

        public boolean visit(BasicForStatement n) { unimplementedVisitor("visit(BasicForStatement)"); return true; }
        public void endVisit(BasicForStatement n) { unimplementedVisitor("endVisit(BasicForStatement)"); }

        public boolean visit(ForStatementNoShortIf n) { unimplementedVisitor("visit(ForStatementNoShortIf)"); return true; }
        public void endVisit(ForStatementNoShortIf n) { unimplementedVisitor("endVisit(ForStatementNoShortIf)"); }

        public boolean visit(StatementExpressionList n) { unimplementedVisitor("visit(StatementExpressionList)"); return true; }
        public void endVisit(StatementExpressionList n) { unimplementedVisitor("endVisit(StatementExpressionList)"); }

        public boolean visit(EnhancedForStatement n) { unimplementedVisitor("visit(EnhancedForStatement)"); return true; }
        public void endVisit(EnhancedForStatement n) { unimplementedVisitor("endVisit(EnhancedForStatement)"); }

        public boolean visit(BreakStatement n) { unimplementedVisitor("visit(BreakStatement)"); return true; }
        public void endVisit(BreakStatement n) { unimplementedVisitor("endVisit(BreakStatement)"); }

        public boolean visit(ContinueStatement n) { unimplementedVisitor("visit(ContinueStatement)"); return true; }
        public void endVisit(ContinueStatement n) { unimplementedVisitor("endVisit(ContinueStatement)"); }

        public boolean visit(ReturnStatement n) { unimplementedVisitor("visit(ReturnStatement)"); return true; }
        public void endVisit(ReturnStatement n) { unimplementedVisitor("endVisit(ReturnStatement)"); }

        public boolean visit(ThrowStatement n) { unimplementedVisitor("visit(ThrowStatement)"); return true; }
        public void endVisit(ThrowStatement n) { unimplementedVisitor("endVisit(ThrowStatement)"); }

        public boolean visit(SynchronizedStatement n) { unimplementedVisitor("visit(SynchronizedStatement)"); return true; }
        public void endVisit(SynchronizedStatement n) { unimplementedVisitor("endVisit(SynchronizedStatement)"); }

        public boolean visit(Catches n) { unimplementedVisitor("visit(Catches)"); return true; }
        public void endVisit(Catches n) { unimplementedVisitor("endVisit(Catches)"); }

        public boolean visit(CatchClause n) { unimplementedVisitor("visit(CatchClause)"); return true; }
        public void endVisit(CatchClause n) { unimplementedVisitor("endVisit(CatchClause)"); }

        public boolean visit(Finally n) { unimplementedVisitor("visit(Finally)"); return true; }
        public void endVisit(Finally n) { unimplementedVisitor("endVisit(Finally)"); }

        public boolean visit(ArgumentList n) { unimplementedVisitor("visit(ArgumentList)"); return true; }
        public void endVisit(ArgumentList n) { unimplementedVisitor("endVisit(ArgumentList)"); }

        public boolean visit(DimExprs n) { unimplementedVisitor("visit(DimExprs)"); return true; }
        public void endVisit(DimExprs n) { unimplementedVisitor("endVisit(DimExprs)"); }

        public boolean visit(DimExpr n) { unimplementedVisitor("visit(DimExpr)"); return true; }
        public void endVisit(DimExpr n) { unimplementedVisitor("endVisit(DimExpr)"); }

        public boolean visit(PostIncrementExpression n) { unimplementedVisitor("visit(PostIncrementExpression)"); return true; }
        public void endVisit(PostIncrementExpression n) { unimplementedVisitor("endVisit(PostIncrementExpression)"); }

        public boolean visit(PostDecrementExpression n) { unimplementedVisitor("visit(PostDecrementExpression)"); return true; }
        public void endVisit(PostDecrementExpression n) { unimplementedVisitor("endVisit(PostDecrementExpression)"); }

        public boolean visit(PreIncrementExpression n) { unimplementedVisitor("visit(PreIncrementExpression)"); return true; }
        public void endVisit(PreIncrementExpression n) { unimplementedVisitor("endVisit(PreIncrementExpression)"); }

        public boolean visit(PreDecrementExpression n) { unimplementedVisitor("visit(PreDecrementExpression)"); return true; }
        public void endVisit(PreDecrementExpression n) { unimplementedVisitor("endVisit(PreDecrementExpression)"); }

        public boolean visit(AndExpression n) { unimplementedVisitor("visit(AndExpression)"); return true; }
        public void endVisit(AndExpression n) { unimplementedVisitor("endVisit(AndExpression)"); }

        public boolean visit(ExclusiveOrExpression n) { unimplementedVisitor("visit(ExclusiveOrExpression)"); return true; }
        public void endVisit(ExclusiveOrExpression n) { unimplementedVisitor("endVisit(ExclusiveOrExpression)"); }

        public boolean visit(InclusiveOrExpression n) { unimplementedVisitor("visit(InclusiveOrExpression)"); return true; }
        public void endVisit(InclusiveOrExpression n) { unimplementedVisitor("endVisit(InclusiveOrExpression)"); }

        public boolean visit(ConditionalAndExpression n) { unimplementedVisitor("visit(ConditionalAndExpression)"); return true; }
        public void endVisit(ConditionalAndExpression n) { unimplementedVisitor("endVisit(ConditionalAndExpression)"); }

        public boolean visit(ConditionalOrExpression n) { unimplementedVisitor("visit(ConditionalOrExpression)"); return true; }
        public void endVisit(ConditionalOrExpression n) { unimplementedVisitor("endVisit(ConditionalOrExpression)"); }

        public boolean visit(ConditionalExpression n) { unimplementedVisitor("visit(ConditionalExpression)"); return true; }
        public void endVisit(ConditionalExpression n) { unimplementedVisitor("endVisit(ConditionalExpression)"); }

        public boolean visit(Assignment n) { unimplementedVisitor("visit(Assignment)"); return true; }
        public void endVisit(Assignment n) { unimplementedVisitor("endVisit(Assignment)"); }

        public boolean visit(Commaopt n) { unimplementedVisitor("visit(Commaopt)"); return true; }
        public void endVisit(Commaopt n) { unimplementedVisitor("endVisit(Commaopt)"); }

        public boolean visit(Ellipsisopt n) { unimplementedVisitor("visit(Ellipsisopt)"); return true; }
        public void endVisit(Ellipsisopt n) { unimplementedVisitor("endVisit(Ellipsisopt)"); }

        public boolean visit(LPGUserAction__BeginAction_BlockStatementsopt_EndAction n) { unimplementedVisitor("visit(LPGUserAction__BeginAction_BlockStatementsopt_EndAction)"); return true; }
        public void endVisit(LPGUserAction__BeginAction_BlockStatementsopt_EndAction n) { unimplementedVisitor("endVisit(LPGUserAction__BeginAction_BlockStatementsopt_EndAction)"); }

        public boolean visit(LPGUserAction__BeginJava_BlockStatementsopt_EndJava n) { unimplementedVisitor("visit(LPGUserAction__BeginJava_BlockStatementsopt_EndJava)"); return true; }
        public void endVisit(LPGUserAction__BeginJava_BlockStatementsopt_EndJava n) { unimplementedVisitor("endVisit(LPGUserAction__BeginJava_BlockStatementsopt_EndJava)"); }

        public boolean visit(LPGUserAction__NoAction n) { unimplementedVisitor("visit(LPGUserAction__NoAction)"); return true; }
        public void endVisit(LPGUserAction__NoAction n) { unimplementedVisitor("endVisit(LPGUserAction__NoAction)"); }

        public boolean visit(LPGUserAction__NullAction n) { unimplementedVisitor("visit(LPGUserAction__NullAction)"); return true; }
        public void endVisit(LPGUserAction__NullAction n) { unimplementedVisitor("endVisit(LPGUserAction__NullAction)"); }

        public boolean visit(LPGUserAction__BadAction n) { unimplementedVisitor("visit(LPGUserAction__BadAction)"); return true; }
        public void endVisit(LPGUserAction__BadAction n) { unimplementedVisitor("endVisit(LPGUserAction__BadAction)"); }

        public boolean visit(IntegralType__byte n) { unimplementedVisitor("visit(IntegralType__byte)"); return true; }
        public void endVisit(IntegralType__byte n) { unimplementedVisitor("endVisit(IntegralType__byte)"); }

        public boolean visit(IntegralType__short n) { unimplementedVisitor("visit(IntegralType__short)"); return true; }
        public void endVisit(IntegralType__short n) { unimplementedVisitor("endVisit(IntegralType__short)"); }

        public boolean visit(IntegralType__int n) { unimplementedVisitor("visit(IntegralType__int)"); return true; }
        public void endVisit(IntegralType__int n) { unimplementedVisitor("endVisit(IntegralType__int)"); }

        public boolean visit(IntegralType__long n) { unimplementedVisitor("visit(IntegralType__long)"); return true; }
        public void endVisit(IntegralType__long n) { unimplementedVisitor("endVisit(IntegralType__long)"); }

        public boolean visit(IntegralType__char n) { unimplementedVisitor("visit(IntegralType__char)"); return true; }
        public void endVisit(IntegralType__char n) { unimplementedVisitor("endVisit(IntegralType__char)"); }

        public boolean visit(FloatingPointType__float n) { unimplementedVisitor("visit(FloatingPointType__float)"); return true; }
        public void endVisit(FloatingPointType__float n) { unimplementedVisitor("endVisit(FloatingPointType__float)"); }

        public boolean visit(FloatingPointType__double n) { unimplementedVisitor("visit(FloatingPointType__double)"); return true; }
        public void endVisit(FloatingPointType__double n) { unimplementedVisitor("endVisit(FloatingPointType__double)"); }

        public boolean visit(WildcardBounds__extends_ReferenceType n) { unimplementedVisitor("visit(WildcardBounds__extends_ReferenceType)"); return true; }
        public void endVisit(WildcardBounds__extends_ReferenceType n) { unimplementedVisitor("endVisit(WildcardBounds__extends_ReferenceType)"); }

        public boolean visit(WildcardBounds__super_ReferenceType n) { unimplementedVisitor("visit(WildcardBounds__super_ReferenceType)"); return true; }
        public void endVisit(WildcardBounds__super_ReferenceType n) { unimplementedVisitor("endVisit(WildcardBounds__super_ReferenceType)"); }

        public boolean visit(ClassModifier__public n) { unimplementedVisitor("visit(ClassModifier__public)"); return true; }
        public void endVisit(ClassModifier__public n) { unimplementedVisitor("endVisit(ClassModifier__public)"); }

        public boolean visit(ClassModifier__protected n) { unimplementedVisitor("visit(ClassModifier__protected)"); return true; }
        public void endVisit(ClassModifier__protected n) { unimplementedVisitor("endVisit(ClassModifier__protected)"); }

        public boolean visit(ClassModifier__private n) { unimplementedVisitor("visit(ClassModifier__private)"); return true; }
        public void endVisit(ClassModifier__private n) { unimplementedVisitor("endVisit(ClassModifier__private)"); }

        public boolean visit(ClassModifier__abstract n) { unimplementedVisitor("visit(ClassModifier__abstract)"); return true; }
        public void endVisit(ClassModifier__abstract n) { unimplementedVisitor("endVisit(ClassModifier__abstract)"); }

        public boolean visit(ClassModifier__static n) { unimplementedVisitor("visit(ClassModifier__static)"); return true; }
        public void endVisit(ClassModifier__static n) { unimplementedVisitor("endVisit(ClassModifier__static)"); }

        public boolean visit(ClassModifier__final n) { unimplementedVisitor("visit(ClassModifier__final)"); return true; }
        public void endVisit(ClassModifier__final n) { unimplementedVisitor("endVisit(ClassModifier__final)"); }

        public boolean visit(ClassModifier__strictfp n) { unimplementedVisitor("visit(ClassModifier__strictfp)"); return true; }
        public void endVisit(ClassModifier__strictfp n) { unimplementedVisitor("endVisit(ClassModifier__strictfp)"); }

        public boolean visit(FieldModifier__public n) { unimplementedVisitor("visit(FieldModifier__public)"); return true; }
        public void endVisit(FieldModifier__public n) { unimplementedVisitor("endVisit(FieldModifier__public)"); }

        public boolean visit(FieldModifier__protected n) { unimplementedVisitor("visit(FieldModifier__protected)"); return true; }
        public void endVisit(FieldModifier__protected n) { unimplementedVisitor("endVisit(FieldModifier__protected)"); }

        public boolean visit(FieldModifier__private n) { unimplementedVisitor("visit(FieldModifier__private)"); return true; }
        public void endVisit(FieldModifier__private n) { unimplementedVisitor("endVisit(FieldModifier__private)"); }

        public boolean visit(FieldModifier__static n) { unimplementedVisitor("visit(FieldModifier__static)"); return true; }
        public void endVisit(FieldModifier__static n) { unimplementedVisitor("endVisit(FieldModifier__static)"); }

        public boolean visit(FieldModifier__final n) { unimplementedVisitor("visit(FieldModifier__final)"); return true; }
        public void endVisit(FieldModifier__final n) { unimplementedVisitor("endVisit(FieldModifier__final)"); }

        public boolean visit(FieldModifier__transient n) { unimplementedVisitor("visit(FieldModifier__transient)"); return true; }
        public void endVisit(FieldModifier__transient n) { unimplementedVisitor("endVisit(FieldModifier__transient)"); }

        public boolean visit(FieldModifier__volatile n) { unimplementedVisitor("visit(FieldModifier__volatile)"); return true; }
        public void endVisit(FieldModifier__volatile n) { unimplementedVisitor("endVisit(FieldModifier__volatile)"); }

        public boolean visit(MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN n) { unimplementedVisitor("visit(MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN)"); return true; }
        public void endVisit(MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN n) { unimplementedVisitor("endVisit(MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN)"); }

        public boolean visit(MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET n) { unimplementedVisitor("visit(MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET)"); return true; }
        public void endVisit(MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET n) { unimplementedVisitor("endVisit(MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET)"); }

        public boolean visit(MethodModifier__public n) { unimplementedVisitor("visit(MethodModifier__public)"); return true; }
        public void endVisit(MethodModifier__public n) { unimplementedVisitor("endVisit(MethodModifier__public)"); }

        public boolean visit(MethodModifier__protected n) { unimplementedVisitor("visit(MethodModifier__protected)"); return true; }
        public void endVisit(MethodModifier__protected n) { unimplementedVisitor("endVisit(MethodModifier__protected)"); }

        public boolean visit(MethodModifier__private n) { unimplementedVisitor("visit(MethodModifier__private)"); return true; }
        public void endVisit(MethodModifier__private n) { unimplementedVisitor("endVisit(MethodModifier__private)"); }

        public boolean visit(MethodModifier__abstract n) { unimplementedVisitor("visit(MethodModifier__abstract)"); return true; }
        public void endVisit(MethodModifier__abstract n) { unimplementedVisitor("endVisit(MethodModifier__abstract)"); }

        public boolean visit(MethodModifier__static n) { unimplementedVisitor("visit(MethodModifier__static)"); return true; }
        public void endVisit(MethodModifier__static n) { unimplementedVisitor("endVisit(MethodModifier__static)"); }

        public boolean visit(MethodModifier__final n) { unimplementedVisitor("visit(MethodModifier__final)"); return true; }
        public void endVisit(MethodModifier__final n) { unimplementedVisitor("endVisit(MethodModifier__final)"); }

        public boolean visit(MethodModifier__synchronized n) { unimplementedVisitor("visit(MethodModifier__synchronized)"); return true; }
        public void endVisit(MethodModifier__synchronized n) { unimplementedVisitor("endVisit(MethodModifier__synchronized)"); }

        public boolean visit(MethodModifier__native n) { unimplementedVisitor("visit(MethodModifier__native)"); return true; }
        public void endVisit(MethodModifier__native n) { unimplementedVisitor("endVisit(MethodModifier__native)"); }

        public boolean visit(MethodModifier__strictfp n) { unimplementedVisitor("visit(MethodModifier__strictfp)"); return true; }
        public void endVisit(MethodModifier__strictfp n) { unimplementedVisitor("endVisit(MethodModifier__strictfp)"); }

        public boolean visit(ConstructorModifier__public n) { unimplementedVisitor("visit(ConstructorModifier__public)"); return true; }
        public void endVisit(ConstructorModifier__public n) { unimplementedVisitor("endVisit(ConstructorModifier__public)"); }

        public boolean visit(ConstructorModifier__protected n) { unimplementedVisitor("visit(ConstructorModifier__protected)"); return true; }
        public void endVisit(ConstructorModifier__protected n) { unimplementedVisitor("endVisit(ConstructorModifier__protected)"); }

        public boolean visit(ConstructorModifier__private n) { unimplementedVisitor("visit(ConstructorModifier__private)"); return true; }
        public void endVisit(ConstructorModifier__private n) { unimplementedVisitor("endVisit(ConstructorModifier__private)"); }

        public boolean visit(ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n) { unimplementedVisitor("visit(ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)"); return true; }
        public void endVisit(ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n) { unimplementedVisitor("endVisit(ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)"); }

        public boolean visit(ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n) { unimplementedVisitor("visit(ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)"); return true; }
        public void endVisit(ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n) { unimplementedVisitor("endVisit(ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)"); }

        public boolean visit(ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n) { unimplementedVisitor("visit(ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)"); return true; }
        public void endVisit(ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON n) { unimplementedVisitor("endVisit(ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON)"); }

        public boolean visit(InterfaceModifier__public n) { unimplementedVisitor("visit(InterfaceModifier__public)"); return true; }
        public void endVisit(InterfaceModifier__public n) { unimplementedVisitor("endVisit(InterfaceModifier__public)"); }

        public boolean visit(InterfaceModifier__protected n) { unimplementedVisitor("visit(InterfaceModifier__protected)"); return true; }
        public void endVisit(InterfaceModifier__protected n) { unimplementedVisitor("endVisit(InterfaceModifier__protected)"); }

        public boolean visit(InterfaceModifier__private n) { unimplementedVisitor("visit(InterfaceModifier__private)"); return true; }
        public void endVisit(InterfaceModifier__private n) { unimplementedVisitor("endVisit(InterfaceModifier__private)"); }

        public boolean visit(InterfaceModifier__abstract n) { unimplementedVisitor("visit(InterfaceModifier__abstract)"); return true; }
        public void endVisit(InterfaceModifier__abstract n) { unimplementedVisitor("endVisit(InterfaceModifier__abstract)"); }

        public boolean visit(InterfaceModifier__static n) { unimplementedVisitor("visit(InterfaceModifier__static)"); return true; }
        public void endVisit(InterfaceModifier__static n) { unimplementedVisitor("endVisit(InterfaceModifier__static)"); }

        public boolean visit(InterfaceModifier__strictfp n) { unimplementedVisitor("visit(InterfaceModifier__strictfp)"); return true; }
        public void endVisit(InterfaceModifier__strictfp n) { unimplementedVisitor("endVisit(InterfaceModifier__strictfp)"); }

        public boolean visit(ExtendsInterfaces__extends_InterfaceType n) { unimplementedVisitor("visit(ExtendsInterfaces__extends_InterfaceType)"); return true; }
        public void endVisit(ExtendsInterfaces__extends_InterfaceType n) { unimplementedVisitor("endVisit(ExtendsInterfaces__extends_InterfaceType)"); }

        public boolean visit(ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType n) { unimplementedVisitor("visit(ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType)"); return true; }
        public void endVisit(ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType n) { unimplementedVisitor("endVisit(ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType)"); }

        public boolean visit(ConstantModifier__public n) { unimplementedVisitor("visit(ConstantModifier__public)"); return true; }
        public void endVisit(ConstantModifier__public n) { unimplementedVisitor("endVisit(ConstantModifier__public)"); }

        public boolean visit(ConstantModifier__static n) { unimplementedVisitor("visit(ConstantModifier__static)"); return true; }
        public void endVisit(ConstantModifier__static n) { unimplementedVisitor("endVisit(ConstantModifier__static)"); }

        public boolean visit(ConstantModifier__final n) { unimplementedVisitor("visit(ConstantModifier__final)"); return true; }
        public void endVisit(ConstantModifier__final n) { unimplementedVisitor("endVisit(ConstantModifier__final)"); }

        public boolean visit(AbstractMethodModifier__public n) { unimplementedVisitor("visit(AbstractMethodModifier__public)"); return true; }
        public void endVisit(AbstractMethodModifier__public n) { unimplementedVisitor("endVisit(AbstractMethodModifier__public)"); }

        public boolean visit(AbstractMethodModifier__abstract n) { unimplementedVisitor("visit(AbstractMethodModifier__abstract)"); return true; }
        public void endVisit(AbstractMethodModifier__abstract n) { unimplementedVisitor("endVisit(AbstractMethodModifier__abstract)"); }

        public boolean visit(AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON n) { unimplementedVisitor("visit(AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON)"); return true; }
        public void endVisit(AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON n) { unimplementedVisitor("endVisit(AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON)"); }

        public boolean visit(AnnotationTypeElementDeclaration__SEMICOLON n) { unimplementedVisitor("visit(AnnotationTypeElementDeclaration__SEMICOLON)"); return true; }
        public void endVisit(AnnotationTypeElementDeclaration__SEMICOLON n) { unimplementedVisitor("endVisit(AnnotationTypeElementDeclaration__SEMICOLON)"); }

        public boolean visit(AssertStatement__assert_Expression_SEMICOLON n) { unimplementedVisitor("visit(AssertStatement__assert_Expression_SEMICOLON)"); return true; }
        public void endVisit(AssertStatement__assert_Expression_SEMICOLON n) { unimplementedVisitor("endVisit(AssertStatement__assert_Expression_SEMICOLON)"); }

        public boolean visit(AssertStatement__assert_Expression_COLON_Expression_SEMICOLON n) { unimplementedVisitor("visit(AssertStatement__assert_Expression_COLON_Expression_SEMICOLON)"); return true; }
        public void endVisit(AssertStatement__assert_Expression_COLON_Expression_SEMICOLON n) { unimplementedVisitor("endVisit(AssertStatement__assert_Expression_COLON_Expression_SEMICOLON)"); }

        public boolean visit(SwitchLabel__case_ConstantExpression_COLON n) { unimplementedVisitor("visit(SwitchLabel__case_ConstantExpression_COLON)"); return true; }
        public void endVisit(SwitchLabel__case_ConstantExpression_COLON n) { unimplementedVisitor("endVisit(SwitchLabel__case_ConstantExpression_COLON)"); }

        public boolean visit(SwitchLabel__case_EnumConstant_COLON n) { unimplementedVisitor("visit(SwitchLabel__case_EnumConstant_COLON)"); return true; }
        public void endVisit(SwitchLabel__case_EnumConstant_COLON n) { unimplementedVisitor("endVisit(SwitchLabel__case_EnumConstant_COLON)"); }

        public boolean visit(SwitchLabel__default_COLON n) { unimplementedVisitor("visit(SwitchLabel__default_COLON)"); return true; }
        public void endVisit(SwitchLabel__default_COLON n) { unimplementedVisitor("endVisit(SwitchLabel__default_COLON)"); }

        public boolean visit(TryStatement__try_Block_Catches n) { unimplementedVisitor("visit(TryStatement__try_Block_Catches)"); return true; }
        public void endVisit(TryStatement__try_Block_Catches n) { unimplementedVisitor("endVisit(TryStatement__try_Block_Catches)"); }

        public boolean visit(TryStatement__try_Block_Catchesopt_Finally n) { unimplementedVisitor("visit(TryStatement__try_Block_Catchesopt_Finally)"); return true; }
        public void endVisit(TryStatement__try_Block_Catchesopt_Finally n) { unimplementedVisitor("endVisit(TryStatement__try_Block_Catchesopt_Finally)"); }

        public boolean visit(PrimaryNoNewArray__Type_DOT_class n) { unimplementedVisitor("visit(PrimaryNoNewArray__Type_DOT_class)"); return true; }
        public void endVisit(PrimaryNoNewArray__Type_DOT_class n) { unimplementedVisitor("endVisit(PrimaryNoNewArray__Type_DOT_class)"); }

        public boolean visit(PrimaryNoNewArray__void_DOT_class n) { unimplementedVisitor("visit(PrimaryNoNewArray__void_DOT_class)"); return true; }
        public void endVisit(PrimaryNoNewArray__void_DOT_class n) { unimplementedVisitor("endVisit(PrimaryNoNewArray__void_DOT_class)"); }

        public boolean visit(PrimaryNoNewArray__this n) { unimplementedVisitor("visit(PrimaryNoNewArray__this)"); return true; }
        public void endVisit(PrimaryNoNewArray__this n) { unimplementedVisitor("endVisit(PrimaryNoNewArray__this)"); }

        public boolean visit(PrimaryNoNewArray__ClassName_DOT_this n) { unimplementedVisitor("visit(PrimaryNoNewArray__ClassName_DOT_this)"); return true; }
        public void endVisit(PrimaryNoNewArray__ClassName_DOT_this n) { unimplementedVisitor("endVisit(PrimaryNoNewArray__ClassName_DOT_this)"); }

        public boolean visit(PrimaryNoNewArray__LPAREN_Expression_RPAREN n) { unimplementedVisitor("visit(PrimaryNoNewArray__LPAREN_Expression_RPAREN)"); return true; }
        public void endVisit(PrimaryNoNewArray__LPAREN_Expression_RPAREN n) { unimplementedVisitor("endVisit(PrimaryNoNewArray__LPAREN_Expression_RPAREN)"); }

        public boolean visit(Literal__IntegerLiteral n) { unimplementedVisitor("visit(Literal__IntegerLiteral)"); return true; }
        public void endVisit(Literal__IntegerLiteral n) { unimplementedVisitor("endVisit(Literal__IntegerLiteral)"); }

        public boolean visit(Literal__LongLiteral n) { unimplementedVisitor("visit(Literal__LongLiteral)"); return true; }
        public void endVisit(Literal__LongLiteral n) { unimplementedVisitor("endVisit(Literal__LongLiteral)"); }

        public boolean visit(Literal__FloatingPointLiteral n) { unimplementedVisitor("visit(Literal__FloatingPointLiteral)"); return true; }
        public void endVisit(Literal__FloatingPointLiteral n) { unimplementedVisitor("endVisit(Literal__FloatingPointLiteral)"); }

        public boolean visit(Literal__DoubleLiteral n) { unimplementedVisitor("visit(Literal__DoubleLiteral)"); return true; }
        public void endVisit(Literal__DoubleLiteral n) { unimplementedVisitor("endVisit(Literal__DoubleLiteral)"); }

        public boolean visit(Literal__CharacterLiteral n) { unimplementedVisitor("visit(Literal__CharacterLiteral)"); return true; }
        public void endVisit(Literal__CharacterLiteral n) { unimplementedVisitor("endVisit(Literal__CharacterLiteral)"); }

        public boolean visit(Literal__StringLiteral n) { unimplementedVisitor("visit(Literal__StringLiteral)"); return true; }
        public void endVisit(Literal__StringLiteral n) { unimplementedVisitor("endVisit(Literal__StringLiteral)"); }

        public boolean visit(Literal__null n) { unimplementedVisitor("visit(Literal__null)"); return true; }
        public void endVisit(Literal__null n) { unimplementedVisitor("endVisit(Literal__null)"); }

        public boolean visit(BooleanLiteral__true n) { unimplementedVisitor("visit(BooleanLiteral__true)"); return true; }
        public void endVisit(BooleanLiteral__true n) { unimplementedVisitor("endVisit(BooleanLiteral__true)"); }

        public boolean visit(BooleanLiteral__false n) { unimplementedVisitor("visit(BooleanLiteral__false)"); return true; }
        public void endVisit(BooleanLiteral__false n) { unimplementedVisitor("endVisit(BooleanLiteral__false)"); }

        public boolean visit(ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n) { unimplementedVisitor("visit(ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt)"); return true; }
        public void endVisit(ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n) { unimplementedVisitor("endVisit(ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt)"); }

        public boolean visit(ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n) { unimplementedVisitor("visit(ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt)"); return true; }
        public void endVisit(ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt n) { unimplementedVisitor("endVisit(ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt)"); }

        public boolean visit(ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt n) { unimplementedVisitor("visit(ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt)"); return true; }
        public void endVisit(ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt n) { unimplementedVisitor("endVisit(ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt)"); }

        public boolean visit(ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt n) { unimplementedVisitor("visit(ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt)"); return true; }
        public void endVisit(ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt n) { unimplementedVisitor("endVisit(ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt)"); }

        public boolean visit(ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer n) { unimplementedVisitor("visit(ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer)"); return true; }
        public void endVisit(ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer n) { unimplementedVisitor("endVisit(ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer)"); }

        public boolean visit(ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer n) { unimplementedVisitor("visit(ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer)"); return true; }
        public void endVisit(ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer n) { unimplementedVisitor("endVisit(ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer)"); }

        public boolean visit(Dims__LBRACKET_RBRACKET n) { unimplementedVisitor("visit(Dims__LBRACKET_RBRACKET)"); return true; }
        public void endVisit(Dims__LBRACKET_RBRACKET n) { unimplementedVisitor("endVisit(Dims__LBRACKET_RBRACKET)"); }

        public boolean visit(Dims__Dims_LBRACKET_RBRACKET n) { unimplementedVisitor("visit(Dims__Dims_LBRACKET_RBRACKET)"); return true; }
        public void endVisit(Dims__Dims_LBRACKET_RBRACKET n) { unimplementedVisitor("endVisit(Dims__Dims_LBRACKET_RBRACKET)"); }

        public boolean visit(FieldAccess__Primary_DOT_identifier n) { unimplementedVisitor("visit(FieldAccess__Primary_DOT_identifier)"); return true; }
        public void endVisit(FieldAccess__Primary_DOT_identifier n) { unimplementedVisitor("endVisit(FieldAccess__Primary_DOT_identifier)"); }

        public boolean visit(FieldAccess__super_DOT_identifier n) { unimplementedVisitor("visit(FieldAccess__super_DOT_identifier)"); return true; }
        public void endVisit(FieldAccess__super_DOT_identifier n) { unimplementedVisitor("endVisit(FieldAccess__super_DOT_identifier)"); }

        public boolean visit(FieldAccess__ClassName_DOT_super_DOT_identifier n) { unimplementedVisitor("visit(FieldAccess__ClassName_DOT_super_DOT_identifier)"); return true; }
        public void endVisit(FieldAccess__ClassName_DOT_super_DOT_identifier n) { unimplementedVisitor("endVisit(FieldAccess__ClassName_DOT_super_DOT_identifier)"); }

        public boolean visit(MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("visit(MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN)"); return true; }
        public void endVisit(MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("endVisit(MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN)"); }

        public boolean visit(MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("visit(MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)"); return true; }
        public void endVisit(MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("endVisit(MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)"); }

        public boolean visit(MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("visit(MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)"); return true; }
        public void endVisit(MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("endVisit(MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)"); }

        public boolean visit(MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("visit(MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)"); return true; }
        public void endVisit(MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("endVisit(MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN)"); }

        public boolean visit(MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("visit(MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN)"); return true; }
        public void endVisit(MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN n) { unimplementedVisitor("endVisit(MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN)"); }

        public boolean visit(ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET n) { unimplementedVisitor("visit(ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET)"); return true; }
        public void endVisit(ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET n) { unimplementedVisitor("endVisit(ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET)"); }

        public boolean visit(ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET n) { unimplementedVisitor("visit(ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET)"); return true; }
        public void endVisit(ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET n) { unimplementedVisitor("endVisit(ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET)"); }

        public boolean visit(UnaryExpression__PLUS_UnaryExpression n) { unimplementedVisitor("visit(UnaryExpression__PLUS_UnaryExpression)"); return true; }
        public void endVisit(UnaryExpression__PLUS_UnaryExpression n) { unimplementedVisitor("endVisit(UnaryExpression__PLUS_UnaryExpression)"); }

        public boolean visit(UnaryExpression__MINUS_UnaryExpression n) { unimplementedVisitor("visit(UnaryExpression__MINUS_UnaryExpression)"); return true; }
        public void endVisit(UnaryExpression__MINUS_UnaryExpression n) { unimplementedVisitor("endVisit(UnaryExpression__MINUS_UnaryExpression)"); }

        public boolean visit(UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression n) { unimplementedVisitor("visit(UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression)"); return true; }
        public void endVisit(UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression n) { unimplementedVisitor("endVisit(UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression)"); }

        public boolean visit(UnaryExpressionNotPlusMinus__NOT_UnaryExpression n) { unimplementedVisitor("visit(UnaryExpressionNotPlusMinus__NOT_UnaryExpression)"); return true; }
        public void endVisit(UnaryExpressionNotPlusMinus__NOT_UnaryExpression n) { unimplementedVisitor("endVisit(UnaryExpressionNotPlusMinus__NOT_UnaryExpression)"); }

        public boolean visit(CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression n) { unimplementedVisitor("visit(CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression)"); return true; }
        public void endVisit(CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression n) { unimplementedVisitor("endVisit(CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression)"); }

        public boolean visit(CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus n) { unimplementedVisitor("visit(CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus)"); return true; }
        public void endVisit(CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus n) { unimplementedVisitor("endVisit(CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus)"); }

        public boolean visit(MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression n) { unimplementedVisitor("visit(MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression)"); return true; }
        public void endVisit(MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression n) { unimplementedVisitor("endVisit(MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression)"); }

        public boolean visit(MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression n) { unimplementedVisitor("visit(MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression)"); return true; }
        public void endVisit(MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression n) { unimplementedVisitor("endVisit(MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression)"); }

        public boolean visit(MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression n) { unimplementedVisitor("visit(MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression)"); return true; }
        public void endVisit(MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression n) { unimplementedVisitor("endVisit(MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression)"); }

        public boolean visit(AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression n) { unimplementedVisitor("visit(AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression)"); return true; }
        public void endVisit(AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression n) { unimplementedVisitor("endVisit(AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression)"); }

        public boolean visit(AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression n) { unimplementedVisitor("visit(AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression)"); return true; }
        public void endVisit(AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression n) { unimplementedVisitor("endVisit(AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression)"); }

        public boolean visit(ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression n) { unimplementedVisitor("visit(ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression)"); return true; }
        public void endVisit(ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression n) { unimplementedVisitor("endVisit(ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression)"); }

        public boolean visit(ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression n) { unimplementedVisitor("visit(ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression)"); return true; }
        public void endVisit(ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression n) { unimplementedVisitor("endVisit(ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression)"); }

        public boolean visit(ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression n) { unimplementedVisitor("visit(ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression)"); return true; }
        public void endVisit(ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression n) { unimplementedVisitor("endVisit(ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression)"); }

        public boolean visit(RelationalExpression__RelationalExpression_LESS_ShiftExpression n) { unimplementedVisitor("visit(RelationalExpression__RelationalExpression_LESS_ShiftExpression)"); return true; }
        public void endVisit(RelationalExpression__RelationalExpression_LESS_ShiftExpression n) { unimplementedVisitor("endVisit(RelationalExpression__RelationalExpression_LESS_ShiftExpression)"); }

        public boolean visit(RelationalExpression__RelationalExpression_GREATER_ShiftExpression n) { unimplementedVisitor("visit(RelationalExpression__RelationalExpression_GREATER_ShiftExpression)"); return true; }
        public void endVisit(RelationalExpression__RelationalExpression_GREATER_ShiftExpression n) { unimplementedVisitor("endVisit(RelationalExpression__RelationalExpression_GREATER_ShiftExpression)"); }

        public boolean visit(RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression n) { unimplementedVisitor("visit(RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression)"); return true; }
        public void endVisit(RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression n) { unimplementedVisitor("endVisit(RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression)"); }

        public boolean visit(RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression n) { unimplementedVisitor("visit(RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression)"); return true; }
        public void endVisit(RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression n) { unimplementedVisitor("endVisit(RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression)"); }

        public boolean visit(RelationalExpression__RelationalExpression_instanceof_ReferenceType n) { unimplementedVisitor("visit(RelationalExpression__RelationalExpression_instanceof_ReferenceType)"); return true; }
        public void endVisit(RelationalExpression__RelationalExpression_instanceof_ReferenceType n) { unimplementedVisitor("endVisit(RelationalExpression__RelationalExpression_instanceof_ReferenceType)"); }

        public boolean visit(EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression n) { unimplementedVisitor("visit(EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression)"); return true; }
        public void endVisit(EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression n) { unimplementedVisitor("endVisit(EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression)"); }

        public boolean visit(EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression n) { unimplementedVisitor("visit(EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression)"); return true; }
        public void endVisit(EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression n) { unimplementedVisitor("endVisit(EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression)"); }

        public boolean visit(AssignmentOperator__EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__EQUAL)"); }

        public boolean visit(AssignmentOperator__MULTIPLY_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__MULTIPLY_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__MULTIPLY_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__MULTIPLY_EQUAL)"); }

        public boolean visit(AssignmentOperator__DIVIDE_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__DIVIDE_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__DIVIDE_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__DIVIDE_EQUAL)"); }

        public boolean visit(AssignmentOperator__REMAINDER_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__REMAINDER_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__REMAINDER_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__REMAINDER_EQUAL)"); }

        public boolean visit(AssignmentOperator__PLUS_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__PLUS_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__PLUS_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__PLUS_EQUAL)"); }

        public boolean visit(AssignmentOperator__MINUS_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__MINUS_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__MINUS_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__MINUS_EQUAL)"); }

        public boolean visit(AssignmentOperator__LEFT_SHIFT_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__LEFT_SHIFT_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__LEFT_SHIFT_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__LEFT_SHIFT_EQUAL)"); }

        public boolean visit(AssignmentOperator__GREATER_GREATER_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__GREATER_GREATER_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__GREATER_GREATER_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__GREATER_GREATER_EQUAL)"); }

        public boolean visit(AssignmentOperator__GREATER_GREATER_GREATER_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__GREATER_GREATER_GREATER_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__GREATER_GREATER_GREATER_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__GREATER_GREATER_GREATER_EQUAL)"); }

        public boolean visit(AssignmentOperator__AND_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__AND_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__AND_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__AND_EQUAL)"); }

        public boolean visit(AssignmentOperator__XOR_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__XOR_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__XOR_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__XOR_EQUAL)"); }

        public boolean visit(AssignmentOperator__OR_EQUAL n) { unimplementedVisitor("visit(AssignmentOperator__OR_EQUAL)"); return true; }
        public void endVisit(AssignmentOperator__OR_EQUAL n) { unimplementedVisitor("endVisit(AssignmentOperator__OR_EQUAL)"); }


        public boolean visit(Ast n)
        {
            if (n instanceof AstToken) return visit((AstToken) n);
            else if (n instanceof identifier) return visit((identifier) n);
            else if (n instanceof PrimitiveType) return visit((PrimitiveType) n);
            else if (n instanceof ClassType) return visit((ClassType) n);
            else if (n instanceof InterfaceType) return visit((InterfaceType) n);
            else if (n instanceof TypeName) return visit((TypeName) n);
            else if (n instanceof ArrayType) return visit((ArrayType) n);
            else if (n instanceof TypeParameter) return visit((TypeParameter) n);
            else if (n instanceof TypeBound) return visit((TypeBound) n);
            else if (n instanceof AdditionalBoundList) return visit((AdditionalBoundList) n);
            else if (n instanceof AdditionalBound) return visit((AdditionalBound) n);
            else if (n instanceof TypeArguments) return visit((TypeArguments) n);
            else if (n instanceof ActualTypeArgumentList) return visit((ActualTypeArgumentList) n);
            else if (n instanceof Wildcard) return visit((Wildcard) n);
            else if (n instanceof PackageName) return visit((PackageName) n);
            else if (n instanceof ExpressionName) return visit((ExpressionName) n);
            else if (n instanceof MethodName) return visit((MethodName) n);
            else if (n instanceof PackageOrTypeName) return visit((PackageOrTypeName) n);
            else if (n instanceof AmbiguousName) return visit((AmbiguousName) n);
            else if (n instanceof CompilationUnit) return visit((CompilationUnit) n);
            else if (n instanceof ImportDeclarations) return visit((ImportDeclarations) n);
            else if (n instanceof TypeDeclarations) return visit((TypeDeclarations) n);
            else if (n instanceof PackageDeclaration) return visit((PackageDeclaration) n);
            else if (n instanceof SingleTypeImportDeclaration) return visit((SingleTypeImportDeclaration) n);
            else if (n instanceof TypeImportOnDemandDeclaration) return visit((TypeImportOnDemandDeclaration) n);
            else if (n instanceof SingleStaticImportDeclaration) return visit((SingleStaticImportDeclaration) n);
            else if (n instanceof StaticImportOnDemandDeclaration) return visit((StaticImportOnDemandDeclaration) n);
            else if (n instanceof TypeDeclaration) return visit((TypeDeclaration) n);
            else if (n instanceof NormalClassDeclaration) return visit((NormalClassDeclaration) n);
            else if (n instanceof ClassModifiers) return visit((ClassModifiers) n);
            else if (n instanceof TypeParameters) return visit((TypeParameters) n);
            else if (n instanceof TypeParameterList) return visit((TypeParameterList) n);
            else if (n instanceof Super) return visit((Super) n);
            else if (n instanceof Interfaces) return visit((Interfaces) n);
            else if (n instanceof InterfaceTypeList) return visit((InterfaceTypeList) n);
            else if (n instanceof ClassBody) return visit((ClassBody) n);
            else if (n instanceof ClassBodyDeclarations) return visit((ClassBodyDeclarations) n);
            else if (n instanceof ClassMemberDeclaration) return visit((ClassMemberDeclaration) n);
            else if (n instanceof FieldDeclaration) return visit((FieldDeclaration) n);
            else if (n instanceof VariableDeclarators) return visit((VariableDeclarators) n);
            else if (n instanceof VariableDeclarator) return visit((VariableDeclarator) n);
            else if (n instanceof VariableDeclaratorId) return visit((VariableDeclaratorId) n);
            else if (n instanceof FieldModifiers) return visit((FieldModifiers) n);
            else if (n instanceof MethodDeclaration) return visit((MethodDeclaration) n);
            else if (n instanceof MethodHeader) return visit((MethodHeader) n);
            else if (n instanceof ResultType) return visit((ResultType) n);
            else if (n instanceof FormalParameterList) return visit((FormalParameterList) n);
            else if (n instanceof FormalParameters) return visit((FormalParameters) n);
            else if (n instanceof FormalParameter) return visit((FormalParameter) n);
            else if (n instanceof VariableModifiers) return visit((VariableModifiers) n);
            else if (n instanceof VariableModifier) return visit((VariableModifier) n);
            else if (n instanceof LastFormalParameter) return visit((LastFormalParameter) n);
            else if (n instanceof MethodModifiers) return visit((MethodModifiers) n);
            else if (n instanceof Throws) return visit((Throws) n);
            else if (n instanceof ExceptionTypeList) return visit((ExceptionTypeList) n);
            else if (n instanceof MethodBody) return visit((MethodBody) n);
            else if (n instanceof StaticInitializer) return visit((StaticInitializer) n);
            else if (n instanceof ConstructorDeclaration) return visit((ConstructorDeclaration) n);
            else if (n instanceof ConstructorDeclarator) return visit((ConstructorDeclarator) n);
            else if (n instanceof ConstructorModifiers) return visit((ConstructorModifiers) n);
            else if (n instanceof ConstructorBody) return visit((ConstructorBody) n);
            else if (n instanceof EnumDeclaration) return visit((EnumDeclaration) n);
            else if (n instanceof EnumBody) return visit((EnumBody) n);
            else if (n instanceof EnumConstants) return visit((EnumConstants) n);
            else if (n instanceof EnumConstant) return visit((EnumConstant) n);
            else if (n instanceof Arguments) return visit((Arguments) n);
            else if (n instanceof EnumBodyDeclarations) return visit((EnumBodyDeclarations) n);
            else if (n instanceof NormalInterfaceDeclaration) return visit((NormalInterfaceDeclaration) n);
            else if (n instanceof InterfaceModifiers) return visit((InterfaceModifiers) n);
            else if (n instanceof InterfaceBody) return visit((InterfaceBody) n);
            else if (n instanceof InterfaceMemberDeclarations) return visit((InterfaceMemberDeclarations) n);
            else if (n instanceof InterfaceMemberDeclaration) return visit((InterfaceMemberDeclaration) n);
            else if (n instanceof ConstantDeclaration) return visit((ConstantDeclaration) n);
            else if (n instanceof ConstantModifiers) return visit((ConstantModifiers) n);
            else if (n instanceof AbstractMethodDeclaration) return visit((AbstractMethodDeclaration) n);
            else if (n instanceof AbstractMethodModifiers) return visit((AbstractMethodModifiers) n);
            else if (n instanceof AnnotationTypeDeclaration) return visit((AnnotationTypeDeclaration) n);
            else if (n instanceof AnnotationTypeBody) return visit((AnnotationTypeBody) n);
            else if (n instanceof AnnotationTypeElementDeclarations) return visit((AnnotationTypeElementDeclarations) n);
            else if (n instanceof DefaultValue) return visit((DefaultValue) n);
            else if (n instanceof Annotations) return visit((Annotations) n);
            else if (n instanceof NormalAnnotation) return visit((NormalAnnotation) n);
            else if (n instanceof ElementValuePairs) return visit((ElementValuePairs) n);
            else if (n instanceof ElementValuePair) return visit((ElementValuePair) n);
            else if (n instanceof ElementValueArrayInitializer) return visit((ElementValueArrayInitializer) n);
            else if (n instanceof ElementValues) return visit((ElementValues) n);
            else if (n instanceof MarkerAnnotation) return visit((MarkerAnnotation) n);
            else if (n instanceof SingleElementAnnotation) return visit((SingleElementAnnotation) n);
            else if (n instanceof ArrayInitializer) return visit((ArrayInitializer) n);
            else if (n instanceof VariableInitializers) return visit((VariableInitializers) n);
            else if (n instanceof Block) return visit((Block) n);
            else if (n instanceof BlockStatements) return visit((BlockStatements) n);
            else if (n instanceof LocalVariableDeclarationStatement) return visit((LocalVariableDeclarationStatement) n);
            else if (n instanceof LocalVariableDeclaration) return visit((LocalVariableDeclaration) n);
            else if (n instanceof IfThenStatement) return visit((IfThenStatement) n);
            else if (n instanceof IfThenElseStatement) return visit((IfThenElseStatement) n);
            else if (n instanceof IfThenElseStatementNoShortIf) return visit((IfThenElseStatementNoShortIf) n);
            else if (n instanceof EmptyStatement) return visit((EmptyStatement) n);
            else if (n instanceof LabeledStatement) return visit((LabeledStatement) n);
            else if (n instanceof LabeledStatementNoShortIf) return visit((LabeledStatementNoShortIf) n);
            else if (n instanceof ExpressionStatement) return visit((ExpressionStatement) n);
            else if (n instanceof SwitchStatement) return visit((SwitchStatement) n);
            else if (n instanceof SwitchBlock) return visit((SwitchBlock) n);
            else if (n instanceof SwitchBlockStatementGroups) return visit((SwitchBlockStatementGroups) n);
            else if (n instanceof SwitchBlockStatementGroup) return visit((SwitchBlockStatementGroup) n);
            else if (n instanceof SwitchLabels) return visit((SwitchLabels) n);
            else if (n instanceof WhileStatement) return visit((WhileStatement) n);
            else if (n instanceof WhileStatementNoShortIf) return visit((WhileStatementNoShortIf) n);
            else if (n instanceof DoStatement) return visit((DoStatement) n);
            else if (n instanceof BasicForStatement) return visit((BasicForStatement) n);
            else if (n instanceof ForStatementNoShortIf) return visit((ForStatementNoShortIf) n);
            else if (n instanceof StatementExpressionList) return visit((StatementExpressionList) n);
            else if (n instanceof EnhancedForStatement) return visit((EnhancedForStatement) n);
            else if (n instanceof BreakStatement) return visit((BreakStatement) n);
            else if (n instanceof ContinueStatement) return visit((ContinueStatement) n);
            else if (n instanceof ReturnStatement) return visit((ReturnStatement) n);
            else if (n instanceof ThrowStatement) return visit((ThrowStatement) n);
            else if (n instanceof SynchronizedStatement) return visit((SynchronizedStatement) n);
            else if (n instanceof Catches) return visit((Catches) n);
            else if (n instanceof CatchClause) return visit((CatchClause) n);
            else if (n instanceof Finally) return visit((Finally) n);
            else if (n instanceof ArgumentList) return visit((ArgumentList) n);
            else if (n instanceof DimExprs) return visit((DimExprs) n);
            else if (n instanceof DimExpr) return visit((DimExpr) n);
            else if (n instanceof PostIncrementExpression) return visit((PostIncrementExpression) n);
            else if (n instanceof PostDecrementExpression) return visit((PostDecrementExpression) n);
            else if (n instanceof PreIncrementExpression) return visit((PreIncrementExpression) n);
            else if (n instanceof PreDecrementExpression) return visit((PreDecrementExpression) n);
            else if (n instanceof AndExpression) return visit((AndExpression) n);
            else if (n instanceof ExclusiveOrExpression) return visit((ExclusiveOrExpression) n);
            else if (n instanceof InclusiveOrExpression) return visit((InclusiveOrExpression) n);
            else if (n instanceof ConditionalAndExpression) return visit((ConditionalAndExpression) n);
            else if (n instanceof ConditionalOrExpression) return visit((ConditionalOrExpression) n);
            else if (n instanceof ConditionalExpression) return visit((ConditionalExpression) n);
            else if (n instanceof Assignment) return visit((Assignment) n);
            else if (n instanceof Commaopt) return visit((Commaopt) n);
            else if (n instanceof Ellipsisopt) return visit((Ellipsisopt) n);
            else if (n instanceof LPGUserAction__BeginAction_BlockStatementsopt_EndAction) return visit((LPGUserAction__BeginAction_BlockStatementsopt_EndAction) n);
            else if (n instanceof LPGUserAction__BeginJava_BlockStatementsopt_EndJava) return visit((LPGUserAction__BeginJava_BlockStatementsopt_EndJava) n);
            else if (n instanceof LPGUserAction__NoAction) return visit((LPGUserAction__NoAction) n);
            else if (n instanceof LPGUserAction__NullAction) return visit((LPGUserAction__NullAction) n);
            else if (n instanceof LPGUserAction__BadAction) return visit((LPGUserAction__BadAction) n);
            else if (n instanceof IntegralType__byte) return visit((IntegralType__byte) n);
            else if (n instanceof IntegralType__short) return visit((IntegralType__short) n);
            else if (n instanceof IntegralType__int) return visit((IntegralType__int) n);
            else if (n instanceof IntegralType__long) return visit((IntegralType__long) n);
            else if (n instanceof IntegralType__char) return visit((IntegralType__char) n);
            else if (n instanceof FloatingPointType__float) return visit((FloatingPointType__float) n);
            else if (n instanceof FloatingPointType__double) return visit((FloatingPointType__double) n);
            else if (n instanceof WildcardBounds__extends_ReferenceType) return visit((WildcardBounds__extends_ReferenceType) n);
            else if (n instanceof WildcardBounds__super_ReferenceType) return visit((WildcardBounds__super_ReferenceType) n);
            else if (n instanceof ClassModifier__public) return visit((ClassModifier__public) n);
            else if (n instanceof ClassModifier__protected) return visit((ClassModifier__protected) n);
            else if (n instanceof ClassModifier__private) return visit((ClassModifier__private) n);
            else if (n instanceof ClassModifier__abstract) return visit((ClassModifier__abstract) n);
            else if (n instanceof ClassModifier__static) return visit((ClassModifier__static) n);
            else if (n instanceof ClassModifier__final) return visit((ClassModifier__final) n);
            else if (n instanceof ClassModifier__strictfp) return visit((ClassModifier__strictfp) n);
            else if (n instanceof FieldModifier__public) return visit((FieldModifier__public) n);
            else if (n instanceof FieldModifier__protected) return visit((FieldModifier__protected) n);
            else if (n instanceof FieldModifier__private) return visit((FieldModifier__private) n);
            else if (n instanceof FieldModifier__static) return visit((FieldModifier__static) n);
            else if (n instanceof FieldModifier__final) return visit((FieldModifier__final) n);
            else if (n instanceof FieldModifier__transient) return visit((FieldModifier__transient) n);
            else if (n instanceof FieldModifier__volatile) return visit((FieldModifier__volatile) n);
            else if (n instanceof MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN) return visit((MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN) n);
            else if (n instanceof MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET) return visit((MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET) n);
            else if (n instanceof MethodModifier__public) return visit((MethodModifier__public) n);
            else if (n instanceof MethodModifier__protected) return visit((MethodModifier__protected) n);
            else if (n instanceof MethodModifier__private) return visit((MethodModifier__private) n);
            else if (n instanceof MethodModifier__abstract) return visit((MethodModifier__abstract) n);
            else if (n instanceof MethodModifier__static) return visit((MethodModifier__static) n);
            else if (n instanceof MethodModifier__final) return visit((MethodModifier__final) n);
            else if (n instanceof MethodModifier__synchronized) return visit((MethodModifier__synchronized) n);
            else if (n instanceof MethodModifier__native) return visit((MethodModifier__native) n);
            else if (n instanceof MethodModifier__strictfp) return visit((MethodModifier__strictfp) n);
            else if (n instanceof ConstructorModifier__public) return visit((ConstructorModifier__public) n);
            else if (n instanceof ConstructorModifier__protected) return visit((ConstructorModifier__protected) n);
            else if (n instanceof ConstructorModifier__private) return visit((ConstructorModifier__private) n);
            else if (n instanceof ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) return visit((ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) n);
            else if (n instanceof ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) return visit((ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) n);
            else if (n instanceof ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) return visit((ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) n);
            else if (n instanceof InterfaceModifier__public) return visit((InterfaceModifier__public) n);
            else if (n instanceof InterfaceModifier__protected) return visit((InterfaceModifier__protected) n);
            else if (n instanceof InterfaceModifier__private) return visit((InterfaceModifier__private) n);
            else if (n instanceof InterfaceModifier__abstract) return visit((InterfaceModifier__abstract) n);
            else if (n instanceof InterfaceModifier__static) return visit((InterfaceModifier__static) n);
            else if (n instanceof InterfaceModifier__strictfp) return visit((InterfaceModifier__strictfp) n);
            else if (n instanceof ExtendsInterfaces__extends_InterfaceType) return visit((ExtendsInterfaces__extends_InterfaceType) n);
            else if (n instanceof ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType) return visit((ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType) n);
            else if (n instanceof ConstantModifier__public) return visit((ConstantModifier__public) n);
            else if (n instanceof ConstantModifier__static) return visit((ConstantModifier__static) n);
            else if (n instanceof ConstantModifier__final) return visit((ConstantModifier__final) n);
            else if (n instanceof AbstractMethodModifier__public) return visit((AbstractMethodModifier__public) n);
            else if (n instanceof AbstractMethodModifier__abstract) return visit((AbstractMethodModifier__abstract) n);
            else if (n instanceof AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON) return visit((AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON) n);
            else if (n instanceof AnnotationTypeElementDeclaration__SEMICOLON) return visit((AnnotationTypeElementDeclaration__SEMICOLON) n);
            else if (n instanceof AssertStatement__assert_Expression_SEMICOLON) return visit((AssertStatement__assert_Expression_SEMICOLON) n);
            else if (n instanceof AssertStatement__assert_Expression_COLON_Expression_SEMICOLON) return visit((AssertStatement__assert_Expression_COLON_Expression_SEMICOLON) n);
            else if (n instanceof SwitchLabel__case_ConstantExpression_COLON) return visit((SwitchLabel__case_ConstantExpression_COLON) n);
            else if (n instanceof SwitchLabel__case_EnumConstant_COLON) return visit((SwitchLabel__case_EnumConstant_COLON) n);
            else if (n instanceof SwitchLabel__default_COLON) return visit((SwitchLabel__default_COLON) n);
            else if (n instanceof TryStatement__try_Block_Catches) return visit((TryStatement__try_Block_Catches) n);
            else if (n instanceof TryStatement__try_Block_Catchesopt_Finally) return visit((TryStatement__try_Block_Catchesopt_Finally) n);
            else if (n instanceof PrimaryNoNewArray__Type_DOT_class) return visit((PrimaryNoNewArray__Type_DOT_class) n);
            else if (n instanceof PrimaryNoNewArray__void_DOT_class) return visit((PrimaryNoNewArray__void_DOT_class) n);
            else if (n instanceof PrimaryNoNewArray__this) return visit((PrimaryNoNewArray__this) n);
            else if (n instanceof PrimaryNoNewArray__ClassName_DOT_this) return visit((PrimaryNoNewArray__ClassName_DOT_this) n);
            else if (n instanceof PrimaryNoNewArray__LPAREN_Expression_RPAREN) return visit((PrimaryNoNewArray__LPAREN_Expression_RPAREN) n);
            else if (n instanceof Literal__IntegerLiteral) return visit((Literal__IntegerLiteral) n);
            else if (n instanceof Literal__LongLiteral) return visit((Literal__LongLiteral) n);
            else if (n instanceof Literal__FloatingPointLiteral) return visit((Literal__FloatingPointLiteral) n);
            else if (n instanceof Literal__DoubleLiteral) return visit((Literal__DoubleLiteral) n);
            else if (n instanceof Literal__CharacterLiteral) return visit((Literal__CharacterLiteral) n);
            else if (n instanceof Literal__StringLiteral) return visit((Literal__StringLiteral) n);
            else if (n instanceof Literal__null) return visit((Literal__null) n);
            else if (n instanceof BooleanLiteral__true) return visit((BooleanLiteral__true) n);
            else if (n instanceof BooleanLiteral__false) return visit((BooleanLiteral__false) n);
            else if (n instanceof ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) return visit((ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) n);
            else if (n instanceof ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) return visit((ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) n);
            else if (n instanceof ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt) return visit((ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt) n);
            else if (n instanceof ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt) return visit((ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt) n);
            else if (n instanceof ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer) return visit((ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer) n);
            else if (n instanceof ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer) return visit((ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer) n);
            else if (n instanceof Dims__LBRACKET_RBRACKET) return visit((Dims__LBRACKET_RBRACKET) n);
            else if (n instanceof Dims__Dims_LBRACKET_RBRACKET) return visit((Dims__Dims_LBRACKET_RBRACKET) n);
            else if (n instanceof FieldAccess__Primary_DOT_identifier) return visit((FieldAccess__Primary_DOT_identifier) n);
            else if (n instanceof FieldAccess__super_DOT_identifier) return visit((FieldAccess__super_DOT_identifier) n);
            else if (n instanceof FieldAccess__ClassName_DOT_super_DOT_identifier) return visit((FieldAccess__ClassName_DOT_super_DOT_identifier) n);
            else if (n instanceof MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN) return visit((MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) return visit((MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) return visit((MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) return visit((MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN) return visit((MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET) return visit((ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET) n);
            else if (n instanceof ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET) return visit((ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET) n);
            else if (n instanceof UnaryExpression__PLUS_UnaryExpression) return visit((UnaryExpression__PLUS_UnaryExpression) n);
            else if (n instanceof UnaryExpression__MINUS_UnaryExpression) return visit((UnaryExpression__MINUS_UnaryExpression) n);
            else if (n instanceof UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression) return visit((UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression) n);
            else if (n instanceof UnaryExpressionNotPlusMinus__NOT_UnaryExpression) return visit((UnaryExpressionNotPlusMinus__NOT_UnaryExpression) n);
            else if (n instanceof CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression) return visit((CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression) n);
            else if (n instanceof CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus) return visit((CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus) n);
            else if (n instanceof MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression) return visit((MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression) n);
            else if (n instanceof MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression) return visit((MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression) n);
            else if (n instanceof MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression) return visit((MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression) n);
            else if (n instanceof AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression) return visit((AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression) n);
            else if (n instanceof AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression) return visit((AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression) n);
            else if (n instanceof ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression) return visit((ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression) n);
            else if (n instanceof ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression) return visit((ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression) n);
            else if (n instanceof ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression) return visit((ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_LESS_ShiftExpression) return visit((RelationalExpression__RelationalExpression_LESS_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_GREATER_ShiftExpression) return visit((RelationalExpression__RelationalExpression_GREATER_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression) return visit((RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression) return visit((RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_instanceof_ReferenceType) return visit((RelationalExpression__RelationalExpression_instanceof_ReferenceType) n);
            else if (n instanceof EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression) return visit((EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression) n);
            else if (n instanceof EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression) return visit((EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression) n);
            else if (n instanceof AssignmentOperator__EQUAL) return visit((AssignmentOperator__EQUAL) n);
            else if (n instanceof AssignmentOperator__MULTIPLY_EQUAL) return visit((AssignmentOperator__MULTIPLY_EQUAL) n);
            else if (n instanceof AssignmentOperator__DIVIDE_EQUAL) return visit((AssignmentOperator__DIVIDE_EQUAL) n);
            else if (n instanceof AssignmentOperator__REMAINDER_EQUAL) return visit((AssignmentOperator__REMAINDER_EQUAL) n);
            else if (n instanceof AssignmentOperator__PLUS_EQUAL) return visit((AssignmentOperator__PLUS_EQUAL) n);
            else if (n instanceof AssignmentOperator__MINUS_EQUAL) return visit((AssignmentOperator__MINUS_EQUAL) n);
            else if (n instanceof AssignmentOperator__LEFT_SHIFT_EQUAL) return visit((AssignmentOperator__LEFT_SHIFT_EQUAL) n);
            else if (n instanceof AssignmentOperator__GREATER_GREATER_EQUAL) return visit((AssignmentOperator__GREATER_GREATER_EQUAL) n);
            else if (n instanceof AssignmentOperator__GREATER_GREATER_GREATER_EQUAL) return visit((AssignmentOperator__GREATER_GREATER_GREATER_EQUAL) n);
            else if (n instanceof AssignmentOperator__AND_EQUAL) return visit((AssignmentOperator__AND_EQUAL) n);
            else if (n instanceof AssignmentOperator__XOR_EQUAL) return visit((AssignmentOperator__XOR_EQUAL) n);
            else if (n instanceof AssignmentOperator__OR_EQUAL) return visit((AssignmentOperator__OR_EQUAL) n);
            throw new UnsupportedOperationException("visit(" + n.getClass().toString() + ")");
        }
        public void endVisit(Ast n)
        {
            if (n instanceof AstToken) endVisit((AstToken) n);
            else if (n instanceof identifier) endVisit((identifier) n);
            else if (n instanceof PrimitiveType) endVisit((PrimitiveType) n);
            else if (n instanceof ClassType) endVisit((ClassType) n);
            else if (n instanceof InterfaceType) endVisit((InterfaceType) n);
            else if (n instanceof TypeName) endVisit((TypeName) n);
            else if (n instanceof ArrayType) endVisit((ArrayType) n);
            else if (n instanceof TypeParameter) endVisit((TypeParameter) n);
            else if (n instanceof TypeBound) endVisit((TypeBound) n);
            else if (n instanceof AdditionalBoundList) endVisit((AdditionalBoundList) n);
            else if (n instanceof AdditionalBound) endVisit((AdditionalBound) n);
            else if (n instanceof TypeArguments) endVisit((TypeArguments) n);
            else if (n instanceof ActualTypeArgumentList) endVisit((ActualTypeArgumentList) n);
            else if (n instanceof Wildcard) endVisit((Wildcard) n);
            else if (n instanceof PackageName) endVisit((PackageName) n);
            else if (n instanceof ExpressionName) endVisit((ExpressionName) n);
            else if (n instanceof MethodName) endVisit((MethodName) n);
            else if (n instanceof PackageOrTypeName) endVisit((PackageOrTypeName) n);
            else if (n instanceof AmbiguousName) endVisit((AmbiguousName) n);
            else if (n instanceof CompilationUnit) endVisit((CompilationUnit) n);
            else if (n instanceof ImportDeclarations) endVisit((ImportDeclarations) n);
            else if (n instanceof TypeDeclarations) endVisit((TypeDeclarations) n);
            else if (n instanceof PackageDeclaration) endVisit((PackageDeclaration) n);
            else if (n instanceof SingleTypeImportDeclaration) endVisit((SingleTypeImportDeclaration) n);
            else if (n instanceof TypeImportOnDemandDeclaration) endVisit((TypeImportOnDemandDeclaration) n);
            else if (n instanceof SingleStaticImportDeclaration) endVisit((SingleStaticImportDeclaration) n);
            else if (n instanceof StaticImportOnDemandDeclaration) endVisit((StaticImportOnDemandDeclaration) n);
            else if (n instanceof TypeDeclaration) endVisit((TypeDeclaration) n);
            else if (n instanceof NormalClassDeclaration) endVisit((NormalClassDeclaration) n);
            else if (n instanceof ClassModifiers) endVisit((ClassModifiers) n);
            else if (n instanceof TypeParameters) endVisit((TypeParameters) n);
            else if (n instanceof TypeParameterList) endVisit((TypeParameterList) n);
            else if (n instanceof Super) endVisit((Super) n);
            else if (n instanceof Interfaces) endVisit((Interfaces) n);
            else if (n instanceof InterfaceTypeList) endVisit((InterfaceTypeList) n);
            else if (n instanceof ClassBody) endVisit((ClassBody) n);
            else if (n instanceof ClassBodyDeclarations) endVisit((ClassBodyDeclarations) n);
            else if (n instanceof ClassMemberDeclaration) endVisit((ClassMemberDeclaration) n);
            else if (n instanceof FieldDeclaration) endVisit((FieldDeclaration) n);
            else if (n instanceof VariableDeclarators) endVisit((VariableDeclarators) n);
            else if (n instanceof VariableDeclarator) endVisit((VariableDeclarator) n);
            else if (n instanceof VariableDeclaratorId) endVisit((VariableDeclaratorId) n);
            else if (n instanceof FieldModifiers) endVisit((FieldModifiers) n);
            else if (n instanceof MethodDeclaration) endVisit((MethodDeclaration) n);
            else if (n instanceof MethodHeader) endVisit((MethodHeader) n);
            else if (n instanceof ResultType) endVisit((ResultType) n);
            else if (n instanceof FormalParameterList) endVisit((FormalParameterList) n);
            else if (n instanceof FormalParameters) endVisit((FormalParameters) n);
            else if (n instanceof FormalParameter) endVisit((FormalParameter) n);
            else if (n instanceof VariableModifiers) endVisit((VariableModifiers) n);
            else if (n instanceof VariableModifier) endVisit((VariableModifier) n);
            else if (n instanceof LastFormalParameter) endVisit((LastFormalParameter) n);
            else if (n instanceof MethodModifiers) endVisit((MethodModifiers) n);
            else if (n instanceof Throws) endVisit((Throws) n);
            else if (n instanceof ExceptionTypeList) endVisit((ExceptionTypeList) n);
            else if (n instanceof MethodBody) endVisit((MethodBody) n);
            else if (n instanceof StaticInitializer) endVisit((StaticInitializer) n);
            else if (n instanceof ConstructorDeclaration) endVisit((ConstructorDeclaration) n);
            else if (n instanceof ConstructorDeclarator) endVisit((ConstructorDeclarator) n);
            else if (n instanceof ConstructorModifiers) endVisit((ConstructorModifiers) n);
            else if (n instanceof ConstructorBody) endVisit((ConstructorBody) n);
            else if (n instanceof EnumDeclaration) endVisit((EnumDeclaration) n);
            else if (n instanceof EnumBody) endVisit((EnumBody) n);
            else if (n instanceof EnumConstants) endVisit((EnumConstants) n);
            else if (n instanceof EnumConstant) endVisit((EnumConstant) n);
            else if (n instanceof Arguments) endVisit((Arguments) n);
            else if (n instanceof EnumBodyDeclarations) endVisit((EnumBodyDeclarations) n);
            else if (n instanceof NormalInterfaceDeclaration) endVisit((NormalInterfaceDeclaration) n);
            else if (n instanceof InterfaceModifiers) endVisit((InterfaceModifiers) n);
            else if (n instanceof InterfaceBody) endVisit((InterfaceBody) n);
            else if (n instanceof InterfaceMemberDeclarations) endVisit((InterfaceMemberDeclarations) n);
            else if (n instanceof InterfaceMemberDeclaration) endVisit((InterfaceMemberDeclaration) n);
            else if (n instanceof ConstantDeclaration) endVisit((ConstantDeclaration) n);
            else if (n instanceof ConstantModifiers) endVisit((ConstantModifiers) n);
            else if (n instanceof AbstractMethodDeclaration) endVisit((AbstractMethodDeclaration) n);
            else if (n instanceof AbstractMethodModifiers) endVisit((AbstractMethodModifiers) n);
            else if (n instanceof AnnotationTypeDeclaration) endVisit((AnnotationTypeDeclaration) n);
            else if (n instanceof AnnotationTypeBody) endVisit((AnnotationTypeBody) n);
            else if (n instanceof AnnotationTypeElementDeclarations) endVisit((AnnotationTypeElementDeclarations) n);
            else if (n instanceof DefaultValue) endVisit((DefaultValue) n);
            else if (n instanceof Annotations) endVisit((Annotations) n);
            else if (n instanceof NormalAnnotation) endVisit((NormalAnnotation) n);
            else if (n instanceof ElementValuePairs) endVisit((ElementValuePairs) n);
            else if (n instanceof ElementValuePair) endVisit((ElementValuePair) n);
            else if (n instanceof ElementValueArrayInitializer) endVisit((ElementValueArrayInitializer) n);
            else if (n instanceof ElementValues) endVisit((ElementValues) n);
            else if (n instanceof MarkerAnnotation) endVisit((MarkerAnnotation) n);
            else if (n instanceof SingleElementAnnotation) endVisit((SingleElementAnnotation) n);
            else if (n instanceof ArrayInitializer) endVisit((ArrayInitializer) n);
            else if (n instanceof VariableInitializers) endVisit((VariableInitializers) n);
            else if (n instanceof Block) endVisit((Block) n);
            else if (n instanceof BlockStatements) endVisit((BlockStatements) n);
            else if (n instanceof LocalVariableDeclarationStatement) endVisit((LocalVariableDeclarationStatement) n);
            else if (n instanceof LocalVariableDeclaration) endVisit((LocalVariableDeclaration) n);
            else if (n instanceof IfThenStatement) endVisit((IfThenStatement) n);
            else if (n instanceof IfThenElseStatement) endVisit((IfThenElseStatement) n);
            else if (n instanceof IfThenElseStatementNoShortIf) endVisit((IfThenElseStatementNoShortIf) n);
            else if (n instanceof EmptyStatement) endVisit((EmptyStatement) n);
            else if (n instanceof LabeledStatement) endVisit((LabeledStatement) n);
            else if (n instanceof LabeledStatementNoShortIf) endVisit((LabeledStatementNoShortIf) n);
            else if (n instanceof ExpressionStatement) endVisit((ExpressionStatement) n);
            else if (n instanceof SwitchStatement) endVisit((SwitchStatement) n);
            else if (n instanceof SwitchBlock) endVisit((SwitchBlock) n);
            else if (n instanceof SwitchBlockStatementGroups) endVisit((SwitchBlockStatementGroups) n);
            else if (n instanceof SwitchBlockStatementGroup) endVisit((SwitchBlockStatementGroup) n);
            else if (n instanceof SwitchLabels) endVisit((SwitchLabels) n);
            else if (n instanceof WhileStatement) endVisit((WhileStatement) n);
            else if (n instanceof WhileStatementNoShortIf) endVisit((WhileStatementNoShortIf) n);
            else if (n instanceof DoStatement) endVisit((DoStatement) n);
            else if (n instanceof BasicForStatement) endVisit((BasicForStatement) n);
            else if (n instanceof ForStatementNoShortIf) endVisit((ForStatementNoShortIf) n);
            else if (n instanceof StatementExpressionList) endVisit((StatementExpressionList) n);
            else if (n instanceof EnhancedForStatement) endVisit((EnhancedForStatement) n);
            else if (n instanceof BreakStatement) endVisit((BreakStatement) n);
            else if (n instanceof ContinueStatement) endVisit((ContinueStatement) n);
            else if (n instanceof ReturnStatement) endVisit((ReturnStatement) n);
            else if (n instanceof ThrowStatement) endVisit((ThrowStatement) n);
            else if (n instanceof SynchronizedStatement) endVisit((SynchronizedStatement) n);
            else if (n instanceof Catches) endVisit((Catches) n);
            else if (n instanceof CatchClause) endVisit((CatchClause) n);
            else if (n instanceof Finally) endVisit((Finally) n);
            else if (n instanceof ArgumentList) endVisit((ArgumentList) n);
            else if (n instanceof DimExprs) endVisit((DimExprs) n);
            else if (n instanceof DimExpr) endVisit((DimExpr) n);
            else if (n instanceof PostIncrementExpression) endVisit((PostIncrementExpression) n);
            else if (n instanceof PostDecrementExpression) endVisit((PostDecrementExpression) n);
            else if (n instanceof PreIncrementExpression) endVisit((PreIncrementExpression) n);
            else if (n instanceof PreDecrementExpression) endVisit((PreDecrementExpression) n);
            else if (n instanceof AndExpression) endVisit((AndExpression) n);
            else if (n instanceof ExclusiveOrExpression) endVisit((ExclusiveOrExpression) n);
            else if (n instanceof InclusiveOrExpression) endVisit((InclusiveOrExpression) n);
            else if (n instanceof ConditionalAndExpression) endVisit((ConditionalAndExpression) n);
            else if (n instanceof ConditionalOrExpression) endVisit((ConditionalOrExpression) n);
            else if (n instanceof ConditionalExpression) endVisit((ConditionalExpression) n);
            else if (n instanceof Assignment) endVisit((Assignment) n);
            else if (n instanceof Commaopt) endVisit((Commaopt) n);
            else if (n instanceof Ellipsisopt) endVisit((Ellipsisopt) n);
            else if (n instanceof LPGUserAction__BeginAction_BlockStatementsopt_EndAction) endVisit((LPGUserAction__BeginAction_BlockStatementsopt_EndAction) n);
            else if (n instanceof LPGUserAction__BeginJava_BlockStatementsopt_EndJava) endVisit((LPGUserAction__BeginJava_BlockStatementsopt_EndJava) n);
            else if (n instanceof LPGUserAction__NoAction) endVisit((LPGUserAction__NoAction) n);
            else if (n instanceof LPGUserAction__NullAction) endVisit((LPGUserAction__NullAction) n);
            else if (n instanceof LPGUserAction__BadAction) endVisit((LPGUserAction__BadAction) n);
            else if (n instanceof IntegralType__byte) endVisit((IntegralType__byte) n);
            else if (n instanceof IntegralType__short) endVisit((IntegralType__short) n);
            else if (n instanceof IntegralType__int) endVisit((IntegralType__int) n);
            else if (n instanceof IntegralType__long) endVisit((IntegralType__long) n);
            else if (n instanceof IntegralType__char) endVisit((IntegralType__char) n);
            else if (n instanceof FloatingPointType__float) endVisit((FloatingPointType__float) n);
            else if (n instanceof FloatingPointType__double) endVisit((FloatingPointType__double) n);
            else if (n instanceof WildcardBounds__extends_ReferenceType) endVisit((WildcardBounds__extends_ReferenceType) n);
            else if (n instanceof WildcardBounds__super_ReferenceType) endVisit((WildcardBounds__super_ReferenceType) n);
            else if (n instanceof ClassModifier__public) endVisit((ClassModifier__public) n);
            else if (n instanceof ClassModifier__protected) endVisit((ClassModifier__protected) n);
            else if (n instanceof ClassModifier__private) endVisit((ClassModifier__private) n);
            else if (n instanceof ClassModifier__abstract) endVisit((ClassModifier__abstract) n);
            else if (n instanceof ClassModifier__static) endVisit((ClassModifier__static) n);
            else if (n instanceof ClassModifier__final) endVisit((ClassModifier__final) n);
            else if (n instanceof ClassModifier__strictfp) endVisit((ClassModifier__strictfp) n);
            else if (n instanceof FieldModifier__public) endVisit((FieldModifier__public) n);
            else if (n instanceof FieldModifier__protected) endVisit((FieldModifier__protected) n);
            else if (n instanceof FieldModifier__private) endVisit((FieldModifier__private) n);
            else if (n instanceof FieldModifier__static) endVisit((FieldModifier__static) n);
            else if (n instanceof FieldModifier__final) endVisit((FieldModifier__final) n);
            else if (n instanceof FieldModifier__transient) endVisit((FieldModifier__transient) n);
            else if (n instanceof FieldModifier__volatile) endVisit((FieldModifier__volatile) n);
            else if (n instanceof MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN) endVisit((MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN) n);
            else if (n instanceof MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET) endVisit((MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET) n);
            else if (n instanceof MethodModifier__public) endVisit((MethodModifier__public) n);
            else if (n instanceof MethodModifier__protected) endVisit((MethodModifier__protected) n);
            else if (n instanceof MethodModifier__private) endVisit((MethodModifier__private) n);
            else if (n instanceof MethodModifier__abstract) endVisit((MethodModifier__abstract) n);
            else if (n instanceof MethodModifier__static) endVisit((MethodModifier__static) n);
            else if (n instanceof MethodModifier__final) endVisit((MethodModifier__final) n);
            else if (n instanceof MethodModifier__synchronized) endVisit((MethodModifier__synchronized) n);
            else if (n instanceof MethodModifier__native) endVisit((MethodModifier__native) n);
            else if (n instanceof MethodModifier__strictfp) endVisit((MethodModifier__strictfp) n);
            else if (n instanceof ConstructorModifier__public) endVisit((ConstructorModifier__public) n);
            else if (n instanceof ConstructorModifier__protected) endVisit((ConstructorModifier__protected) n);
            else if (n instanceof ConstructorModifier__private) endVisit((ConstructorModifier__private) n);
            else if (n instanceof ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) endVisit((ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) n);
            else if (n instanceof ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) endVisit((ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) n);
            else if (n instanceof ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) endVisit((ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON) n);
            else if (n instanceof InterfaceModifier__public) endVisit((InterfaceModifier__public) n);
            else if (n instanceof InterfaceModifier__protected) endVisit((InterfaceModifier__protected) n);
            else if (n instanceof InterfaceModifier__private) endVisit((InterfaceModifier__private) n);
            else if (n instanceof InterfaceModifier__abstract) endVisit((InterfaceModifier__abstract) n);
            else if (n instanceof InterfaceModifier__static) endVisit((InterfaceModifier__static) n);
            else if (n instanceof InterfaceModifier__strictfp) endVisit((InterfaceModifier__strictfp) n);
            else if (n instanceof ExtendsInterfaces__extends_InterfaceType) endVisit((ExtendsInterfaces__extends_InterfaceType) n);
            else if (n instanceof ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType) endVisit((ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType) n);
            else if (n instanceof ConstantModifier__public) endVisit((ConstantModifier__public) n);
            else if (n instanceof ConstantModifier__static) endVisit((ConstantModifier__static) n);
            else if (n instanceof ConstantModifier__final) endVisit((ConstantModifier__final) n);
            else if (n instanceof AbstractMethodModifier__public) endVisit((AbstractMethodModifier__public) n);
            else if (n instanceof AbstractMethodModifier__abstract) endVisit((AbstractMethodModifier__abstract) n);
            else if (n instanceof AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON) endVisit((AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON) n);
            else if (n instanceof AnnotationTypeElementDeclaration__SEMICOLON) endVisit((AnnotationTypeElementDeclaration__SEMICOLON) n);
            else if (n instanceof AssertStatement__assert_Expression_SEMICOLON) endVisit((AssertStatement__assert_Expression_SEMICOLON) n);
            else if (n instanceof AssertStatement__assert_Expression_COLON_Expression_SEMICOLON) endVisit((AssertStatement__assert_Expression_COLON_Expression_SEMICOLON) n);
            else if (n instanceof SwitchLabel__case_ConstantExpression_COLON) endVisit((SwitchLabel__case_ConstantExpression_COLON) n);
            else if (n instanceof SwitchLabel__case_EnumConstant_COLON) endVisit((SwitchLabel__case_EnumConstant_COLON) n);
            else if (n instanceof SwitchLabel__default_COLON) endVisit((SwitchLabel__default_COLON) n);
            else if (n instanceof TryStatement__try_Block_Catches) endVisit((TryStatement__try_Block_Catches) n);
            else if (n instanceof TryStatement__try_Block_Catchesopt_Finally) endVisit((TryStatement__try_Block_Catchesopt_Finally) n);
            else if (n instanceof PrimaryNoNewArray__Type_DOT_class) endVisit((PrimaryNoNewArray__Type_DOT_class) n);
            else if (n instanceof PrimaryNoNewArray__void_DOT_class) endVisit((PrimaryNoNewArray__void_DOT_class) n);
            else if (n instanceof PrimaryNoNewArray__this) endVisit((PrimaryNoNewArray__this) n);
            else if (n instanceof PrimaryNoNewArray__ClassName_DOT_this) endVisit((PrimaryNoNewArray__ClassName_DOT_this) n);
            else if (n instanceof PrimaryNoNewArray__LPAREN_Expression_RPAREN) endVisit((PrimaryNoNewArray__LPAREN_Expression_RPAREN) n);
            else if (n instanceof Literal__IntegerLiteral) endVisit((Literal__IntegerLiteral) n);
            else if (n instanceof Literal__LongLiteral) endVisit((Literal__LongLiteral) n);
            else if (n instanceof Literal__FloatingPointLiteral) endVisit((Literal__FloatingPointLiteral) n);
            else if (n instanceof Literal__DoubleLiteral) endVisit((Literal__DoubleLiteral) n);
            else if (n instanceof Literal__CharacterLiteral) endVisit((Literal__CharacterLiteral) n);
            else if (n instanceof Literal__StringLiteral) endVisit((Literal__StringLiteral) n);
            else if (n instanceof Literal__null) endVisit((Literal__null) n);
            else if (n instanceof BooleanLiteral__true) endVisit((BooleanLiteral__true) n);
            else if (n instanceof BooleanLiteral__false) endVisit((BooleanLiteral__false) n);
            else if (n instanceof ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) endVisit((ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) n);
            else if (n instanceof ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) endVisit((ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt) n);
            else if (n instanceof ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt) endVisit((ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt) n);
            else if (n instanceof ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt) endVisit((ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt) n);
            else if (n instanceof ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer) endVisit((ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer) n);
            else if (n instanceof ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer) endVisit((ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer) n);
            else if (n instanceof Dims__LBRACKET_RBRACKET) endVisit((Dims__LBRACKET_RBRACKET) n);
            else if (n instanceof Dims__Dims_LBRACKET_RBRACKET) endVisit((Dims__Dims_LBRACKET_RBRACKET) n);
            else if (n instanceof FieldAccess__Primary_DOT_identifier) endVisit((FieldAccess__Primary_DOT_identifier) n);
            else if (n instanceof FieldAccess__super_DOT_identifier) endVisit((FieldAccess__super_DOT_identifier) n);
            else if (n instanceof FieldAccess__ClassName_DOT_super_DOT_identifier) endVisit((FieldAccess__ClassName_DOT_super_DOT_identifier) n);
            else if (n instanceof MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN) endVisit((MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) endVisit((MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) endVisit((MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) endVisit((MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN) endVisit((MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN) n);
            else if (n instanceof ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET) endVisit((ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET) n);
            else if (n instanceof ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET) endVisit((ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET) n);
            else if (n instanceof UnaryExpression__PLUS_UnaryExpression) endVisit((UnaryExpression__PLUS_UnaryExpression) n);
            else if (n instanceof UnaryExpression__MINUS_UnaryExpression) endVisit((UnaryExpression__MINUS_UnaryExpression) n);
            else if (n instanceof UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression) endVisit((UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression) n);
            else if (n instanceof UnaryExpressionNotPlusMinus__NOT_UnaryExpression) endVisit((UnaryExpressionNotPlusMinus__NOT_UnaryExpression) n);
            else if (n instanceof CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression) endVisit((CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression) n);
            else if (n instanceof CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus) endVisit((CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus) n);
            else if (n instanceof MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression) endVisit((MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression) n);
            else if (n instanceof MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression) endVisit((MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression) n);
            else if (n instanceof MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression) endVisit((MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression) n);
            else if (n instanceof AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression) endVisit((AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression) n);
            else if (n instanceof AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression) endVisit((AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression) n);
            else if (n instanceof ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression) endVisit((ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression) n);
            else if (n instanceof ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression) endVisit((ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression) n);
            else if (n instanceof ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression) endVisit((ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_LESS_ShiftExpression) endVisit((RelationalExpression__RelationalExpression_LESS_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_GREATER_ShiftExpression) endVisit((RelationalExpression__RelationalExpression_GREATER_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression) endVisit((RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression) endVisit((RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression) n);
            else if (n instanceof RelationalExpression__RelationalExpression_instanceof_ReferenceType) endVisit((RelationalExpression__RelationalExpression_instanceof_ReferenceType) n);
            else if (n instanceof EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression) endVisit((EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression) n);
            else if (n instanceof EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression) endVisit((EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression) n);
            else if (n instanceof AssignmentOperator__EQUAL) endVisit((AssignmentOperator__EQUAL) n);
            else if (n instanceof AssignmentOperator__MULTIPLY_EQUAL) endVisit((AssignmentOperator__MULTIPLY_EQUAL) n);
            else if (n instanceof AssignmentOperator__DIVIDE_EQUAL) endVisit((AssignmentOperator__DIVIDE_EQUAL) n);
            else if (n instanceof AssignmentOperator__REMAINDER_EQUAL) endVisit((AssignmentOperator__REMAINDER_EQUAL) n);
            else if (n instanceof AssignmentOperator__PLUS_EQUAL) endVisit((AssignmentOperator__PLUS_EQUAL) n);
            else if (n instanceof AssignmentOperator__MINUS_EQUAL) endVisit((AssignmentOperator__MINUS_EQUAL) n);
            else if (n instanceof AssignmentOperator__LEFT_SHIFT_EQUAL) endVisit((AssignmentOperator__LEFT_SHIFT_EQUAL) n);
            else if (n instanceof AssignmentOperator__GREATER_GREATER_EQUAL) endVisit((AssignmentOperator__GREATER_GREATER_EQUAL) n);
            else if (n instanceof AssignmentOperator__GREATER_GREATER_GREATER_EQUAL) endVisit((AssignmentOperator__GREATER_GREATER_GREATER_EQUAL) n);
            else if (n instanceof AssignmentOperator__AND_EQUAL) endVisit((AssignmentOperator__AND_EQUAL) n);
            else if (n instanceof AssignmentOperator__XOR_EQUAL) endVisit((AssignmentOperator__XOR_EQUAL) n);
            else if (n instanceof AssignmentOperator__OR_EQUAL) endVisit((AssignmentOperator__OR_EQUAL) n);
            throw new UnsupportedOperationException("visit(" + n.getClass().toString() + ")");
        }
    }

    public void ruleAction(int ruleNumber)
    {
        switch (ruleNumber)
        {

            //
            // Rule 3:  identifier ::= IDENTIFIER
            //
            case 3: {
               //#line 184 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new identifier(JavaParser.this, getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 4:  LPGUserAction ::= BlockStatementsopt
            //
            case 4:
                break;
            //
            // Rule 5:  LPGUserAction ::= $BeginAction BlockStatementsopt $EndAction
            //
            case 5: {
               //#line 194 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LPGUserAction__BeginAction_BlockStatementsopt_EndAction(getLeftIToken(), getRightIToken(),
                                                                                new AstToken(getRhsIToken(1)),
                                                                                (IBlockStatementsopt)getRhsSym(2),
                                                                                new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 6:  LPGUserAction ::= $BeginJava BlockStatementsopt $EndJava
            //
            case 6: {
               //#line 195 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LPGUserAction__BeginJava_BlockStatementsopt_EndJava(getLeftIToken(), getRightIToken(),
                                                                            new AstToken(getRhsIToken(1)),
                                                                            (IBlockStatementsopt)getRhsSym(2),
                                                                            new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 7:  LPGUserAction ::= $NoAction
            //
            case 7: {
               //#line 196 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LPGUserAction__NoAction(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 8:  LPGUserAction ::= $NullAction
            //
            case 8: {
               //#line 197 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LPGUserAction__NullAction(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 9:  LPGUserAction ::= $BadAction
            //
            case 9: {
               //#line 198 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LPGUserAction__BadAction(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 10:  Type ::= PrimitiveType
            //
            case 10:
                break;
            //
            // Rule 11:  Type ::= ReferenceType
            //
            case 11:
                break;
            //
            // Rule 12:  PrimitiveType ::= NumericType
            //
            case 12:
                break;
            //
            // Rule 13:  PrimitiveType ::= boolean
            //
            case 13: {
               //#line 207 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PrimitiveType(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 14:  NumericType ::= IntegralType
            //
            case 14:
                break;
            //
            // Rule 15:  NumericType ::= FloatingPointType
            //
            case 15:
                break;
            //
            // Rule 16:  IntegralType ::= byte
            //
            case 16: {
               //#line 212 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IntegralType__byte(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 17:  IntegralType ::= short
            //
            case 17: {
               //#line 213 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IntegralType__short(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 18:  IntegralType ::= int
            //
            case 18: {
               //#line 214 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IntegralType__int(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 19:  IntegralType ::= long
            //
            case 19: {
               //#line 215 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IntegralType__long(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 20:  IntegralType ::= char
            //
            case 20: {
               //#line 216 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IntegralType__char(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 21:  FloatingPointType ::= float
            //
            case 21: {
               //#line 218 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FloatingPointType__float(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 22:  FloatingPointType ::= double
            //
            case 22: {
               //#line 219 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FloatingPointType__double(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 23:  ReferenceType ::= ClassOrInterfaceType
            //
            case 23:
                break;
            //
            // Rule 24:  ReferenceType ::= TypeVariable
            //
            case 24:
                break;
            //
            // Rule 25:  ReferenceType ::= ArrayType
            //
            case 25:
                break;
            //
            // Rule 26:  ClassOrInterfaceType ::= ClassType
            //
            case 26:
                break;
            //
            // Rule 27:  ClassType ::= TypeName TypeArgumentsopt
            //
            case 27: {
               //#line 231 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassType(getLeftIToken(), getRightIToken(),
                                  (ITypeName)getRhsSym(1),
                                  (TypeArguments)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 28:  InterfaceType ::= TypeName TypeArgumentsopt
            //
            case 28: {
               //#line 233 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceType(getLeftIToken(), getRightIToken(),
                                      (ITypeName)getRhsSym(1),
                                      (TypeArguments)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 29:  TypeName ::= identifier
            //
            case 29:
                break;
            //
            // Rule 30:  TypeName ::= TypeName . identifier
            //
            case 30: {
               //#line 236 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeName(getLeftIToken(), getRightIToken(),
                                 (ITypeName)getRhsSym(1),
                                 new AstToken(getRhsIToken(2)),
                                 (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 31:  ClassName ::= TypeName
            //
            case 31:
                break;
            //
            // Rule 32:  TypeVariable ::= identifier
            //
            case 32:
                break;
            //
            // Rule 33:  ArrayType ::= Type [ ]
            //
            case 33: {
               //#line 242 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayType(getLeftIToken(), getRightIToken(),
                                  (IType)getRhsSym(1),
                                  new AstToken(getRhsIToken(2)),
                                  new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 34:  TypeParameter ::= TypeVariable TypeBoundopt
            //
            case 34: {
               //#line 244 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeParameter(getLeftIToken(), getRightIToken(),
                                      (identifier)getRhsSym(1),
                                      (TypeBound)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 35:  TypeBound ::= extends ClassOrInterfaceType AdditionalBoundListopt
            //
            case 35: {
               //#line 246 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeBound(getLeftIToken(), getRightIToken(),
                                  new AstToken(getRhsIToken(1)),
                                  (ClassType)getRhsSym(2),
                                  (IAdditionalBoundListopt)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 36:  AdditionalBoundList ::= AdditionalBound
            //
            case 36:
                break;
            //
            // Rule 37:  AdditionalBoundList ::= AdditionalBoundList AdditionalBound
            //
            case 37: {
               //#line 249 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AdditionalBoundList(getLeftIToken(), getRightIToken(),
                                            (IAdditionalBoundList)getRhsSym(1),
                                            (AdditionalBound)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 38:  AdditionalBound ::= & InterfaceType
            //
            case 38: {
               //#line 251 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AdditionalBound(getLeftIToken(), getRightIToken(),
                                        new AstToken(getRhsIToken(1)),
                                        (InterfaceType)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 39:  TypeArguments ::= < ActualTypeArgumentList >
            //
            case 39: {
               //#line 253 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeArguments(getLeftIToken(), getRightIToken(),
                                      new AstToken(getRhsIToken(1)),
                                      (IActualTypeArgumentList)getRhsSym(2),
                                      new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 40:  ActualTypeArgumentList ::= ActualTypeArgument
            //
            case 40:
                break;
            //
            // Rule 41:  ActualTypeArgumentList ::= ActualTypeArgumentList , ActualTypeArgument
            //
            case 41: {
               //#line 256 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ActualTypeArgumentList(getLeftIToken(), getRightIToken(),
                                               (IActualTypeArgumentList)getRhsSym(1),
                                               new AstToken(getRhsIToken(2)),
                                               (IActualTypeArgument)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 42:  ActualTypeArgument ::= ReferenceType
            //
            case 42:
                break;
            //
            // Rule 43:  ActualTypeArgument ::= Wildcard
            //
            case 43:
                break;
            //
            // Rule 44:  Wildcard ::= ? WildcardBoundsOpt
            //
            case 44: {
               //#line 261 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Wildcard(getLeftIToken(), getRightIToken(),
                                 new AstToken(getRhsIToken(1)),
                                 (IWildcardBoundsOpt)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 45:  WildcardBounds ::= extends ReferenceType
            //
            case 45: {
               //#line 263 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new WildcardBounds__extends_ReferenceType(getLeftIToken(), getRightIToken(),
                                                              new AstToken(getRhsIToken(1)),
                                                              (IReferenceType)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 46:  WildcardBounds ::= super ReferenceType
            //
            case 46: {
               //#line 264 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new WildcardBounds__super_ReferenceType(getLeftIToken(), getRightIToken(),
                                                            new AstToken(getRhsIToken(1)),
                                                            (IReferenceType)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 47:  PackageName ::= identifier
            //
            case 47:
                break;
            //
            // Rule 48:  PackageName ::= PackageName . identifier
            //
            case 48: {
               //#line 271 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PackageName(getLeftIToken(), getRightIToken(),
                                    (IPackageName)getRhsSym(1),
                                    new AstToken(getRhsIToken(2)),
                                    (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 49:  ExpressionName ::= identifier
            //
            case 49:
                break;
            //
            // Rule 50:  ExpressionName ::= AmbiguousName . identifier
            //
            case 50: {
               //#line 280 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExpressionName(getLeftIToken(), getRightIToken(),
                                       (IAmbiguousName)getRhsSym(1),
                                       new AstToken(getRhsIToken(2)),
                                       (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 51:  MethodName ::= identifier
            //
            case 51:
                break;
            //
            // Rule 52:  MethodName ::= AmbiguousName . identifier
            //
            case 52: {
               //#line 283 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodName(getLeftIToken(), getRightIToken(),
                                   (IAmbiguousName)getRhsSym(1),
                                   new AstToken(getRhsIToken(2)),
                                   (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 53:  PackageOrTypeName ::= identifier
            //
            case 53:
                break;
            //
            // Rule 54:  PackageOrTypeName ::= PackageOrTypeName . identifier
            //
            case 54: {
               //#line 286 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PackageOrTypeName(getLeftIToken(), getRightIToken(),
                                          (IPackageOrTypeName)getRhsSym(1),
                                          new AstToken(getRhsIToken(2)),
                                          (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 55:  AmbiguousName ::= identifier
            //
            case 55:
                break;
            //
            // Rule 56:  AmbiguousName ::= AmbiguousName . identifier
            //
            case 56: {
               //#line 289 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AmbiguousName(getLeftIToken(), getRightIToken(),
                                      (IAmbiguousName)getRhsSym(1),
                                      new AstToken(getRhsIToken(2)),
                                      (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 57:  CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt
            //
            case 57: {
               //#line 293 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new CompilationUnit(getLeftIToken(), getRightIToken(),
                                        (PackageDeclaration)getRhsSym(1),
                                        (IImportDeclarationsopt)getRhsSym(2),
                                        (ITypeDeclarationsopt)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 58:  ImportDeclarations ::= ImportDeclaration
            //
            case 58:
                break;
            //
            // Rule 59:  ImportDeclarations ::= ImportDeclarations ImportDeclaration
            //
            case 59: {
               //#line 296 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ImportDeclarations(getLeftIToken(), getRightIToken(),
                                           (IImportDeclarations)getRhsSym(1),
                                           (IImportDeclaration)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 60:  TypeDeclarations ::= TypeDeclaration
            //
            case 60:
                break;
            //
            // Rule 61:  TypeDeclarations ::= TypeDeclarations TypeDeclaration
            //
            case 61: {
               //#line 299 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeDeclarations(getLeftIToken(), getRightIToken(),
                                         (ITypeDeclarations)getRhsSym(1),
                                         (ITypeDeclaration)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 62:  PackageDeclaration ::= Annotationsopt package PackageName ;
            //
            case 62: {
               //#line 301 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PackageDeclaration(getLeftIToken(), getRightIToken(),
                                           (IAnnotationsopt)getRhsSym(1),
                                           new AstToken(getRhsIToken(2)),
                                           (IPackageName)getRhsSym(3),
                                           new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 63:  ImportDeclaration ::= SingleTypeImportDeclaration
            //
            case 63:
                break;
            //
            // Rule 64:  ImportDeclaration ::= TypeImportOnDemandDeclaration
            //
            case 64:
                break;
            //
            // Rule 65:  ImportDeclaration ::= SingleStaticImportDeclaration
            //
            case 65:
                break;
            //
            // Rule 66:  ImportDeclaration ::= StaticImportOnDemandDeclaration
            //
            case 66:
                break;
            //
            // Rule 67:  SingleTypeImportDeclaration ::= import TypeName ;
            //
            case 67: {
               //#line 308 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SingleTypeImportDeclaration(getLeftIToken(), getRightIToken(),
                                                    new AstToken(getRhsIToken(1)),
                                                    (ITypeName)getRhsSym(2),
                                                    new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 68:  TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
            //
            case 68: {
               //#line 310 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeImportOnDemandDeclaration(getLeftIToken(), getRightIToken(),
                                                      new AstToken(getRhsIToken(1)),
                                                      (IPackageOrTypeName)getRhsSym(2),
                                                      new AstToken(getRhsIToken(3)),
                                                      new AstToken(getRhsIToken(4)),
                                                      new AstToken(getRhsIToken(5)))
                );
                break;
            }
            //
            // Rule 69:  SingleStaticImportDeclaration ::= import static TypeName . identifier ;
            //
            case 69: {
               //#line 312 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SingleStaticImportDeclaration(getLeftIToken(), getRightIToken(),
                                                      new AstToken(getRhsIToken(1)),
                                                      new AstToken(getRhsIToken(2)),
                                                      (ITypeName)getRhsSym(3),
                                                      new AstToken(getRhsIToken(4)),
                                                      (identifier)getRhsSym(5),
                                                      new AstToken(getRhsIToken(6)))
                );
                break;
            }
            //
            // Rule 70:  StaticImportOnDemandDeclaration ::= import static TypeName . * ;
            //
            case 70: {
               //#line 314 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new StaticImportOnDemandDeclaration(getLeftIToken(), getRightIToken(),
                                                        new AstToken(getRhsIToken(1)),
                                                        new AstToken(getRhsIToken(2)),
                                                        (ITypeName)getRhsSym(3),
                                                        new AstToken(getRhsIToken(4)),
                                                        new AstToken(getRhsIToken(5)),
                                                        new AstToken(getRhsIToken(6)))
                );
                break;
            }
            //
            // Rule 71:  TypeDeclaration ::= ClassDeclaration
            //
            case 71:
                break;
            //
            // Rule 72:  TypeDeclaration ::= InterfaceDeclaration
            //
            case 72:
                break;
            //
            // Rule 73:  TypeDeclaration ::= ;
            //
            case 73: {
               //#line 318 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeDeclaration(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 74:  ClassDeclaration ::= NormalClassDeclaration
            //
            case 74:
                break;
            //
            // Rule 75:  ClassDeclaration ::= EnumDeclaration
            //
            case 75:
                break;
            //
            // Rule 76:  NormalClassDeclaration ::= ClassModifiersopt class identifier TypeParametersopt Superopt Interfacesopt ClassBody
            //
            case 76: {
               //#line 325 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new NormalClassDeclaration(getLeftIToken(), getRightIToken(),
                                               (IClassModifiersopt)getRhsSym(1),
                                               new AstToken(getRhsIToken(2)),
                                               (identifier)getRhsSym(3),
                                               (TypeParameters)getRhsSym(4),
                                               (Super)getRhsSym(5),
                                               (Interfaces)getRhsSym(6),
                                               (ClassBody)getRhsSym(7))
                );
                break;
            }
            //
            // Rule 77:  ClassModifiers ::= ClassModifier
            //
            case 77:
                break;
            //
            // Rule 78:  ClassModifiers ::= ClassModifiers ClassModifier
            //
            case 78: {
               //#line 328 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifiers(getLeftIToken(), getRightIToken(),
                                       (IClassModifiers)getRhsSym(1),
                                       (IClassModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 79:  ClassModifier ::= Annotation
            //
            case 79:
                break;
            //
            // Rule 80:  ClassModifier ::= public
            //
            case 80: {
               //#line 331 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 81:  ClassModifier ::= protected
            //
            case 81: {
               //#line 332 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__protected(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 82:  ClassModifier ::= private
            //
            case 82: {
               //#line 333 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__private(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 83:  ClassModifier ::= abstract
            //
            case 83: {
               //#line 334 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__abstract(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 84:  ClassModifier ::= static
            //
            case 84: {
               //#line 335 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__static(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 85:  ClassModifier ::= final
            //
            case 85: {
               //#line 336 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__final(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 86:  ClassModifier ::= strictfp
            //
            case 86: {
               //#line 337 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassModifier__strictfp(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 87:  TypeParameters ::= < TypeParameterList >
            //
            case 87: {
               //#line 339 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeParameters(getLeftIToken(), getRightIToken(),
                                       new AstToken(getRhsIToken(1)),
                                       (ITypeParameterList)getRhsSym(2),
                                       new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 88:  TypeParameterList ::= TypeParameter
            //
            case 88:
                break;
            //
            // Rule 89:  TypeParameterList ::= TypeParameterList , TypeParameter
            //
            case 89: {
               //#line 342 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TypeParameterList(getLeftIToken(), getRightIToken(),
                                          (ITypeParameterList)getRhsSym(1),
                                          new AstToken(getRhsIToken(2)),
                                          (TypeParameter)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 90:  Super ::= extends ClassType
            //
            case 90: {
               //#line 344 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Super(getLeftIToken(), getRightIToken(),
                              new AstToken(getRhsIToken(1)),
                              (ClassType)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 91:  Interfaces ::= implements InterfaceTypeList
            //
            case 91: {
               //#line 351 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Interfaces(getLeftIToken(), getRightIToken(),
                                   new AstToken(getRhsIToken(1)),
                                   (IInterfaceTypeList)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 92:  InterfaceTypeList ::= InterfaceType
            //
            case 92:
                break;
            //
            // Rule 93:  InterfaceTypeList ::= InterfaceTypeList , InterfaceType
            //
            case 93: {
               //#line 354 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceTypeList(getLeftIToken(), getRightIToken(),
                                          (IInterfaceTypeList)getRhsSym(1),
                                          new AstToken(getRhsIToken(2)),
                                          (InterfaceType)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 94:  ClassBody ::= { ClassBodyDeclarationsopt }
            //
            case 94: {
               //#line 361 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassBody(getLeftIToken(), getRightIToken(),
                                  new AstToken(getRhsIToken(1)),
                                  (IClassBodyDeclarationsopt)getRhsSym(2),
                                  new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 95:  ClassBodyDeclarations ::= ClassBodyDeclaration
            //
            case 95:
                break;
            //
            // Rule 96:  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration
            //
            case 96: {
               //#line 364 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassBodyDeclarations(getLeftIToken(), getRightIToken(),
                                              (IClassBodyDeclarations)getRhsSym(1),
                                              (IClassBodyDeclaration)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 97:  ClassBodyDeclaration ::= ClassMemberDeclaration
            //
            case 97:
                break;
            //
            // Rule 98:  ClassBodyDeclaration ::= InstanceInitializer
            //
            case 98:
                break;
            //
            // Rule 99:  ClassBodyDeclaration ::= StaticInitializer
            //
            case 99:
                break;
            //
            // Rule 100:  ClassBodyDeclaration ::= ConstructorDeclaration
            //
            case 100:
                break;
            //
            // Rule 101:  ClassMemberDeclaration ::= FieldDeclaration
            //
            case 101:
                break;
            //
            // Rule 102:  ClassMemberDeclaration ::= MethodDeclaration
            //
            case 102:
                break;
            //
            // Rule 103:  ClassMemberDeclaration ::= ClassDeclaration
            //
            case 103:
                break;
            //
            // Rule 104:  ClassMemberDeclaration ::= InterfaceDeclaration
            //
            case 104:
                break;
            //
            // Rule 105:  ClassMemberDeclaration ::= ;
            //
            case 105: {
               //#line 375 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassMemberDeclaration(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 106:  FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ;
            //
            case 106: {
               //#line 377 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldDeclaration(getLeftIToken(), getRightIToken(),
                                         (IFieldModifiersopt)getRhsSym(1),
                                         (IType)getRhsSym(2),
                                         (IVariableDeclarators)getRhsSym(3),
                                         new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 107:  VariableDeclarators ::= VariableDeclarator
            //
            case 107:
                break;
            //
            // Rule 108:  VariableDeclarators ::= VariableDeclarators , VariableDeclarator
            //
            case 108: {
               //#line 380 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new VariableDeclarators(getLeftIToken(), getRightIToken(),
                                            (IVariableDeclarators)getRhsSym(1),
                                            new AstToken(getRhsIToken(2)),
                                            (IVariableDeclarator)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 109:  VariableDeclarator ::= VariableDeclaratorId
            //
            case 109:
                break;
            //
            // Rule 110:  VariableDeclarator ::= VariableDeclaratorId = VariableInitializer
            //
            case 110: {
               //#line 383 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new VariableDeclarator(getLeftIToken(), getRightIToken(),
                                           (IVariableDeclaratorId)getRhsSym(1),
                                           new AstToken(getRhsIToken(2)),
                                           (IVariableInitializer)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 111:  VariableDeclaratorId ::= identifier
            //
            case 111:
                break;
            //
            // Rule 112:  VariableDeclaratorId ::= VariableDeclaratorId [ ]
            //
            case 112: {
               //#line 386 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new VariableDeclaratorId(getLeftIToken(), getRightIToken(),
                                             (IVariableDeclaratorId)getRhsSym(1),
                                             new AstToken(getRhsIToken(2)),
                                             new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 113:  VariableInitializer ::= Expression
            //
            case 113:
                break;
            //
            // Rule 114:  VariableInitializer ::= ArrayInitializer
            //
            case 114:
                break;
            //
            // Rule 115:  FieldModifiers ::= FieldModifier
            //
            case 115:
                break;
            //
            // Rule 116:  FieldModifiers ::= FieldModifiers FieldModifier
            //
            case 116: {
               //#line 392 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifiers(getLeftIToken(), getRightIToken(),
                                       (IFieldModifiers)getRhsSym(1),
                                       (IFieldModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 117:  FieldModifier ::= Annotation
            //
            case 117:
                break;
            //
            // Rule 118:  FieldModifier ::= public
            //
            case 118: {
               //#line 395 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 119:  FieldModifier ::= protected
            //
            case 119: {
               //#line 396 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__protected(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 120:  FieldModifier ::= private
            //
            case 120: {
               //#line 397 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__private(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 121:  FieldModifier ::= static
            //
            case 121: {
               //#line 398 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__static(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 122:  FieldModifier ::= final
            //
            case 122: {
               //#line 399 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__final(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 123:  FieldModifier ::= transient
            //
            case 123: {
               //#line 400 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__transient(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 124:  FieldModifier ::= volatile
            //
            case 124: {
               //#line 401 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldModifier__volatile(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 125:  MethodDeclaration ::= MethodHeader MethodBody
            //
            case 125: {
               //#line 403 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodDeclaration(getLeftIToken(), getRightIToken(),
                                          (MethodHeader)getRhsSym(1),
                                          (IMethodBody)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 126:  MethodHeader ::= MethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt
            //
            case 126: {
               //#line 405 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodHeader(getLeftIToken(), getRightIToken(),
                                     (IMethodModifiersopt)getRhsSym(1),
                                     (TypeParameters)getRhsSym(2),
                                     (IResultType)getRhsSym(3),
                                     (IMethodDeclarator)getRhsSym(4),
                                     (Throws)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 127:  ResultType ::= Type
            //
            case 127:
                break;
            //
            // Rule 128:  ResultType ::= void
            //
            case 128: {
               //#line 408 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ResultType(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 129:  MethodDeclarator ::= identifier ( FormalParameterListopt )
            //
            case 129: {
               //#line 410 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodDeclarator__identifier_LPAREN_FormalParameterListopt_RPAREN(getLeftIToken(), getRightIToken(),
                                                                                          (identifier)getRhsSym(1),
                                                                                          new AstToken(getRhsIToken(2)),
                                                                                          (IFormalParameterListopt)getRhsSym(3),
                                                                                          new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 130:  MethodDeclarator ::= MethodDeclarator [ ]
            //
            case 130: {
               //#line 412 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodDeclarator__MethodDeclarator_LBRACKET_RBRACKET(getLeftIToken(), getRightIToken(),
                                                                             (IMethodDeclarator)getRhsSym(1),
                                                                             new AstToken(getRhsIToken(2)),
                                                                             new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 131:  FormalParameterList ::= LastFormalParameter
            //
            case 131:
                break;
            //
            // Rule 132:  FormalParameterList ::= FormalParameters , LastFormalParameter
            //
            case 132: {
               //#line 415 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FormalParameterList(getLeftIToken(), getRightIToken(),
                                            (IFormalParameters)getRhsSym(1),
                                            new AstToken(getRhsIToken(2)),
                                            (LastFormalParameter)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 133:  FormalParameters ::= FormalParameter
            //
            case 133:
                break;
            //
            // Rule 134:  FormalParameters ::= FormalParameters , FormalParameter
            //
            case 134: {
               //#line 418 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FormalParameters(getLeftIToken(), getRightIToken(),
                                         (IFormalParameters)getRhsSym(1),
                                         new AstToken(getRhsIToken(2)),
                                         (FormalParameter)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 135:  FormalParameter ::= VariableModifiersopt Type VariableDeclaratorId
            //
            case 135: {
               //#line 420 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FormalParameter(getLeftIToken(), getRightIToken(),
                                        (IVariableModifiersopt)getRhsSym(1),
                                        (IType)getRhsSym(2),
                                        (IVariableDeclaratorId)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 136:  VariableModifiers ::= VariableModifier
            //
            case 136:
                break;
            //
            // Rule 137:  VariableModifiers ::= VariableModifiers VariableModifier
            //
            case 137: {
               //#line 423 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new VariableModifiers(getLeftIToken(), getRightIToken(),
                                          (IVariableModifiers)getRhsSym(1),
                                          (IVariableModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 138:  VariableModifier ::= final
            //
            case 138: {
               //#line 425 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new VariableModifier(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 139:  VariableModifier ::= Annotations
            //
            case 139:
                break;
            //
            // Rule 140:  LastFormalParameter ::= VariableModifiersopt Type ...opt VariableDeclaratorId
            //
            case 140: {
               //#line 428 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LastFormalParameter(getLeftIToken(), getRightIToken(),
                                            (IVariableModifiersopt)getRhsSym(1),
                                            (IType)getRhsSym(2),
                                            (Ellipsisopt)getRhsSym(3),
                                            (IVariableDeclaratorId)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 141:  MethodModifiers ::= MethodModifier
            //
            case 141:
                break;
            //
            // Rule 142:  MethodModifiers ::= MethodModifiers MethodModifier
            //
            case 142: {
               //#line 437 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifiers(getLeftIToken(), getRightIToken(),
                                        (IMethodModifiers)getRhsSym(1),
                                        (IMethodModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 143:  MethodModifier ::= Annotations
            //
            case 143:
                break;
            //
            // Rule 144:  MethodModifier ::= public
            //
            case 144: {
               //#line 440 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 145:  MethodModifier ::= protected
            //
            case 145: {
               //#line 441 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__protected(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 146:  MethodModifier ::= private
            //
            case 146: {
               //#line 442 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__private(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 147:  MethodModifier ::= abstract
            //
            case 147: {
               //#line 443 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__abstract(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 148:  MethodModifier ::= static
            //
            case 148: {
               //#line 444 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__static(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 149:  MethodModifier ::= final
            //
            case 149: {
               //#line 445 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__final(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 150:  MethodModifier ::= synchronized
            //
            case 150: {
               //#line 446 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__synchronized(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 151:  MethodModifier ::= native
            //
            case 151: {
               //#line 447 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__native(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 152:  MethodModifier ::= strictfp
            //
            case 152: {
               //#line 448 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodModifier__strictfp(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 153:  Throws ::= throws ExceptionTypeList
            //
            case 153: {
               //#line 450 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Throws(getLeftIToken(), getRightIToken(),
                               new AstToken(getRhsIToken(1)),
                               (IExceptionTypeList)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 154:  ExceptionTypeList ::= ExceptionType
            //
            case 154:
                break;
            //
            // Rule 155:  ExceptionTypeList ::= ExceptionTypeList , ExceptionType
            //
            case 155: {
               //#line 453 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExceptionTypeList(getLeftIToken(), getRightIToken(),
                                          (IExceptionTypeList)getRhsSym(1),
                                          new AstToken(getRhsIToken(2)),
                                          (IExceptionType)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 156:  ExceptionType ::= ClassType
            //
            case 156:
                break;
            //
            // Rule 157:  ExceptionType ::= TypeVariable
            //
            case 157:
                break;
            //
            // Rule 158:  MethodBody ::= Block
            //
            case 158:
                break;
            //
            // Rule 159:  MethodBody ::= ;
            //
            case 159: {
               //#line 459 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodBody(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 160:  InstanceInitializer ::= Block
            //
            case 160:
                break;
            //
            // Rule 161:  StaticInitializer ::= static Block
            //
            case 161: {
               //#line 463 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new StaticInitializer(getLeftIToken(), getRightIToken(),
                                          new AstToken(getRhsIToken(1)),
                                          (Block)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 162:  ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator Throwsopt ConstructorBody
            //
            case 162: {
               //#line 465 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorDeclaration(getLeftIToken(), getRightIToken(),
                                               (IConstructorModifiersopt)getRhsSym(1),
                                               (ConstructorDeclarator)getRhsSym(2),
                                               (Throws)getRhsSym(3),
                                               (ConstructorBody)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 163:  ConstructorDeclarator ::= TypeParametersopt SimpleTypeName ( FormalParameterListopt )
            //
            case 163: {
               //#line 467 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorDeclarator(getLeftIToken(), getRightIToken(),
                                              (TypeParameters)getRhsSym(1),
                                              (identifier)getRhsSym(2),
                                              new AstToken(getRhsIToken(3)),
                                              (IFormalParameterListopt)getRhsSym(4),
                                              new AstToken(getRhsIToken(5)))
                );
                break;
            }
            //
            // Rule 164:  SimpleTypeName ::= identifier
            //
            case 164:
                break;
            //
            // Rule 165:  ConstructorModifiers ::= ConstructorModifier
            //
            case 165:
                break;
            //
            // Rule 166:  ConstructorModifiers ::= ConstructorModifiers ConstructorModifier
            //
            case 166: {
               //#line 472 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorModifiers(getLeftIToken(), getRightIToken(),
                                             (IConstructorModifiers)getRhsSym(1),
                                             (IConstructorModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 167:  ConstructorModifier ::= Annotations
            //
            case 167:
                break;
            //
            // Rule 168:  ConstructorModifier ::= public
            //
            case 168: {
               //#line 475 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 169:  ConstructorModifier ::= protected
            //
            case 169: {
               //#line 476 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorModifier__protected(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 170:  ConstructorModifier ::= private
            //
            case 170: {
               //#line 477 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorModifier__private(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 171:  ConstructorBody ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
            //
            case 171: {
               //#line 479 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstructorBody(getLeftIToken(), getRightIToken(),
                                        new AstToken(getRhsIToken(1)),
                                        (IExplicitConstructorInvocationopt)getRhsSym(2),
                                        (IBlockStatementsopt)getRhsSym(3),
                                        new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 172:  ExplicitConstructorInvocation ::= TypeArgumentsopt this ( ArgumentListopt ) ;
            //
            case 172: {
               //#line 481 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExplicitConstructorInvocation__TypeArgumentsopt_this_LPAREN_ArgumentListopt_RPAREN_SEMICOLON(getLeftIToken(), getRightIToken(),
                                                                                                                     (TypeArguments)getRhsSym(1),
                                                                                                                     new AstToken(getRhsIToken(2)),
                                                                                                                     new AstToken(getRhsIToken(3)),
                                                                                                                     (IArgumentListopt)getRhsSym(4),
                                                                                                                     new AstToken(getRhsIToken(5)),
                                                                                                                     new AstToken(getRhsIToken(6)))
                );
                break;
            }
            //
            // Rule 173:  ExplicitConstructorInvocation ::= TypeArgumentsopt super ( ArgumentListopt ) ;
            //
            case 173: {
               //#line 482 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExplicitConstructorInvocation__TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON(getLeftIToken(), getRightIToken(),
                                                                                                                      (TypeArguments)getRhsSym(1),
                                                                                                                      new AstToken(getRhsIToken(2)),
                                                                                                                      new AstToken(getRhsIToken(3)),
                                                                                                                      (IArgumentListopt)getRhsSym(4),
                                                                                                                      new AstToken(getRhsIToken(5)),
                                                                                                                      new AstToken(getRhsIToken(6)))
                );
                break;
            }
            //
            // Rule 174:  ExplicitConstructorInvocation ::= Primary . TypeArgumentsopt super ( ArgumentListopt ) ;
            //
            case 174: {
               //#line 483 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExplicitConstructorInvocation__Primary_DOT_TypeArgumentsopt_super_LPAREN_ArgumentListopt_RPAREN_SEMICOLON(getLeftIToken(), getRightIToken(),
                                                                                                                                  (IPrimary)getRhsSym(1),
                                                                                                                                  new AstToken(getRhsIToken(2)),
                                                                                                                                  (TypeArguments)getRhsSym(3),
                                                                                                                                  new AstToken(getRhsIToken(4)),
                                                                                                                                  new AstToken(getRhsIToken(5)),
                                                                                                                                  (IArgumentListopt)getRhsSym(6),
                                                                                                                                  new AstToken(getRhsIToken(7)),
                                                                                                                                  new AstToken(getRhsIToken(8)))
                );
                break;
            }
            //
            // Rule 175:  EnumDeclaration ::= ClassModifiersopt enum identifier Interfacesopt EnumBody
            //
            case 175: {
               //#line 485 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EnumDeclaration(getLeftIToken(), getRightIToken(),
                                        (IClassModifiersopt)getRhsSym(1),
                                        new AstToken(getRhsIToken(2)),
                                        (identifier)getRhsSym(3),
                                        (Interfaces)getRhsSym(4),
                                        (EnumBody)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 176:  EnumBody ::= { EnumConstantsopt ,opt EnumBodyDeclarationsopt }
            //
            case 176: {
               //#line 487 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EnumBody(getLeftIToken(), getRightIToken(),
                                 new AstToken(getRhsIToken(1)),
                                 (IEnumConstantsopt)getRhsSym(2),
                                 (Commaopt)getRhsSym(3),
                                 (EnumBodyDeclarations)getRhsSym(4),
                                 new AstToken(getRhsIToken(5)))
                );
                break;
            }
            //
            // Rule 177:  EnumConstants ::= EnumConstant
            //
            case 177:
                break;
            //
            // Rule 178:  EnumConstants ::= EnumConstants , EnumConstant
            //
            case 178: {
               //#line 490 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EnumConstants(getLeftIToken(), getRightIToken(),
                                      (IEnumConstants)getRhsSym(1),
                                      new AstToken(getRhsIToken(2)),
                                      (IEnumConstant)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 179:  EnumConstant ::= Annotationsopt identifier Argumentsopt ClassBodyopt
            //
            case 179: {
               //#line 492 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EnumConstant(getLeftIToken(), getRightIToken(),
                                     (IAnnotationsopt)getRhsSym(1),
                                     (identifier)getRhsSym(2),
                                     (Arguments)getRhsSym(3),
                                     (ClassBody)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 180:  Arguments ::= ( ArgumentListopt )
            //
            case 180: {
               //#line 494 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Arguments(getLeftIToken(), getRightIToken(),
                                  new AstToken(getRhsIToken(1)),
                                  (IArgumentListopt)getRhsSym(2),
                                  new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 181:  EnumBodyDeclarations ::= ; ClassBodyDeclarationsopt
            //
            case 181: {
               //#line 496 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EnumBodyDeclarations(getLeftIToken(), getRightIToken(),
                                             new AstToken(getRhsIToken(1)),
                                             (IClassBodyDeclarationsopt)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 182:  InterfaceDeclaration ::= NormalInterfaceDeclaration
            //
            case 182:
                break;
            //
            // Rule 183:  InterfaceDeclaration ::= AnnotationTypeDeclaration
            //
            case 183:
                break;
            //
            // Rule 184:  NormalInterfaceDeclaration ::= InterfaceModifiersopt interface identifier TypeParametersopt ExtendsInterfacesopt InterfaceBody
            //
            case 184: {
               //#line 503 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new NormalInterfaceDeclaration(getLeftIToken(), getRightIToken(),
                                                   (IInterfaceModifiersopt)getRhsSym(1),
                                                   new AstToken(getRhsIToken(2)),
                                                   (identifier)getRhsSym(3),
                                                   (TypeParameters)getRhsSym(4),
                                                   (IExtendsInterfacesopt)getRhsSym(5),
                                                   (InterfaceBody)getRhsSym(6))
                );
                break;
            }
            //
            // Rule 185:  InterfaceModifiers ::= InterfaceModifier
            //
            case 185:
                break;
            //
            // Rule 186:  InterfaceModifiers ::= InterfaceModifiers InterfaceModifier
            //
            case 186: {
               //#line 506 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifiers(getLeftIToken(), getRightIToken(),
                                           (IInterfaceModifiers)getRhsSym(1),
                                           (IInterfaceModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 187:  InterfaceModifier ::= Annotation
            //
            case 187:
                break;
            //
            // Rule 188:  InterfaceModifier ::= public
            //
            case 188: {
               //#line 509 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 189:  InterfaceModifier ::= protected
            //
            case 189: {
               //#line 510 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifier__protected(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 190:  InterfaceModifier ::= private
            //
            case 190: {
               //#line 511 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifier__private(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 191:  InterfaceModifier ::= abstract
            //
            case 191: {
               //#line 512 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifier__abstract(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 192:  InterfaceModifier ::= static
            //
            case 192: {
               //#line 513 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifier__static(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 193:  InterfaceModifier ::= strictfp
            //
            case 193: {
               //#line 514 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceModifier__strictfp(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 194:  ExtendsInterfaces ::= extends InterfaceType
            //
            case 194: {
               //#line 516 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExtendsInterfaces__extends_InterfaceType(getLeftIToken(), getRightIToken(),
                                                                 new AstToken(getRhsIToken(1)),
                                                                 (InterfaceType)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 195:  ExtendsInterfaces ::= ExtendsInterfaces , InterfaceType
            //
            case 195: {
               //#line 517 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExtendsInterfaces__ExtendsInterfaces_COMMA_InterfaceType(getLeftIToken(), getRightIToken(),
                                                                                 (IExtendsInterfaces)getRhsSym(1),
                                                                                 new AstToken(getRhsIToken(2)),
                                                                                 (InterfaceType)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 196:  InterfaceBody ::= { InterfaceMemberDeclarationsopt }
            //
            case 196: {
               //#line 524 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceBody(getLeftIToken(), getRightIToken(),
                                      new AstToken(getRhsIToken(1)),
                                      (IInterfaceMemberDeclarationsopt)getRhsSym(2),
                                      new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 197:  InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
            //
            case 197:
                break;
            //
            // Rule 198:  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration
            //
            case 198: {
               //#line 527 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceMemberDeclarations(getLeftIToken(), getRightIToken(),
                                                    (IInterfaceMemberDeclarations)getRhsSym(1),
                                                    (IInterfaceMemberDeclaration)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 199:  InterfaceMemberDeclaration ::= ConstantDeclaration
            //
            case 199:
                break;
            //
            // Rule 200:  InterfaceMemberDeclaration ::= AbstractMethodDeclaration
            //
            case 200:
                break;
            //
            // Rule 201:  InterfaceMemberDeclaration ::= ClassDeclaration
            //
            case 201:
                break;
            //
            // Rule 202:  InterfaceMemberDeclaration ::= InterfaceDeclaration
            //
            case 202:
                break;
            //
            // Rule 203:  InterfaceMemberDeclaration ::= ;
            //
            case 203: {
               //#line 533 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InterfaceMemberDeclaration(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 204:  ConstantDeclaration ::= ConstantModifiersopt Type VariableDeclarators
            //
            case 204: {
               //#line 535 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstantDeclaration(getLeftIToken(), getRightIToken(),
                                            (IConstantModifiersopt)getRhsSym(1),
                                            (IType)getRhsSym(2),
                                            (IVariableDeclarators)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 205:  ConstantModifiers ::= ConstantModifier
            //
            case 205:
                break;
            //
            // Rule 206:  ConstantModifiers ::= ConstantModifiers ConstantModifier
            //
            case 206: {
               //#line 538 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstantModifiers(getLeftIToken(), getRightIToken(),
                                          (IConstantModifiers)getRhsSym(1),
                                          (IConstantModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 207:  ConstantModifier ::= Annotation
            //
            case 207:
                break;
            //
            // Rule 208:  ConstantModifier ::= public
            //
            case 208: {
               //#line 541 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstantModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 209:  ConstantModifier ::= static
            //
            case 209: {
               //#line 542 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstantModifier__static(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 210:  ConstantModifier ::= final
            //
            case 210: {
               //#line 543 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConstantModifier__final(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 211:  AbstractMethodDeclaration ::= AbstractMethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt ;
            //
            case 211: {
               //#line 545 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AbstractMethodDeclaration(getLeftIToken(), getRightIToken(),
                                                  (IAbstractMethodModifiersopt)getRhsSym(1),
                                                  (TypeParameters)getRhsSym(2),
                                                  (IResultType)getRhsSym(3),
                                                  (IMethodDeclarator)getRhsSym(4),
                                                  (Throws)getRhsSym(5),
                                                  new AstToken(getRhsIToken(6)))
                );
                break;
            }
            //
            // Rule 212:  AbstractMethodModifiers ::= AbstractMethodModifier
            //
            case 212:
                break;
            //
            // Rule 213:  AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier
            //
            case 213: {
               //#line 548 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AbstractMethodModifiers(getLeftIToken(), getRightIToken(),
                                                (IAbstractMethodModifiers)getRhsSym(1),
                                                (IAbstractMethodModifier)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 214:  AbstractMethodModifier ::= Annotations
            //
            case 214:
                break;
            //
            // Rule 215:  AbstractMethodModifier ::= public
            //
            case 215: {
               //#line 551 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AbstractMethodModifier__public(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 216:  AbstractMethodModifier ::= abstract
            //
            case 216: {
               //#line 552 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AbstractMethodModifier__abstract(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 217:  AnnotationTypeDeclaration ::= InterfaceModifiersopt @ interface identifier AnnotationTypeBody
            //
            case 217: {
               //#line 554 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AnnotationTypeDeclaration(getLeftIToken(), getRightIToken(),
                                                  (IInterfaceModifiersopt)getRhsSym(1),
                                                  new AstToken(getRhsIToken(2)),
                                                  new AstToken(getRhsIToken(3)),
                                                  (identifier)getRhsSym(4),
                                                  (AnnotationTypeBody)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 218:  AnnotationTypeBody ::= { AnnotationTypeElementDeclarationsopt }
            //
            case 218: {
               //#line 556 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AnnotationTypeBody(getLeftIToken(), getRightIToken(),
                                           new AstToken(getRhsIToken(1)),
                                           (IAnnotationTypeElementDeclarationsopt)getRhsSym(2),
                                           new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 219:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration
            //
            case 219:
                break;
            //
            // Rule 220:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration
            //
            case 220: {
               //#line 559 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AnnotationTypeElementDeclarations(getLeftIToken(), getRightIToken(),
                                                          (IAnnotationTypeElementDeclarations)getRhsSym(1),
                                                          (IAnnotationTypeElementDeclaration)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 221:  AnnotationTypeElementDeclaration ::= AbstractMethodModifiersopt Type identifier ( ) DefaultValueopt ;
            //
            case 221: {
               //#line 561 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AnnotationTypeElementDeclaration__AbstractMethodModifiersopt_Type_identifier_LPAREN_RPAREN_DefaultValueopt_SEMICOLON(getLeftIToken(), getRightIToken(),
                                                                                                                                             (IAbstractMethodModifiersopt)getRhsSym(1),
                                                                                                                                             (IType)getRhsSym(2),
                                                                                                                                             (identifier)getRhsSym(3),
                                                                                                                                             new AstToken(getRhsIToken(4)),
                                                                                                                                             new AstToken(getRhsIToken(5)),
                                                                                                                                             (DefaultValue)getRhsSym(6),
                                                                                                                                             new AstToken(getRhsIToken(7)))
                );
                break;
            }
            //
            // Rule 222:  AnnotationTypeElementDeclaration ::= ConstantDeclaration
            //
            case 222:
                break;
            //
            // Rule 223:  AnnotationTypeElementDeclaration ::= ClassDeclaration
            //
            case 223:
                break;
            //
            // Rule 224:  AnnotationTypeElementDeclaration ::= InterfaceDeclaration
            //
            case 224:
                break;
            //
            // Rule 225:  AnnotationTypeElementDeclaration ::= EnumDeclaration
            //
            case 225:
                break;
            //
            // Rule 226:  AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration
            //
            case 226:
                break;
            //
            // Rule 227:  AnnotationTypeElementDeclaration ::= ;
            //
            case 227: {
               //#line 567 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AnnotationTypeElementDeclaration__SEMICOLON(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 228:  DefaultValue ::= default ElementValue
            //
            case 228: {
               //#line 569 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new DefaultValue(getLeftIToken(), getRightIToken(),
                                     new AstToken(getRhsIToken(1)),
                                     (IElementValue)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 229:  Annotations ::= Annotation
            //
            case 229:
                break;
            //
            // Rule 230:  Annotations ::= Annotations Annotation
            //
            case 230: {
               //#line 572 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Annotations(getLeftIToken(), getRightIToken(),
                                    (IAnnotations)getRhsSym(1),
                                    (IAnnotation)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 231:  Annotation ::= NormalAnnotation
            //
            case 231:
                break;
            //
            // Rule 232:  Annotation ::= MarkerAnnotation
            //
            case 232:
                break;
            //
            // Rule 233:  Annotation ::= SingleElementAnnotation
            //
            case 233:
                break;
            //
            // Rule 234:  NormalAnnotation ::= @ TypeName ( ElementValuePairsopt )
            //
            case 234: {
               //#line 578 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new NormalAnnotation(getLeftIToken(), getRightIToken(),
                                         new AstToken(getRhsIToken(1)),
                                         (ITypeName)getRhsSym(2),
                                         new AstToken(getRhsIToken(3)),
                                         (IElementValuePairsopt)getRhsSym(4),
                                         new AstToken(getRhsIToken(5)))
                );
                break;
            }
            //
            // Rule 235:  ElementValuePairs ::= ElementValuePair
            //
            case 235:
                break;
            //
            // Rule 236:  ElementValuePairs ::= ElementValuePairs , ElementValuePair
            //
            case 236: {
               //#line 581 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ElementValuePairs(getLeftIToken(), getRightIToken(),
                                          (IElementValuePairs)getRhsSym(1),
                                          new AstToken(getRhsIToken(2)),
                                          (ElementValuePair)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 237:  ElementValuePair ::= SimpleName = ElementValue
            //
            case 237: {
               //#line 583 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ElementValuePair(getLeftIToken(), getRightIToken(),
                                         (identifier)getRhsSym(1),
                                         new AstToken(getRhsIToken(2)),
                                         (IElementValue)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 238:  SimpleName ::= identifier
            //
            case 238:
                break;
            //
            // Rule 239:  ElementValue ::= ConditionalExpression
            //
            case 239:
                break;
            //
            // Rule 240:  ElementValue ::= Annotation
            //
            case 240:
                break;
            //
            // Rule 241:  ElementValue ::= ElementValueArrayInitializer
            //
            case 241:
                break;
            //
            // Rule 242:  ElementValueArrayInitializer ::= { ElementValuesopt ,opt }
            //
            case 242: {
               //#line 591 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ElementValueArrayInitializer(getLeftIToken(), getRightIToken(),
                                                     new AstToken(getRhsIToken(1)),
                                                     (IElementValuesopt)getRhsSym(2),
                                                     (Commaopt)getRhsSym(3),
                                                     new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 243:  ElementValues ::= ElementValue
            //
            case 243:
                break;
            //
            // Rule 244:  ElementValues ::= ElementValues , ElementValue
            //
            case 244: {
               //#line 594 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ElementValues(getLeftIToken(), getRightIToken(),
                                      (IElementValues)getRhsSym(1),
                                      new AstToken(getRhsIToken(2)),
                                      (IElementValue)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 245:  MarkerAnnotation ::= @ TypeName
            //
            case 245: {
               //#line 596 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MarkerAnnotation(getLeftIToken(), getRightIToken(),
                                         new AstToken(getRhsIToken(1)),
                                         (ITypeName)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 246:  SingleElementAnnotation ::= @ TypeName ( ElementValue )
            //
            case 246: {
               //#line 598 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SingleElementAnnotation(getLeftIToken(), getRightIToken(),
                                                new AstToken(getRhsIToken(1)),
                                                (ITypeName)getRhsSym(2),
                                                new AstToken(getRhsIToken(3)),
                                                (IElementValue)getRhsSym(4),
                                                new AstToken(getRhsIToken(5)))
                );
                break;
            }
            //
            // Rule 247:  ArrayInitializer ::= { VariableInitializersopt ,opt }
            //
            case 247: {
               //#line 602 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayInitializer(getLeftIToken(), getRightIToken(),
                                         new AstToken(getRhsIToken(1)),
                                         (IVariableInitializersopt)getRhsSym(2),
                                         (Commaopt)getRhsSym(3),
                                         new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 248:  VariableInitializers ::= VariableInitializer
            //
            case 248:
                break;
            //
            // Rule 249:  VariableInitializers ::= VariableInitializers , VariableInitializer
            //
            case 249: {
               //#line 605 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new VariableInitializers(getLeftIToken(), getRightIToken(),
                                             (IVariableInitializers)getRhsSym(1),
                                             new AstToken(getRhsIToken(2)),
                                             (IVariableInitializer)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 250:  Block ::= { BlockStatementsopt }
            //
            case 250: {
               //#line 621 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Block(getLeftIToken(), getRightIToken(),
                              new AstToken(getRhsIToken(1)),
                              (IBlockStatementsopt)getRhsSym(2),
                              new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 251:  BlockStatements ::= BlockStatement
            //
            case 251:
                break;
            //
            // Rule 252:  BlockStatements ::= BlockStatements BlockStatement
            //
            case 252: {
               //#line 624 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new BlockStatements(getLeftIToken(), getRightIToken(),
                                        (IBlockStatements)getRhsSym(1),
                                        (IBlockStatement)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 253:  BlockStatement ::= LocalVariableDeclarationStatement
            //
            case 253:
                break;
            //
            // Rule 254:  BlockStatement ::= ClassDeclaration
            //
            case 254:
                break;
            //
            // Rule 255:  BlockStatement ::= Statement
            //
            case 255:
                break;
            //
            // Rule 256:  LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
            //
            case 256: {
               //#line 630 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LocalVariableDeclarationStatement(getLeftIToken(), getRightIToken(),
                                                          (LocalVariableDeclaration)getRhsSym(1),
                                                          new AstToken(getRhsIToken(2)))
                );
                break;
            }
            //
            // Rule 257:  LocalVariableDeclaration ::= VariableModifiersopt Type VariableDeclarators
            //
            case 257: {
               //#line 632 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LocalVariableDeclaration(getLeftIToken(), getRightIToken(),
                                                 (IVariableModifiersopt)getRhsSym(1),
                                                 (IType)getRhsSym(2),
                                                 (IVariableDeclarators)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 258:  Statement ::= StatementWithoutTrailingSubstatement
            //
            case 258:
                break;
            //
            // Rule 259:  Statement ::= LabeledStatement
            //
            case 259:
                break;
            //
            // Rule 260:  Statement ::= IfThenStatement
            //
            case 260:
                break;
            //
            // Rule 261:  Statement ::= IfThenElseStatement
            //
            case 261:
                break;
            //
            // Rule 262:  Statement ::= WhileStatement
            //
            case 262:
                break;
            //
            // Rule 263:  Statement ::= ForStatement
            //
            case 263:
                break;
            //
            // Rule 264:  StatementWithoutTrailingSubstatement ::= Block
            //
            case 264:
                break;
            //
            // Rule 265:  StatementWithoutTrailingSubstatement ::= EmptyStatement
            //
            case 265:
                break;
            //
            // Rule 266:  StatementWithoutTrailingSubstatement ::= ExpressionStatement
            //
            case 266:
                break;
            //
            // Rule 267:  StatementWithoutTrailingSubstatement ::= AssertStatement
            //
            case 267:
                break;
            //
            // Rule 268:  StatementWithoutTrailingSubstatement ::= SwitchStatement
            //
            case 268:
                break;
            //
            // Rule 269:  StatementWithoutTrailingSubstatement ::= DoStatement
            //
            case 269:
                break;
            //
            // Rule 270:  StatementWithoutTrailingSubstatement ::= BreakStatement
            //
            case 270:
                break;
            //
            // Rule 271:  StatementWithoutTrailingSubstatement ::= ContinueStatement
            //
            case 271:
                break;
            //
            // Rule 272:  StatementWithoutTrailingSubstatement ::= ReturnStatement
            //
            case 272:
                break;
            //
            // Rule 273:  StatementWithoutTrailingSubstatement ::= SynchronizedStatement
            //
            case 273:
                break;
            //
            // Rule 274:  StatementWithoutTrailingSubstatement ::= ThrowStatement
            //
            case 274:
                break;
            //
            // Rule 275:  StatementWithoutTrailingSubstatement ::= TryStatement
            //
            case 275:
                break;
            //
            // Rule 276:  StatementNoShortIf ::= StatementWithoutTrailingSubstatement
            //
            case 276:
                break;
            //
            // Rule 277:  StatementNoShortIf ::= LabeledStatementNoShortIf
            //
            case 277:
                break;
            //
            // Rule 278:  StatementNoShortIf ::= IfThenElseStatementNoShortIf
            //
            case 278:
                break;
            //
            // Rule 279:  StatementNoShortIf ::= WhileStatementNoShortIf
            //
            case 279:
                break;
            //
            // Rule 280:  StatementNoShortIf ::= ForStatementNoShortIf
            //
            case 280:
                break;
            //
            // Rule 281:  IfThenStatement ::= if ( Expression ) Statement
            //
            case 281: {
               //#line 675 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IfThenStatement(getLeftIToken(), getRightIToken(),
                                        new AstToken(getRhsIToken(1)),
                                        new AstToken(getRhsIToken(2)),
                                        (IExpression)getRhsSym(3),
                                        new AstToken(getRhsIToken(4)),
                                        (IStatement)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 282:  IfThenElseStatement ::= if ( Expression ) StatementNoShortIf else Statement
            //
            case 282: {
               //#line 677 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IfThenElseStatement(getLeftIToken(), getRightIToken(),
                                            new AstToken(getRhsIToken(1)),
                                            new AstToken(getRhsIToken(2)),
                                            (IExpression)getRhsSym(3),
                                            new AstToken(getRhsIToken(4)),
                                            (IStatementNoShortIf)getRhsSym(5),
                                            new AstToken(getRhsIToken(6)),
                                            (IStatement)getRhsSym(7))
                );
                break;
            }
            //
            // Rule 283:  IfThenElseStatementNoShortIf ::= if ( Expression ) StatementNoShortIf else StatementNoShortIf
            //
            case 283: {
               //#line 679 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new IfThenElseStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                                     new AstToken(getRhsIToken(1)),
                                                     new AstToken(getRhsIToken(2)),
                                                     (IExpression)getRhsSym(3),
                                                     new AstToken(getRhsIToken(4)),
                                                     (IStatementNoShortIf)getRhsSym(5),
                                                     new AstToken(getRhsIToken(6)),
                                                     (IStatementNoShortIf)getRhsSym(7))
                );
                break;
            }
            //
            // Rule 284:  EmptyStatement ::= ;
            //
            case 284: {
               //#line 681 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EmptyStatement(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 285:  LabeledStatement ::= identifier : Statement
            //
            case 285: {
               //#line 683 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LabeledStatement(getLeftIToken(), getRightIToken(),
                                         (identifier)getRhsSym(1),
                                         new AstToken(getRhsIToken(2)),
                                         (IStatement)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 286:  LabeledStatementNoShortIf ::= identifier : StatementNoShortIf
            //
            case 286: {
               //#line 685 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new LabeledStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                                  (identifier)getRhsSym(1),
                                                  new AstToken(getRhsIToken(2)),
                                                  (IStatementNoShortIf)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 287:  ExpressionStatement ::= StatementExpression ;
            //
            case 287: {
               //#line 687 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExpressionStatement(getLeftIToken(), getRightIToken(),
                                            (IStatementExpression)getRhsSym(1),
                                            new AstToken(getRhsIToken(2)))
                );
                break;
            }
            //
            // Rule 288:  StatementExpression ::= Assignment
            //
            case 288:
                break;
            //
            // Rule 289:  StatementExpression ::= PreIncrementExpression
            //
            case 289:
                break;
            //
            // Rule 290:  StatementExpression ::= PreDecrementExpression
            //
            case 290:
                break;
            //
            // Rule 291:  StatementExpression ::= PostIncrementExpression
            //
            case 291:
                break;
            //
            // Rule 292:  StatementExpression ::= PostDecrementExpression
            //
            case 292:
                break;
            //
            // Rule 293:  StatementExpression ::= MethodInvocation
            //
            case 293:
                break;
            //
            // Rule 294:  StatementExpression ::= ClassInstanceCreationExpression
            //
            case 294:
                break;
            //
            // Rule 295:  AssertStatement ::= assert Expression ;
            //
            case 295: {
               //#line 706 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssertStatement__assert_Expression_SEMICOLON(getLeftIToken(), getRightIToken(),
                                                                     new AstToken(getRhsIToken(1)),
                                                                     (IExpression)getRhsSym(2),
                                                                     new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 296:  AssertStatement ::= assert Expression : Expression ;
            //
            case 296: {
               //#line 707 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssertStatement__assert_Expression_COLON_Expression_SEMICOLON(getLeftIToken(), getRightIToken(),
                                                                                      new AstToken(getRhsIToken(1)),
                                                                                      (IExpression)getRhsSym(2),
                                                                                      new AstToken(getRhsIToken(3)),
                                                                                      (IExpression)getRhsSym(4),
                                                                                      new AstToken(getRhsIToken(5)))
                );
                break;
            }
            //
            // Rule 297:  SwitchStatement ::= switch ( Expression ) SwitchBlock
            //
            case 297: {
               //#line 709 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchStatement(getLeftIToken(), getRightIToken(),
                                        new AstToken(getRhsIToken(1)),
                                        new AstToken(getRhsIToken(2)),
                                        (IExpression)getRhsSym(3),
                                        new AstToken(getRhsIToken(4)),
                                        (SwitchBlock)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 298:  SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
            //
            case 298: {
               //#line 711 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchBlock(getLeftIToken(), getRightIToken(),
                                    new AstToken(getRhsIToken(1)),
                                    (ISwitchBlockStatementGroupsopt)getRhsSym(2),
                                    (ISwitchLabelsopt)getRhsSym(3),
                                    new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 299:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
            //
            case 299:
                break;
            //
            // Rule 300:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup
            //
            case 300: {
               //#line 714 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchBlockStatementGroups(getLeftIToken(), getRightIToken(),
                                                   (ISwitchBlockStatementGroups)getRhsSym(1),
                                                   (SwitchBlockStatementGroup)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 301:  SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
            //
            case 301: {
               //#line 716 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchBlockStatementGroup(getLeftIToken(), getRightIToken(),
                                                  (ISwitchLabels)getRhsSym(1),
                                                  (IBlockStatements)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 302:  SwitchLabels ::= SwitchLabel
            //
            case 302:
                break;
            //
            // Rule 303:  SwitchLabels ::= SwitchLabels SwitchLabel
            //
            case 303: {
               //#line 719 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchLabels(getLeftIToken(), getRightIToken(),
                                     (ISwitchLabels)getRhsSym(1),
                                     (ISwitchLabel)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 304:  SwitchLabel ::= case ConstantExpression :
            //
            case 304: {
               //#line 721 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchLabel__case_ConstantExpression_COLON(getLeftIToken(), getRightIToken(),
                                                                   new AstToken(getRhsIToken(1)),
                                                                   (IConstantExpression)getRhsSym(2),
                                                                   new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 305:  SwitchLabel ::= case EnumConstant :
            //
            case 305: {
               //#line 722 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchLabel__case_EnumConstant_COLON(getLeftIToken(), getRightIToken(),
                                                             new AstToken(getRhsIToken(1)),
                                                             (IEnumConstant)getRhsSym(2),
                                                             new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 306:  SwitchLabel ::= default :
            //
            case 306: {
               //#line 723 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SwitchLabel__default_COLON(getLeftIToken(), getRightIToken(),
                                                   new AstToken(getRhsIToken(1)),
                                                   new AstToken(getRhsIToken(2)))
                );
                break;
            }
            //
            // Rule 307:  EnumConstant ::= identifier
            //
            case 307:
                break;
            //
            // Rule 308:  WhileStatement ::= while ( Expression ) Statement
            //
            case 308: {
               //#line 727 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new WhileStatement(getLeftIToken(), getRightIToken(),
                                       new AstToken(getRhsIToken(1)),
                                       new AstToken(getRhsIToken(2)),
                                       (IExpression)getRhsSym(3),
                                       new AstToken(getRhsIToken(4)),
                                       (IStatement)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 309:  WhileStatementNoShortIf ::= while ( Expression ) StatementNoShortIf
            //
            case 309: {
               //#line 729 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new WhileStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                                new AstToken(getRhsIToken(1)),
                                                new AstToken(getRhsIToken(2)),
                                                (IExpression)getRhsSym(3),
                                                new AstToken(getRhsIToken(4)),
                                                (IStatementNoShortIf)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 310:  DoStatement ::= do Statement while ( Expression ) ;
            //
            case 310: {
               //#line 731 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new DoStatement(getLeftIToken(), getRightIToken(),
                                    new AstToken(getRhsIToken(1)),
                                    (IStatement)getRhsSym(2),
                                    new AstToken(getRhsIToken(3)),
                                    new AstToken(getRhsIToken(4)),
                                    (IExpression)getRhsSym(5),
                                    new AstToken(getRhsIToken(6)),
                                    new AstToken(getRhsIToken(7)))
                );
                break;
            }
            //
            // Rule 311:  ForStatement ::= BasicForStatement
            //
            case 311:
                break;
            //
            // Rule 312:  ForStatement ::= EnhancedForStatement
            //
            case 312:
                break;
            //
            // Rule 313:  BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
            //
            case 313: {
               //#line 736 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new BasicForStatement(getLeftIToken(), getRightIToken(),
                                          new AstToken(getRhsIToken(1)),
                                          new AstToken(getRhsIToken(2)),
                                          (IForInitopt)getRhsSym(3),
                                          new AstToken(getRhsIToken(4)),
                                          (IExpressionopt)getRhsSym(5),
                                          new AstToken(getRhsIToken(6)),
                                          (IForUpdateopt)getRhsSym(7),
                                          new AstToken(getRhsIToken(8)),
                                          (IStatement)getRhsSym(9))
                );
                break;
            }
            //
            // Rule 314:  ForStatementNoShortIf ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf
            //
            case 314: {
               //#line 738 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ForStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                              new AstToken(getRhsIToken(1)),
                                              new AstToken(getRhsIToken(2)),
                                              (IForInitopt)getRhsSym(3),
                                              new AstToken(getRhsIToken(4)),
                                              (IExpressionopt)getRhsSym(5),
                                              new AstToken(getRhsIToken(6)),
                                              (IForUpdateopt)getRhsSym(7),
                                              new AstToken(getRhsIToken(8)),
                                              (IStatementNoShortIf)getRhsSym(9))
                );
                break;
            }
            //
            // Rule 315:  ForInit ::= StatementExpressionList
            //
            case 315:
                break;
            //
            // Rule 316:  ForInit ::= LocalVariableDeclaration
            //
            case 316:
                break;
            //
            // Rule 317:  ForUpdate ::= StatementExpressionList
            //
            case 317:
                break;
            //
            // Rule 318:  StatementExpressionList ::= StatementExpression
            //
            case 318:
                break;
            //
            // Rule 319:  StatementExpressionList ::= StatementExpressionList , StatementExpression
            //
            case 319: {
               //#line 746 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new StatementExpressionList(getLeftIToken(), getRightIToken(),
                                                (IStatementExpressionList)getRhsSym(1),
                                                new AstToken(getRhsIToken(2)),
                                                (IStatementExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 320:  EnhancedForStatement ::= for ( FormalParameter : Expression ) Statement
            //
            case 320: {
               //#line 748 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EnhancedForStatement(getLeftIToken(), getRightIToken(),
                                             new AstToken(getRhsIToken(1)),
                                             new AstToken(getRhsIToken(2)),
                                             (FormalParameter)getRhsSym(3),
                                             new AstToken(getRhsIToken(4)),
                                             (IExpression)getRhsSym(5),
                                             new AstToken(getRhsIToken(6)),
                                             (IStatement)getRhsSym(7))
                );
                break;
            }
            //
            // Rule 321:  BreakStatement ::= break identifieropt ;
            //
            case 321: {
               //#line 750 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new BreakStatement(getLeftIToken(), getRightIToken(),
                                       new AstToken(getRhsIToken(1)),
                                       (identifier)getRhsSym(2),
                                       new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 322:  ContinueStatement ::= continue identifieropt ;
            //
            case 322: {
               //#line 752 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ContinueStatement(getLeftIToken(), getRightIToken(),
                                          new AstToken(getRhsIToken(1)),
                                          (identifier)getRhsSym(2),
                                          new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 323:  ReturnStatement ::= return Expressionopt ;
            //
            case 323: {
               //#line 754 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ReturnStatement(getLeftIToken(), getRightIToken(),
                                        new AstToken(getRhsIToken(1)),
                                        (IExpressionopt)getRhsSym(2),
                                        new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 324:  ThrowStatement ::= throw Expression ;
            //
            case 324: {
               //#line 756 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ThrowStatement(getLeftIToken(), getRightIToken(),
                                       new AstToken(getRhsIToken(1)),
                                       (IExpression)getRhsSym(2),
                                       new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 325:  SynchronizedStatement ::= synchronized ( Expression ) Block
            //
            case 325: {
               //#line 758 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new SynchronizedStatement(getLeftIToken(), getRightIToken(),
                                              new AstToken(getRhsIToken(1)),
                                              new AstToken(getRhsIToken(2)),
                                              (IExpression)getRhsSym(3),
                                              new AstToken(getRhsIToken(4)),
                                              (Block)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 326:  TryStatement ::= try Block Catches
            //
            case 326: {
               //#line 760 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TryStatement__try_Block_Catches(getLeftIToken(), getRightIToken(),
                                                        new AstToken(getRhsIToken(1)),
                                                        (Block)getRhsSym(2),
                                                        (ICatches)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 327:  TryStatement ::= try Block Catchesopt Finally
            //
            case 327: {
               //#line 761 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new TryStatement__try_Block_Catchesopt_Finally(getLeftIToken(), getRightIToken(),
                                                                   new AstToken(getRhsIToken(1)),
                                                                   (Block)getRhsSym(2),
                                                                   (ICatchesopt)getRhsSym(3),
                                                                   (Finally)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 328:  Catches ::= CatchClause
            //
            case 328:
                break;
            //
            // Rule 329:  Catches ::= Catches CatchClause
            //
            case 329: {
               //#line 764 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Catches(getLeftIToken(), getRightIToken(),
                                (ICatches)getRhsSym(1),
                                (CatchClause)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 330:  CatchClause ::= catch ( FormalParameter ) Block
            //
            case 330: {
               //#line 766 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new CatchClause(getLeftIToken(), getRightIToken(),
                                    new AstToken(getRhsIToken(1)),
                                    new AstToken(getRhsIToken(2)),
                                    (FormalParameter)getRhsSym(3),
                                    new AstToken(getRhsIToken(4)),
                                    (Block)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 331:  Finally ::= finally Block
            //
            case 331: {
               //#line 768 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Finally(getLeftIToken(), getRightIToken(),
                                new AstToken(getRhsIToken(1)),
                                (Block)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 332:  Primary ::= PrimaryNoNewArray
            //
            case 332:
                break;
            //
            // Rule 333:  Primary ::= ArrayCreationExpression
            //
            case 333:
                break;
            //
            // Rule 334:  PrimaryNoNewArray ::= Literal
            //
            case 334:
                break;
            //
            // Rule 335:  PrimaryNoNewArray ::= Type . class
            //
            case 335: {
               //#line 784 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PrimaryNoNewArray__Type_DOT_class(getLeftIToken(), getRightIToken(),
                                                          (IType)getRhsSym(1),
                                                          new AstToken(getRhsIToken(2)),
                                                          new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 336:  PrimaryNoNewArray ::= void . class
            //
            case 336: {
               //#line 785 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PrimaryNoNewArray__void_DOT_class(getLeftIToken(), getRightIToken(),
                                                          new AstToken(getRhsIToken(1)),
                                                          new AstToken(getRhsIToken(2)),
                                                          new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 337:  PrimaryNoNewArray ::= this
            //
            case 337: {
               //#line 786 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PrimaryNoNewArray__this(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 338:  PrimaryNoNewArray ::= ClassName . this
            //
            case 338: {
               //#line 787 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PrimaryNoNewArray__ClassName_DOT_this(getLeftIToken(), getRightIToken(),
                                                              (IClassName)getRhsSym(1),
                                                              new AstToken(getRhsIToken(2)),
                                                              new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 339:  PrimaryNoNewArray ::= ( Expression )
            //
            case 339: {
               //#line 788 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PrimaryNoNewArray__LPAREN_Expression_RPAREN(getLeftIToken(), getRightIToken(),
                                                                    new AstToken(getRhsIToken(1)),
                                                                    (IExpression)getRhsSym(2),
                                                                    new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 340:  PrimaryNoNewArray ::= ClassInstanceCreationExpression
            //
            case 340:
                break;
            //
            // Rule 341:  PrimaryNoNewArray ::= FieldAccess
            //
            case 341:
                break;
            //
            // Rule 342:  PrimaryNoNewArray ::= MethodInvocation
            //
            case 342:
                break;
            //
            // Rule 343:  PrimaryNoNewArray ::= ArrayAccess
            //
            case 343:
                break;
            //
            // Rule 344:  Literal ::= IntegerLiteral
            //
            case 344: {
               //#line 794 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__IntegerLiteral(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 345:  Literal ::= LongLiteral
            //
            case 345: {
               //#line 795 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__LongLiteral(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 346:  Literal ::= FloatingPointLiteral
            //
            case 346: {
               //#line 796 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__FloatingPointLiteral(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 347:  Literal ::= DoubleLiteral
            //
            case 347: {
               //#line 797 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__DoubleLiteral(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 348:  Literal ::= BooleanLiteral
            //
            case 348:
                break;
            //
            // Rule 349:  Literal ::= CharacterLiteral
            //
            case 349: {
               //#line 799 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__CharacterLiteral(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 350:  Literal ::= StringLiteral
            //
            case 350: {
               //#line 800 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__StringLiteral(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 351:  Literal ::= null
            //
            case 351: {
               //#line 801 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Literal__null(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 352:  BooleanLiteral ::= true
            //
            case 352: {
               //#line 803 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new BooleanLiteral__true(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 353:  BooleanLiteral ::= false
            //
            case 353: {
               //#line 804 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new BooleanLiteral__false(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 354:  ClassInstanceCreationExpression ::= new TypeArgumentsopt ClassOrInterfaceType TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
            //
            case 354: {
               //#line 811 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassInstanceCreationExpression__new_TypeArgumentsopt_ClassOrInterfaceType_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt(getLeftIToken(), getRightIToken(),
                                                                                                                                                               new AstToken(getRhsIToken(1)),
                                                                                                                                                               (TypeArguments)getRhsSym(2),
                                                                                                                                                               (ClassType)getRhsSym(3),
                                                                                                                                                               (TypeArguments)getRhsSym(4),
                                                                                                                                                               new AstToken(getRhsIToken(5)),
                                                                                                                                                               (IArgumentListopt)getRhsSym(6),
                                                                                                                                                               new AstToken(getRhsIToken(7)),
                                                                                                                                                               (ClassBody)getRhsSym(8))
                );
                break;
            }
            //
            // Rule 355:  ClassInstanceCreationExpression ::= Primary . new TypeArgumentsopt identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
            //
            case 355: {
               //#line 812 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ClassInstanceCreationExpression__Primary_DOT_new_TypeArgumentsopt_identifier_TypeArgumentsopt_LPAREN_ArgumentListopt_RPAREN_ClassBodyopt(getLeftIToken(), getRightIToken(),
                                                                                                                                                                 (IPrimary)getRhsSym(1),
                                                                                                                                                                 new AstToken(getRhsIToken(2)),
                                                                                                                                                                 new AstToken(getRhsIToken(3)),
                                                                                                                                                                 (TypeArguments)getRhsSym(4),
                                                                                                                                                                 (identifier)getRhsSym(5),
                                                                                                                                                                 (TypeArguments)getRhsSym(6),
                                                                                                                                                                 new AstToken(getRhsIToken(7)),
                                                                                                                                                                 (IArgumentListopt)getRhsSym(8),
                                                                                                                                                                 new AstToken(getRhsIToken(9)),
                                                                                                                                                                 (ClassBody)getRhsSym(10))
                );
                break;
            }
            //
            // Rule 356:  ArgumentList ::= Expression
            //
            case 356:
                break;
            //
            // Rule 357:  ArgumentList ::= ArgumentList , Expression
            //
            case 357: {
               //#line 816 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArgumentList(getLeftIToken(), getRightIToken(),
                                     (IArgumentList)getRhsSym(1),
                                     new AstToken(getRhsIToken(2)),
                                     (IExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 358:  ArrayCreationExpression ::= new PrimitiveType DimExprs Dimsopt
            //
            case 358: {
               //#line 826 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayCreationExpression__new_PrimitiveType_DimExprs_Dimsopt(getLeftIToken(), getRightIToken(),
                                                                                    new AstToken(getRhsIToken(1)),
                                                                                    (IPrimitiveType)getRhsSym(2),
                                                                                    (IDimExprs)getRhsSym(3),
                                                                                    (IDimsopt)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 359:  ArrayCreationExpression ::= new ClassOrInterfaceType DimExprs Dimsopt
            //
            case 359: {
               //#line 827 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayCreationExpression__new_ClassOrInterfaceType_DimExprs_Dimsopt(getLeftIToken(), getRightIToken(),
                                                                                           new AstToken(getRhsIToken(1)),
                                                                                           (ClassType)getRhsSym(2),
                                                                                           (IDimExprs)getRhsSym(3),
                                                                                           (IDimsopt)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 360:  ArrayCreationExpression ::= new PrimitiveType Dims ArrayInitializer
            //
            case 360: {
               //#line 828 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayCreationExpression__new_PrimitiveType_Dims_ArrayInitializer(getLeftIToken(), getRightIToken(),
                                                                                         new AstToken(getRhsIToken(1)),
                                                                                         (IPrimitiveType)getRhsSym(2),
                                                                                         (IDims)getRhsSym(3),
                                                                                         (ArrayInitializer)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 361:  ArrayCreationExpression ::= new ClassOrInterfaceType Dims ArrayInitializer
            //
            case 361: {
               //#line 829 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayCreationExpression__new_ClassOrInterfaceType_Dims_ArrayInitializer(getLeftIToken(), getRightIToken(),
                                                                                                new AstToken(getRhsIToken(1)),
                                                                                                (ClassType)getRhsSym(2),
                                                                                                (IDims)getRhsSym(3),
                                                                                                (ArrayInitializer)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 362:  DimExprs ::= DimExpr
            //
            case 362:
                break;
            //
            // Rule 363:  DimExprs ::= DimExprs DimExpr
            //
            case 363: {
               //#line 832 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new DimExprs(getLeftIToken(), getRightIToken(),
                                 (IDimExprs)getRhsSym(1),
                                 (DimExpr)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 364:  DimExpr ::= [ Expression ]
            //
            case 364: {
               //#line 834 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new DimExpr(getLeftIToken(), getRightIToken(),
                                new AstToken(getRhsIToken(1)),
                                (IExpression)getRhsSym(2),
                                new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 365:  Dims ::= [ ]
            //
            case 365: {
               //#line 836 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Dims__LBRACKET_RBRACKET(getLeftIToken(), getRightIToken(),
                                                new AstToken(getRhsIToken(1)),
                                                new AstToken(getRhsIToken(2)))
                );
                break;
            }
            //
            // Rule 366:  Dims ::= Dims [ ]
            //
            case 366: {
               //#line 837 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Dims__Dims_LBRACKET_RBRACKET(getLeftIToken(), getRightIToken(),
                                                     (IDims)getRhsSym(1),
                                                     new AstToken(getRhsIToken(2)),
                                                     new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 367:  FieldAccess ::= Primary . identifier
            //
            case 367: {
               //#line 839 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldAccess__Primary_DOT_identifier(getLeftIToken(), getRightIToken(),
                                                            (IPrimary)getRhsSym(1),
                                                            new AstToken(getRhsIToken(2)),
                                                            (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 368:  FieldAccess ::= super . identifier
            //
            case 368: {
               //#line 840 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldAccess__super_DOT_identifier(getLeftIToken(), getRightIToken(),
                                                          new AstToken(getRhsIToken(1)),
                                                          new AstToken(getRhsIToken(2)),
                                                          (identifier)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 369:  FieldAccess ::= ClassName . super . identifier
            //
            case 369: {
               //#line 841 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new FieldAccess__ClassName_DOT_super_DOT_identifier(getLeftIToken(), getRightIToken(),
                                                                        (IClassName)getRhsSym(1),
                                                                        new AstToken(getRhsIToken(2)),
                                                                        new AstToken(getRhsIToken(3)),
                                                                        new AstToken(getRhsIToken(4)),
                                                                        (identifier)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 370:  MethodInvocation ::= MethodName ( ArgumentListopt )
            //
            case 370: {
               //#line 843 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodInvocation__MethodName_LPAREN_ArgumentListopt_RPAREN(getLeftIToken(), getRightIToken(),
                                                                                   (IMethodName)getRhsSym(1),
                                                                                   new AstToken(getRhsIToken(2)),
                                                                                   (IArgumentListopt)getRhsSym(3),
                                                                                   new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 371:  MethodInvocation ::= Primary . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 371: {
               //#line 844 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodInvocation__Primary_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN(getLeftIToken(), getRightIToken(),
                                                                                                                (IPrimary)getRhsSym(1),
                                                                                                                new AstToken(getRhsIToken(2)),
                                                                                                                (TypeArguments)getRhsSym(3),
                                                                                                                (identifier)getRhsSym(4),
                                                                                                                new AstToken(getRhsIToken(5)),
                                                                                                                (IArgumentListopt)getRhsSym(6),
                                                                                                                new AstToken(getRhsIToken(7)))
                );
                break;
            }
            //
            // Rule 372:  MethodInvocation ::= super . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 372: {
               //#line 845 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodInvocation__super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN(getLeftIToken(), getRightIToken(),
                                                                                                              new AstToken(getRhsIToken(1)),
                                                                                                              new AstToken(getRhsIToken(2)),
                                                                                                              (TypeArguments)getRhsSym(3),
                                                                                                              (identifier)getRhsSym(4),
                                                                                                              new AstToken(getRhsIToken(5)),
                                                                                                              (IArgumentListopt)getRhsSym(6),
                                                                                                              new AstToken(getRhsIToken(7)))
                );
                break;
            }
            //
            // Rule 373:  MethodInvocation ::= ClassName . super . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 373: {
               //#line 846 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodInvocation__ClassName_DOT_super_DOT_TypeArgumentsopt_identifier_LPAREN_ArgumentListopt_RPAREN(getLeftIToken(), getRightIToken(),
                                                                                                                            (IClassName)getRhsSym(1),
                                                                                                                            new AstToken(getRhsIToken(2)),
                                                                                                                            new AstToken(getRhsIToken(3)),
                                                                                                                            new AstToken(getRhsIToken(4)),
                                                                                                                            (TypeArguments)getRhsSym(5),
                                                                                                                            (identifier)getRhsSym(6),
                                                                                                                            new AstToken(getRhsIToken(7)),
                                                                                                                            (IArgumentListopt)getRhsSym(8),
                                                                                                                            new AstToken(getRhsIToken(9)))
                );
                break;
            }
            //
            // Rule 374:  MethodInvocation ::= TypeName . TypeArguments identifier ( ArgumentListopt )
            //
            case 374: {
               //#line 847 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MethodInvocation__TypeName_DOT_TypeArguments_identifier_LPAREN_ArgumentListopt_RPAREN(getLeftIToken(), getRightIToken(),
                                                                                                              (ITypeName)getRhsSym(1),
                                                                                                              new AstToken(getRhsIToken(2)),
                                                                                                              (TypeArguments)getRhsSym(3),
                                                                                                              (identifier)getRhsSym(4),
                                                                                                              new AstToken(getRhsIToken(5)),
                                                                                                              (IArgumentListopt)getRhsSym(6),
                                                                                                              new AstToken(getRhsIToken(7)))
                );
                break;
            }
            //
            // Rule 375:  ArrayAccess ::= ExpressionName [ Expression ]
            //
            case 375: {
               //#line 855 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayAccess__ExpressionName_LBRACKET_Expression_RBRACKET(getLeftIToken(), getRightIToken(),
                                                                                 (IExpressionName)getRhsSym(1),
                                                                                 new AstToken(getRhsIToken(2)),
                                                                                 (IExpression)getRhsSym(3),
                                                                                 new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 376:  ArrayAccess ::= PrimaryNoNewArray [ Expression ]
            //
            case 376: {
               //#line 856 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ArrayAccess__PrimaryNoNewArray_LBRACKET_Expression_RBRACKET(getLeftIToken(), getRightIToken(),
                                                                                    (IPrimaryNoNewArray)getRhsSym(1),
                                                                                    new AstToken(getRhsIToken(2)),
                                                                                    (IExpression)getRhsSym(3),
                                                                                    new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 377:  PostfixExpression ::= Primary
            //
            case 377:
                break;
            //
            // Rule 378:  PostfixExpression ::= ExpressionName
            //
            case 378:
                break;
            //
            // Rule 379:  PostfixExpression ::= PostIncrementExpression
            //
            case 379:
                break;
            //
            // Rule 380:  PostfixExpression ::= PostDecrementExpression
            //
            case 380:
                break;
            //
            // Rule 381:  PostIncrementExpression ::= PostfixExpression ++
            //
            case 381: {
               //#line 863 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PostIncrementExpression(getLeftIToken(), getRightIToken(),
                                                (IPostfixExpression)getRhsSym(1),
                                                new AstToken(getRhsIToken(2)))
                );
                break;
            }
            //
            // Rule 382:  PostDecrementExpression ::= PostfixExpression --
            //
            case 382: {
               //#line 865 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PostDecrementExpression(getLeftIToken(), getRightIToken(),
                                                (IPostfixExpression)getRhsSym(1),
                                                new AstToken(getRhsIToken(2)))
                );
                break;
            }
            //
            // Rule 383:  UnaryExpression ::= PreIncrementExpression
            //
            case 383:
                break;
            //
            // Rule 384:  UnaryExpression ::= PreDecrementExpression
            //
            case 384:
                break;
            //
            // Rule 385:  UnaryExpression ::= + UnaryExpression
            //
            case 385: {
               //#line 869 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new UnaryExpression__PLUS_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                              new AstToken(getRhsIToken(1)),
                                                              (IUnaryExpression)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 386:  UnaryExpression ::= - UnaryExpression
            //
            case 386: {
               //#line 870 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new UnaryExpression__MINUS_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                               new AstToken(getRhsIToken(1)),
                                                               (IUnaryExpression)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 387:  UnaryExpression ::= UnaryExpressionNotPlusMinus
            //
            case 387:
                break;
            //
            // Rule 388:  PreIncrementExpression ::= ++ UnaryExpression
            //
            case 388: {
               //#line 873 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PreIncrementExpression(getLeftIToken(), getRightIToken(),
                                               new AstToken(getRhsIToken(1)),
                                               (IUnaryExpression)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 389:  PreDecrementExpression ::= -- UnaryExpression
            //
            case 389: {
               //#line 875 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new PreDecrementExpression(getLeftIToken(), getRightIToken(),
                                               new AstToken(getRhsIToken(1)),
                                               (IUnaryExpression)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 390:  UnaryExpressionNotPlusMinus ::= PostfixExpression
            //
            case 390:
                break;
            //
            // Rule 391:  UnaryExpressionNotPlusMinus ::= ~ UnaryExpression
            //
            case 391: {
               //#line 878 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new UnaryExpressionNotPlusMinus__TWIDDLE_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                                             new AstToken(getRhsIToken(1)),
                                                                             (IUnaryExpression)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 392:  UnaryExpressionNotPlusMinus ::= ! UnaryExpression
            //
            case 392: {
               //#line 879 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new UnaryExpressionNotPlusMinus__NOT_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                                         new AstToken(getRhsIToken(1)),
                                                                         (IUnaryExpression)getRhsSym(2))
                );
                break;
            }
            //
            // Rule 393:  UnaryExpressionNotPlusMinus ::= CastExpression
            //
            case 393:
                break;
            //
            // Rule 394:  CastExpression ::= ( PrimitiveType Dimsopt ) UnaryExpression
            //
            case 394: {
               //#line 882 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new CastExpression__LPAREN_PrimitiveType_Dimsopt_RPAREN_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                                                            new AstToken(getRhsIToken(1)),
                                                                                            (IPrimitiveType)getRhsSym(2),
                                                                                            (IDimsopt)getRhsSym(3),
                                                                                            new AstToken(getRhsIToken(4)),
                                                                                            (IUnaryExpression)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 395:  CastExpression ::= ( ReferenceType ) UnaryExpressionNotPlusMinus
            //
            case 395: {
               //#line 883 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new CastExpression__LPAREN_ReferenceType_RPAREN_UnaryExpressionNotPlusMinus(getLeftIToken(), getRightIToken(),
                                                                                                new AstToken(getRhsIToken(1)),
                                                                                                (IReferenceType)getRhsSym(2),
                                                                                                new AstToken(getRhsIToken(3)),
                                                                                                (IUnaryExpressionNotPlusMinus)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 396:  MultiplicativeExpression ::= UnaryExpression
            //
            case 396:
                break;
            //
            // Rule 397:  MultiplicativeExpression ::= MultiplicativeExpression * UnaryExpression
            //
            case 397: {
               //#line 886 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MultiplicativeExpression__MultiplicativeExpression_MULTIPLY_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                                                                    (IMultiplicativeExpression)getRhsSym(1),
                                                                                                    new AstToken(getRhsIToken(2)),
                                                                                                    (IUnaryExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 398:  MultiplicativeExpression ::= MultiplicativeExpression / UnaryExpression
            //
            case 398: {
               //#line 887 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MultiplicativeExpression__MultiplicativeExpression_DIVIDE_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                                                                  (IMultiplicativeExpression)getRhsSym(1),
                                                                                                  new AstToken(getRhsIToken(2)),
                                                                                                  (IUnaryExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 399:  MultiplicativeExpression ::= MultiplicativeExpression % UnaryExpression
            //
            case 399: {
               //#line 888 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new MultiplicativeExpression__MultiplicativeExpression_REMAINDER_UnaryExpression(getLeftIToken(), getRightIToken(),
                                                                                                     (IMultiplicativeExpression)getRhsSym(1),
                                                                                                     new AstToken(getRhsIToken(2)),
                                                                                                     (IUnaryExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 400:  AdditiveExpression ::= MultiplicativeExpression
            //
            case 400:
                break;
            //
            // Rule 401:  AdditiveExpression ::= AdditiveExpression + MultiplicativeExpression
            //
            case 401: {
               //#line 891 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AdditiveExpression__AdditiveExpression_PLUS_MultiplicativeExpression(getLeftIToken(), getRightIToken(),
                                                                                             (IAdditiveExpression)getRhsSym(1),
                                                                                             new AstToken(getRhsIToken(2)),
                                                                                             (IMultiplicativeExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 402:  AdditiveExpression ::= AdditiveExpression - MultiplicativeExpression
            //
            case 402: {
               //#line 892 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AdditiveExpression__AdditiveExpression_MINUS_MultiplicativeExpression(getLeftIToken(), getRightIToken(),
                                                                                              (IAdditiveExpression)getRhsSym(1),
                                                                                              new AstToken(getRhsIToken(2)),
                                                                                              (IMultiplicativeExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 403:  ShiftExpression ::= AdditiveExpression
            //
            case 403:
                break;
            //
            // Rule 404:  ShiftExpression ::= ShiftExpression << AdditiveExpression
            //
            case 404: {
               //#line 895 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ShiftExpression__ShiftExpression_LEFT_SHIFT_AdditiveExpression(getLeftIToken(), getRightIToken(),
                                                                                       (IShiftExpression)getRhsSym(1),
                                                                                       new AstToken(getRhsIToken(2)),
                                                                                       (IAdditiveExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 405:  ShiftExpression ::= ShiftExpression > > AdditiveExpression
            //
            case 405: {
               //#line 896 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ShiftExpression__ShiftExpression_GREATER_GREATER_AdditiveExpression(getLeftIToken(), getRightIToken(),
                                                                                            (IShiftExpression)getRhsSym(1),
                                                                                            new AstToken(getRhsIToken(2)),
                                                                                            new AstToken(getRhsIToken(3)),
                                                                                            (IAdditiveExpression)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 406:  ShiftExpression ::= ShiftExpression > > > AdditiveExpression
            //
            case 406: {
               //#line 897 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ShiftExpression__ShiftExpression_GREATER_GREATER_GREATER_AdditiveExpression(getLeftIToken(), getRightIToken(),
                                                                                                    (IShiftExpression)getRhsSym(1),
                                                                                                    new AstToken(getRhsIToken(2)),
                                                                                                    new AstToken(getRhsIToken(3)),
                                                                                                    new AstToken(getRhsIToken(4)),
                                                                                                    (IAdditiveExpression)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 407:  RelationalExpression ::= ShiftExpression
            //
            case 407:
                break;
            //
            // Rule 408:  RelationalExpression ::= RelationalExpression < ShiftExpression
            //
            case 408: {
               //#line 900 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new RelationalExpression__RelationalExpression_LESS_ShiftExpression(getLeftIToken(), getRightIToken(),
                                                                                        (IRelationalExpression)getRhsSym(1),
                                                                                        new AstToken(getRhsIToken(2)),
                                                                                        (IShiftExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 409:  RelationalExpression ::= RelationalExpression > ShiftExpression
            //
            case 409: {
               //#line 901 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new RelationalExpression__RelationalExpression_GREATER_ShiftExpression(getLeftIToken(), getRightIToken(),
                                                                                           (IRelationalExpression)getRhsSym(1),
                                                                                           new AstToken(getRhsIToken(2)),
                                                                                           (IShiftExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 410:  RelationalExpression ::= RelationalExpression <= ShiftExpression
            //
            case 410: {
               //#line 902 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new RelationalExpression__RelationalExpression_LESS_EQUAL_ShiftExpression(getLeftIToken(), getRightIToken(),
                                                                                              (IRelationalExpression)getRhsSym(1),
                                                                                              new AstToken(getRhsIToken(2)),
                                                                                              (IShiftExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 411:  RelationalExpression ::= RelationalExpression > = ShiftExpression
            //
            case 411: {
               //#line 903 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new RelationalExpression__RelationalExpression_GREATER_EQUAL_ShiftExpression(getLeftIToken(), getRightIToken(),
                                                                                                 (IRelationalExpression)getRhsSym(1),
                                                                                                 new AstToken(getRhsIToken(2)),
                                                                                                 new AstToken(getRhsIToken(3)),
                                                                                                 (IShiftExpression)getRhsSym(4))
                );
                break;
            }
            //
            // Rule 412:  RelationalExpression ::= RelationalExpression instanceof ReferenceType
            //
            case 412: {
               //#line 904 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new RelationalExpression__RelationalExpression_instanceof_ReferenceType(getLeftIToken(), getRightIToken(),
                                                                                            (IRelationalExpression)getRhsSym(1),
                                                                                            new AstToken(getRhsIToken(2)),
                                                                                            (IReferenceType)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 413:  EqualityExpression ::= RelationalExpression
            //
            case 413:
                break;
            //
            // Rule 414:  EqualityExpression ::= EqualityExpression == RelationalExpression
            //
            case 414: {
               //#line 907 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EqualityExpression__EqualityExpression_EQUAL_EQUAL_RelationalExpression(getLeftIToken(), getRightIToken(),
                                                                                                (IEqualityExpression)getRhsSym(1),
                                                                                                new AstToken(getRhsIToken(2)),
                                                                                                (IRelationalExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 415:  EqualityExpression ::= EqualityExpression != RelationalExpression
            //
            case 415: {
               //#line 908 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new EqualityExpression__EqualityExpression_NOT_EQUAL_RelationalExpression(getLeftIToken(), getRightIToken(),
                                                                                              (IEqualityExpression)getRhsSym(1),
                                                                                              new AstToken(getRhsIToken(2)),
                                                                                              (IRelationalExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 416:  AndExpression ::= EqualityExpression
            //
            case 416:
                break;
            //
            // Rule 417:  AndExpression ::= AndExpression & EqualityExpression
            //
            case 417: {
               //#line 911 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AndExpression(getLeftIToken(), getRightIToken(),
                                      (IAndExpression)getRhsSym(1),
                                      new AstToken(getRhsIToken(2)),
                                      (IEqualityExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 418:  ExclusiveOrExpression ::= AndExpression
            //
            case 418:
                break;
            //
            // Rule 419:  ExclusiveOrExpression ::= ExclusiveOrExpression ^ AndExpression
            //
            case 419: {
               //#line 914 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ExclusiveOrExpression(getLeftIToken(), getRightIToken(),
                                              (IExclusiveOrExpression)getRhsSym(1),
                                              new AstToken(getRhsIToken(2)),
                                              (IAndExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 420:  InclusiveOrExpression ::= ExclusiveOrExpression
            //
            case 420:
                break;
            //
            // Rule 421:  InclusiveOrExpression ::= InclusiveOrExpression | ExclusiveOrExpression
            //
            case 421: {
               //#line 917 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new InclusiveOrExpression(getLeftIToken(), getRightIToken(),
                                              (IInclusiveOrExpression)getRhsSym(1),
                                              new AstToken(getRhsIToken(2)),
                                              (IExclusiveOrExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 422:  ConditionalAndExpression ::= InclusiveOrExpression
            //
            case 422:
                break;
            //
            // Rule 423:  ConditionalAndExpression ::= ConditionalAndExpression && InclusiveOrExpression
            //
            case 423: {
               //#line 920 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConditionalAndExpression(getLeftIToken(), getRightIToken(),
                                                 (IConditionalAndExpression)getRhsSym(1),
                                                 new AstToken(getRhsIToken(2)),
                                                 (IInclusiveOrExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 424:  ConditionalOrExpression ::= ConditionalAndExpression
            //
            case 424:
                break;
            //
            // Rule 425:  ConditionalOrExpression ::= ConditionalOrExpression || ConditionalAndExpression
            //
            case 425: {
               //#line 923 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConditionalOrExpression(getLeftIToken(), getRightIToken(),
                                                (IConditionalOrExpression)getRhsSym(1),
                                                new AstToken(getRhsIToken(2)),
                                                (IConditionalAndExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 426:  ConditionalExpression ::= ConditionalOrExpression
            //
            case 426:
                break;
            //
            // Rule 427:  ConditionalExpression ::= ConditionalOrExpression ? Expression : ConditionalExpression
            //
            case 427: {
               //#line 926 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new ConditionalExpression(getLeftIToken(), getRightIToken(),
                                              (IConditionalOrExpression)getRhsSym(1),
                                              new AstToken(getRhsIToken(2)),
                                              (IExpression)getRhsSym(3),
                                              new AstToken(getRhsIToken(4)),
                                              (IConditionalExpression)getRhsSym(5))
                );
                break;
            }
            //
            // Rule 428:  AssignmentExpression ::= ConditionalExpression
            //
            case 428:
                break;
            //
            // Rule 429:  AssignmentExpression ::= Assignment
            //
            case 429:
                break;
            //
            // Rule 430:  Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
            //
            case 430: {
               //#line 931 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Assignment(getLeftIToken(), getRightIToken(),
                                   (ILeftHandSide)getRhsSym(1),
                                   (IAssignmentOperator)getRhsSym(2),
                                   (IAssignmentExpression)getRhsSym(3))
                );
                break;
            }
            //
            // Rule 431:  LeftHandSide ::= ExpressionName
            //
            case 431:
                break;
            //
            // Rule 432:  LeftHandSide ::= FieldAccess
            //
            case 432:
                break;
            //
            // Rule 433:  LeftHandSide ::= ArrayAccess
            //
            case 433:
                break;
            //
            // Rule 434:  AssignmentOperator ::= =
            //
            case 434: {
               //#line 937 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 435:  AssignmentOperator ::= *=
            //
            case 435: {
               //#line 938 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__MULTIPLY_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 436:  AssignmentOperator ::= /=
            //
            case 436: {
               //#line 939 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__DIVIDE_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 437:  AssignmentOperator ::= %=
            //
            case 437: {
               //#line 940 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__REMAINDER_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 438:  AssignmentOperator ::= +=
            //
            case 438: {
               //#line 941 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__PLUS_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 439:  AssignmentOperator ::= -=
            //
            case 439: {
               //#line 942 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__MINUS_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 440:  AssignmentOperator ::= <<=
            //
            case 440: {
               //#line 943 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__LEFT_SHIFT_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 441:  AssignmentOperator ::= > > =
            //
            case 441: {
               //#line 944 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__GREATER_GREATER_EQUAL(getLeftIToken(), getRightIToken(),
                                                                  new AstToken(getRhsIToken(1)),
                                                                  new AstToken(getRhsIToken(2)),
                                                                  new AstToken(getRhsIToken(3)))
                );
                break;
            }
            //
            // Rule 442:  AssignmentOperator ::= > > > =
            //
            case 442: {
               //#line 945 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__GREATER_GREATER_GREATER_EQUAL(getLeftIToken(), getRightIToken(),
                                                                          new AstToken(getRhsIToken(1)),
                                                                          new AstToken(getRhsIToken(2)),
                                                                          new AstToken(getRhsIToken(3)),
                                                                          new AstToken(getRhsIToken(4)))
                );
                break;
            }
            //
            // Rule 443:  AssignmentOperator ::= &=
            //
            case 443: {
               //#line 946 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__AND_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 444:  AssignmentOperator ::= ^=
            //
            case 444: {
               //#line 947 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__XOR_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 445:  AssignmentOperator ::= |=
            //
            case 445: {
               //#line 948 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new AssignmentOperator__OR_EQUAL(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 446:  Expression ::= AssignmentExpression
            //
            case 446:
                break;
            //
            // Rule 447:  ConstantExpression ::= Expression
            //
            case 447:
                break;
            //
            // Rule 448:  Dimsopt ::= $Empty
            //
            case 448: {
               //#line 957 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 449:  Dimsopt ::= Dims
            //
            case 449:
                break;
            //
            // Rule 450:  Catchesopt ::= $Empty
            //
            case 450: {
               //#line 960 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 451:  Catchesopt ::= Catches
            //
            case 451:
                break;
            //
            // Rule 452:  identifieropt ::= $Empty
            //
            case 452: {
               //#line 963 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 453:  identifieropt ::= identifier
            //
            case 453:
                break;
            //
            // Rule 454:  ForUpdateopt ::= $Empty
            //
            case 454: {
               //#line 966 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 455:  ForUpdateopt ::= ForUpdate
            //
            case 455:
                break;
            //
            // Rule 456:  Expressionopt ::= $Empty
            //
            case 456: {
               //#line 969 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 457:  Expressionopt ::= Expression
            //
            case 457:
                break;
            //
            // Rule 458:  ForInitopt ::= $Empty
            //
            case 458: {
               //#line 972 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 459:  ForInitopt ::= ForInit
            //
            case 459:
                break;
            //
            // Rule 460:  SwitchLabelsopt ::= $Empty
            //
            case 460: {
               //#line 975 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 461:  SwitchLabelsopt ::= SwitchLabels
            //
            case 461:
                break;
            //
            // Rule 462:  SwitchBlockStatementGroupsopt ::= $Empty
            //
            case 462: {
               //#line 978 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 463:  SwitchBlockStatementGroupsopt ::= SwitchBlockStatementGroups
            //
            case 463:
                break;
            //
            // Rule 464:  VariableModifiersopt ::= $Empty
            //
            case 464: {
               //#line 981 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 465:  VariableModifiersopt ::= VariableModifiers
            //
            case 465:
                break;
            //
            // Rule 466:  VariableInitializersopt ::= $Empty
            //
            case 466: {
               //#line 984 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 467:  VariableInitializersopt ::= VariableInitializers
            //
            case 467:
                break;
            //
            // Rule 468:  ElementValuesopt ::= $Empty
            //
            case 468: {
               //#line 987 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 469:  ElementValuesopt ::= ElementValues
            //
            case 469:
                break;
            //
            // Rule 470:  ElementValuePairsopt ::= $Empty
            //
            case 470: {
               //#line 990 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 471:  ElementValuePairsopt ::= ElementValuePairs
            //
            case 471:
                break;
            //
            // Rule 472:  DefaultValueopt ::= $Empty
            //
            case 472: {
               //#line 993 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 473:  DefaultValueopt ::= DefaultValue
            //
            case 473:
                break;
            //
            // Rule 474:  AnnotationTypeElementDeclarationsopt ::= $Empty
            //
            case 474: {
               //#line 996 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 475:  AnnotationTypeElementDeclarationsopt ::= AnnotationTypeElementDeclarations
            //
            case 475:
                break;
            //
            // Rule 476:  AbstractMethodModifiersopt ::= $Empty
            //
            case 476: {
               //#line 999 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 477:  AbstractMethodModifiersopt ::= AbstractMethodModifiers
            //
            case 477:
                break;
            //
            // Rule 478:  ConstantModifiersopt ::= $Empty
            //
            case 478: {
               //#line 1002 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 479:  ConstantModifiersopt ::= ConstantModifiers
            //
            case 479:
                break;
            //
            // Rule 480:  InterfaceMemberDeclarationsopt ::= $Empty
            //
            case 480: {
               //#line 1005 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 481:  InterfaceMemberDeclarationsopt ::= InterfaceMemberDeclarations
            //
            case 481:
                break;
            //
            // Rule 482:  ExtendsInterfacesopt ::= $Empty
            //
            case 482: {
               //#line 1008 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 483:  ExtendsInterfacesopt ::= ExtendsInterfaces
            //
            case 483:
                break;
            //
            // Rule 484:  InterfaceModifiersopt ::= $Empty
            //
            case 484: {
               //#line 1011 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 485:  InterfaceModifiersopt ::= InterfaceModifiers
            //
            case 485:
                break;
            //
            // Rule 486:  ClassBodyopt ::= $Empty
            //
            case 486: {
               //#line 1014 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 487:  ClassBodyopt ::= ClassBody
            //
            case 487:
                break;
            //
            // Rule 488:  Argumentsopt ::= $Empty
            //
            case 488: {
               //#line 1017 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 489:  Argumentsopt ::= Arguments
            //
            case 489:
                break;
            //
            // Rule 490:  EnumBodyDeclarationsopt ::= $Empty
            //
            case 490: {
               //#line 1020 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 491:  EnumBodyDeclarationsopt ::= EnumBodyDeclarations
            //
            case 491:
                break;
            //
            // Rule 492:  ,opt ::= $Empty
            //
            case 492: {
               //#line 1023 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 493:  ,opt ::= ,
            //
            case 493: {
               //#line 1024 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Commaopt(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 494:  EnumConstantsopt ::= $Empty
            //
            case 494: {
               //#line 1026 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 495:  EnumConstantsopt ::= EnumConstants
            //
            case 495:
                break;
            //
            // Rule 496:  ArgumentListopt ::= $Empty
            //
            case 496: {
               //#line 1029 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 497:  ArgumentListopt ::= ArgumentList
            //
            case 497:
                break;
            //
            // Rule 498:  BlockStatementsopt ::= $Empty
            //
            case 498: {
               //#line 1032 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 499:  BlockStatementsopt ::= BlockStatements
            //
            case 499:
                break;
            //
            // Rule 500:  ExplicitConstructorInvocationopt ::= $Empty
            //
            case 500: {
               //#line 1035 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 501:  ExplicitConstructorInvocationopt ::= ExplicitConstructorInvocation
            //
            case 501:
                break;
            //
            // Rule 502:  ConstructorModifiersopt ::= $Empty
            //
            case 502: {
               //#line 1038 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 503:  ConstructorModifiersopt ::= ConstructorModifiers
            //
            case 503:
                break;
            //
            // Rule 504:  ...opt ::= $Empty
            //
            case 504: {
               //#line 1041 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 505:  ...opt ::= ...
            //
            case 505: {
               //#line 1042 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(
                    new Ellipsisopt(getRhsIToken(1))
                );
                break;
            }
            //
            // Rule 506:  FormalParameterListopt ::= $Empty
            //
            case 506: {
               //#line 1044 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 507:  FormalParameterListopt ::= FormalParameterList
            //
            case 507:
                break;
            //
            // Rule 508:  Throwsopt ::= $Empty
            //
            case 508: {
               //#line 1047 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 509:  Throwsopt ::= Throws
            //
            case 509:
                break;
            //
            // Rule 510:  MethodModifiersopt ::= $Empty
            //
            case 510: {
               //#line 1050 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 511:  MethodModifiersopt ::= MethodModifiers
            //
            case 511:
                break;
            //
            // Rule 512:  FieldModifiersopt ::= $Empty
            //
            case 512: {
               //#line 1053 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 513:  FieldModifiersopt ::= FieldModifiers
            //
            case 513:
                break;
            //
            // Rule 514:  ClassBodyDeclarationsopt ::= $Empty
            //
            case 514: {
               //#line 1056 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 515:  ClassBodyDeclarationsopt ::= ClassBodyDeclarations
            //
            case 515:
                break;
            //
            // Rule 516:  Interfacesopt ::= $Empty
            //
            case 516: {
               //#line 1059 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 517:  Interfacesopt ::= Interfaces
            //
            case 517:
                break;
            //
            // Rule 518:  Superopt ::= $Empty
            //
            case 518: {
               //#line 1062 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 519:  Superopt ::= Super
            //
            case 519:
                break;
            //
            // Rule 520:  TypeParametersopt ::= $Empty
            //
            case 520: {
               //#line 1065 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 521:  TypeParametersopt ::= TypeParameters
            //
            case 521:
                break;
            //
            // Rule 522:  ClassModifiersopt ::= $Empty
            //
            case 522: {
               //#line 1068 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 523:  ClassModifiersopt ::= ClassModifiers
            //
            case 523:
                break;
            //
            // Rule 524:  Annotationsopt ::= $Empty
            //
            case 524: {
               //#line 1071 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 525:  Annotationsopt ::= Annotations
            //
            case 525:
                break;
            //
            // Rule 526:  TypeDeclarationsopt ::= $Empty
            //
            case 526: {
               //#line 1074 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 527:  TypeDeclarationsopt ::= TypeDeclarations
            //
            case 527:
                break;
            //
            // Rule 528:  ImportDeclarationsopt ::= $Empty
            //
            case 528: {
               //#line 1077 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 529:  ImportDeclarationsopt ::= ImportDeclarations
            //
            case 529:
                break;
            //
            // Rule 530:  PackageDeclarationopt ::= $Empty
            //
            case 530: {
               //#line 1080 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 531:  PackageDeclarationopt ::= PackageDeclaration
            //
            case 531:
                break;
            //
            // Rule 532:  WildcardBoundsOpt ::= $Empty
            //
            case 532: {
               //#line 1083 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 533:  WildcardBoundsOpt ::= WildcardBounds
            //
            case 533:
                break;
            //
            // Rule 534:  AdditionalBoundListopt ::= $Empty
            //
            case 534: {
               //#line 1086 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 535:  AdditionalBoundListopt ::= AdditionalBoundList
            //
            case 535:
                break;
            //
            // Rule 536:  TypeBoundopt ::= $Empty
            //
            case 536: {
               //#line 1089 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 537:  TypeBoundopt ::= TypeBound
            //
            case 537:
                break;
            //
            // Rule 538:  TypeArgumentsopt ::= $Empty
            //
            case 538: {
               //#line 1092 "/Developer/eclipse-3.5.2-Classic/plugins/lpg.generator_2.0.19/templates/java/btParserTemplateF.gi"
                setResult(null);
                break;
            }
            //
            // Rule 539:  TypeArgumentsopt ::= TypeArguments
            //
            case 539:
                break;
    
            default:
                break;
        }
        return;
    }
}

